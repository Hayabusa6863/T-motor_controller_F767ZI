
T-motor_controller_F767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a958  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800ab58  0800ab58  0001ab58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abf8  0800abf8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800abf8  0800abf8  0001abf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac00  0800ac00  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac00  0800ac00  0001ac00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac04  0800ac04  0001ac04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800ac08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005468  20000010  0800ac18  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20005478  0800ac18  00025478  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027afe  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d15  00000000  00000000  00047b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001df8  00000000  00000000  0004c858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c20  00000000  00000000  0004e650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000083ed  00000000  00000000  00050270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021f62  00000000  00000000  0005865d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110861  00000000  00000000  0007a5bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018ae20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f10  00000000  00000000  0018ae74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ab40 	.word	0x0800ab40

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	0800ab40 	.word	0x0800ab40

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b96e 	b.w	8000534 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468c      	mov	ip, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	f040 8083 	bne.w	8000386 <__udivmoddi4+0x116>
 8000280:	428a      	cmp	r2, r1
 8000282:	4617      	mov	r7, r2
 8000284:	d947      	bls.n	8000316 <__udivmoddi4+0xa6>
 8000286:	fab2 f282 	clz	r2, r2
 800028a:	b142      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028c:	f1c2 0020 	rsb	r0, r2, #32
 8000290:	fa24 f000 	lsr.w	r0, r4, r0
 8000294:	4091      	lsls	r1, r2
 8000296:	4097      	lsls	r7, r2
 8000298:	ea40 0c01 	orr.w	ip, r0, r1
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbbc f6f8 	udiv	r6, ip, r8
 80002a8:	fa1f fe87 	uxth.w	lr, r7
 80002ac:	fb08 c116 	mls	r1, r8, r6, ip
 80002b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b4:	fb06 f10e 	mul.w	r1, r6, lr
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18fb      	adds	r3, r7, r3
 80002be:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c2:	f080 8119 	bcs.w	80004f8 <__udivmoddi4+0x288>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8116 	bls.w	80004f8 <__udivmoddi4+0x288>
 80002cc:	3e02      	subs	r6, #2
 80002ce:	443b      	add	r3, r7
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d8:	fb08 3310 	mls	r3, r8, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002e4:	45a6      	cmp	lr, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	193c      	adds	r4, r7, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8105 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002f2:	45a6      	cmp	lr, r4
 80002f4:	f240 8102 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002f8:	3802      	subs	r0, #2
 80002fa:	443c      	add	r4, r7
 80002fc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000300:	eba4 040e 	sub.w	r4, r4, lr
 8000304:	2600      	movs	r6, #0
 8000306:	b11d      	cbz	r5, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c5 4300 	strd	r4, r3, [r5]
 8000310:	4631      	mov	r1, r6
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xaa>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	2a00      	cmp	r2, #0
 8000320:	d150      	bne.n	80003c4 <__udivmoddi4+0x154>
 8000322:	1bcb      	subs	r3, r1, r7
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	fa1f f887 	uxth.w	r8, r7
 800032c:	2601      	movs	r6, #1
 800032e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000332:	0c21      	lsrs	r1, r4, #16
 8000334:	fb0e 331c 	mls	r3, lr, ip, r3
 8000338:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800033c:	fb08 f30c 	mul.w	r3, r8, ip
 8000340:	428b      	cmp	r3, r1
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000344:	1879      	adds	r1, r7, r1
 8000346:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0xe2>
 800034c:	428b      	cmp	r3, r1
 800034e:	f200 80e9 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 8000352:	4684      	mov	ip, r0
 8000354:	1ac9      	subs	r1, r1, r3
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb1 f0fe 	udiv	r0, r1, lr
 800035c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000360:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000364:	fb08 f800 	mul.w	r8, r8, r0
 8000368:	45a0      	cmp	r8, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x10c>
 800036c:	193c      	adds	r4, r7, r4
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x10a>
 8000374:	45a0      	cmp	r8, r4
 8000376:	f200 80d9 	bhi.w	800052c <__udivmoddi4+0x2bc>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 0408 	sub.w	r4, r4, r8
 8000380:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000384:	e7bf      	b.n	8000306 <__udivmoddi4+0x96>
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x12e>
 800038a:	2d00      	cmp	r5, #0
 800038c:	f000 80b1 	beq.w	80004f2 <__udivmoddi4+0x282>
 8000390:	2600      	movs	r6, #0
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	4630      	mov	r0, r6
 8000398:	4631      	mov	r1, r6
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f683 	clz	r6, r3
 80003a2:	2e00      	cmp	r6, #0
 80003a4:	d14a      	bne.n	800043c <__udivmoddi4+0x1cc>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0x140>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80b8 	bhi.w	8000520 <__udivmoddi4+0x2b0>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0103 	sbc.w	r1, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	468c      	mov	ip, r1
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	d0a8      	beq.n	8000310 <__udivmoddi4+0xa0>
 80003be:	e9c5 4c00 	strd	r4, ip, [r5]
 80003c2:	e7a5      	b.n	8000310 <__udivmoddi4+0xa0>
 80003c4:	f1c2 0320 	rsb	r3, r2, #32
 80003c8:	fa20 f603 	lsr.w	r6, r0, r3
 80003cc:	4097      	lsls	r7, r2
 80003ce:	fa01 f002 	lsl.w	r0, r1, r2
 80003d2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d6:	40d9      	lsrs	r1, r3
 80003d8:	4330      	orrs	r0, r6
 80003da:	0c03      	lsrs	r3, r0, #16
 80003dc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e0:	fa1f f887 	uxth.w	r8, r7
 80003e4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb06 f108 	mul.w	r1, r6, r8
 80003f0:	4299      	cmp	r1, r3
 80003f2:	fa04 f402 	lsl.w	r4, r4, r2
 80003f6:	d909      	bls.n	800040c <__udivmoddi4+0x19c>
 80003f8:	18fb      	adds	r3, r7, r3
 80003fa:	f106 3cff 	add.w	ip, r6, #4294967295
 80003fe:	f080 808d 	bcs.w	800051c <__udivmoddi4+0x2ac>
 8000402:	4299      	cmp	r1, r3
 8000404:	f240 808a 	bls.w	800051c <__udivmoddi4+0x2ac>
 8000408:	3e02      	subs	r6, #2
 800040a:	443b      	add	r3, r7
 800040c:	1a5b      	subs	r3, r3, r1
 800040e:	b281      	uxth	r1, r0
 8000410:	fbb3 f0fe 	udiv	r0, r3, lr
 8000414:	fb0e 3310 	mls	r3, lr, r0, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb00 f308 	mul.w	r3, r0, r8
 8000420:	428b      	cmp	r3, r1
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x1c4>
 8000424:	1879      	adds	r1, r7, r1
 8000426:	f100 3cff 	add.w	ip, r0, #4294967295
 800042a:	d273      	bcs.n	8000514 <__udivmoddi4+0x2a4>
 800042c:	428b      	cmp	r3, r1
 800042e:	d971      	bls.n	8000514 <__udivmoddi4+0x2a4>
 8000430:	3802      	subs	r0, #2
 8000432:	4439      	add	r1, r7
 8000434:	1acb      	subs	r3, r1, r3
 8000436:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800043a:	e778      	b.n	800032e <__udivmoddi4+0xbe>
 800043c:	f1c6 0c20 	rsb	ip, r6, #32
 8000440:	fa03 f406 	lsl.w	r4, r3, r6
 8000444:	fa22 f30c 	lsr.w	r3, r2, ip
 8000448:	431c      	orrs	r4, r3
 800044a:	fa20 f70c 	lsr.w	r7, r0, ip
 800044e:	fa01 f306 	lsl.w	r3, r1, r6
 8000452:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000456:	fa21 f10c 	lsr.w	r1, r1, ip
 800045a:	431f      	orrs	r7, r3
 800045c:	0c3b      	lsrs	r3, r7, #16
 800045e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000462:	fa1f f884 	uxth.w	r8, r4
 8000466:	fb0e 1119 	mls	r1, lr, r9, r1
 800046a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800046e:	fb09 fa08 	mul.w	sl, r9, r8
 8000472:	458a      	cmp	sl, r1
 8000474:	fa02 f206 	lsl.w	r2, r2, r6
 8000478:	fa00 f306 	lsl.w	r3, r0, r6
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x220>
 800047e:	1861      	adds	r1, r4, r1
 8000480:	f109 30ff 	add.w	r0, r9, #4294967295
 8000484:	d248      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 8000486:	458a      	cmp	sl, r1
 8000488:	d946      	bls.n	8000518 <__udivmoddi4+0x2a8>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4421      	add	r1, r4
 8000490:	eba1 010a 	sub.w	r1, r1, sl
 8000494:	b2bf      	uxth	r7, r7
 8000496:	fbb1 f0fe 	udiv	r0, r1, lr
 800049a:	fb0e 1110 	mls	r1, lr, r0, r1
 800049e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004a2:	fb00 f808 	mul.w	r8, r0, r8
 80004a6:	45b8      	cmp	r8, r7
 80004a8:	d907      	bls.n	80004ba <__udivmoddi4+0x24a>
 80004aa:	19e7      	adds	r7, r4, r7
 80004ac:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b0:	d22e      	bcs.n	8000510 <__udivmoddi4+0x2a0>
 80004b2:	45b8      	cmp	r8, r7
 80004b4:	d92c      	bls.n	8000510 <__udivmoddi4+0x2a0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4427      	add	r7, r4
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	eba7 0708 	sub.w	r7, r7, r8
 80004c2:	fba0 8902 	umull	r8, r9, r0, r2
 80004c6:	454f      	cmp	r7, r9
 80004c8:	46c6      	mov	lr, r8
 80004ca:	4649      	mov	r1, r9
 80004cc:	d31a      	bcc.n	8000504 <__udivmoddi4+0x294>
 80004ce:	d017      	beq.n	8000500 <__udivmoddi4+0x290>
 80004d0:	b15d      	cbz	r5, 80004ea <__udivmoddi4+0x27a>
 80004d2:	ebb3 020e 	subs.w	r2, r3, lr
 80004d6:	eb67 0701 	sbc.w	r7, r7, r1
 80004da:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004de:	40f2      	lsrs	r2, r6
 80004e0:	ea4c 0202 	orr.w	r2, ip, r2
 80004e4:	40f7      	lsrs	r7, r6
 80004e6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ea:	2600      	movs	r6, #0
 80004ec:	4631      	mov	r1, r6
 80004ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e70b      	b.n	8000310 <__udivmoddi4+0xa0>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e9      	b.n	80002d0 <__udivmoddi4+0x60>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6fd      	b.n	80002fc <__udivmoddi4+0x8c>
 8000500:	4543      	cmp	r3, r8
 8000502:	d2e5      	bcs.n	80004d0 <__udivmoddi4+0x260>
 8000504:	ebb8 0e02 	subs.w	lr, r8, r2
 8000508:	eb69 0104 	sbc.w	r1, r9, r4
 800050c:	3801      	subs	r0, #1
 800050e:	e7df      	b.n	80004d0 <__udivmoddi4+0x260>
 8000510:	4608      	mov	r0, r1
 8000512:	e7d2      	b.n	80004ba <__udivmoddi4+0x24a>
 8000514:	4660      	mov	r0, ip
 8000516:	e78d      	b.n	8000434 <__udivmoddi4+0x1c4>
 8000518:	4681      	mov	r9, r0
 800051a:	e7b9      	b.n	8000490 <__udivmoddi4+0x220>
 800051c:	4666      	mov	r6, ip
 800051e:	e775      	b.n	800040c <__udivmoddi4+0x19c>
 8000520:	4630      	mov	r0, r6
 8000522:	e74a      	b.n	80003ba <__udivmoddi4+0x14a>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	4439      	add	r1, r7
 800052a:	e713      	b.n	8000354 <__udivmoddi4+0xe4>
 800052c:	3802      	subs	r0, #2
 800052e:	443c      	add	r4, r7
 8000530:	e724      	b.n	800037c <__udivmoddi4+0x10c>
 8000532:	bf00      	nop

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f000 fe05 	bl	800114a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f852 	bl	80005e8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f000 f9da 	bl	80008fc <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000548:	f000 f9b2 	bl	80008b0 <_ZL11MX_DMA_Initv>
  MX_USART3_UART_Init();
 800054c:	f000 f94a 	bl	80007e4 <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8000550:	f000 f97c 	bl	800084c <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_CAN1_Init();
 8000554:	f000 f8ec 	bl	8000730 <_ZL12MX_CAN1_Initv>
  MX_SDMMC1_SD_Init();
 8000558:	f000 f924 	bl	80007a4 <_ZL17MX_SDMMC1_SD_Initv>
  MX_FATFS_Init();
 800055c:	f006 fe04 	bl	8007168 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  // start CAN
  HAL_CAN_Start(&hcan1);
 8000560:	4819      	ldr	r0, [pc, #100]	; (80005c8 <main+0x90>)
 8000562:	f000 ff3e 	bl	80013e2 <HAL_CAN_Start>
  if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 8000566:	2102      	movs	r1, #2
 8000568:	4817      	ldr	r0, [pc, #92]	; (80005c8 <main+0x90>)
 800056a:	f001 f890 	bl	800168e <HAL_CAN_ActivateNotification>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	bf14      	ite	ne
 8000574:	2301      	movne	r3, #1
 8000576:	2300      	moveq	r3, #0
 8000578:	b2db      	uxtb	r3, r3
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <main+0x4a>
	  Error_Handler();
 800057e:	f000 faeb 	bl	8000b58 <Error_Handler>
  }

  TxHeader.RTR = CAN_RTR_DATA;
 8000582:	4b12      	ldr	r3, [pc, #72]	; (80005cc <main+0x94>)
 8000584:	2200      	movs	r2, #0
 8000586:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8000588:	4b10      	ldr	r3, [pc, #64]	; (80005cc <main+0x94>)
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 3;
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <main+0x94>)
 8000590:	2203      	movs	r2, #3
 8000592:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000594:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <main+0x94>)
 8000596:	2200      	movs	r2, #0
 8000598:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800059a:	f007 f89d 	bl	80076d8 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of CAN_send_timer */
  CAN_send_timerHandle = osTimerNew(CAN_send, osTimerPeriodic, NULL, &CAN_send_timer_attributes);
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <main+0x98>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	2101      	movs	r1, #1
 80005a4:	480b      	ldr	r0, [pc, #44]	; (80005d4 <main+0x9c>)
 80005a6:	f007 fa35 	bl	8007a14 <osTimerNew>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a0a      	ldr	r2, [pc, #40]	; (80005d8 <main+0xa0>)
 80005ae:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of SDcard */
  SDcardHandle = osThreadNew(StartSDcard, NULL, &SDcard_attributes);
 80005b0:	4a0a      	ldr	r2, [pc, #40]	; (80005dc <main+0xa4>)
 80005b2:	2100      	movs	r1, #0
 80005b4:	480a      	ldr	r0, [pc, #40]	; (80005e0 <main+0xa8>)
 80005b6:	f007 f943 	bl	8007840 <osThreadNew>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a09      	ldr	r2, [pc, #36]	; (80005e4 <main+0xac>)
 80005be:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005c0:	f007 f8e0 	bl	8007784 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <main+0x8c>
 80005c6:	bf00      	nop
 80005c8:	2000002c 	.word	0x2000002c
 80005cc:	20000644 	.word	0x20000644
 80005d0:	0800abb4 	.word	0x0800abb4
 80005d4:	08000b21 	.word	0x08000b21
 80005d8:	20000624 	.word	0x20000624
 80005dc:	0800ab90 	.word	0x0800ab90
 80005e0:	08000af1 	.word	0x08000af1
 80005e4:	20000620 	.word	0x20000620

080005e8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b0b8      	sub	sp, #224	; 0xe0
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005f2:	2234      	movs	r2, #52	; 0x34
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f00a fa9a 	bl	800ab30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	2290      	movs	r2, #144	; 0x90
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f00a fa8b 	bl	800ab30 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800061a:	f002 fa3d 	bl	8002a98 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061e:	4b41      	ldr	r3, [pc, #260]	; (8000724 <_Z18SystemClock_Configv+0x13c>)
 8000620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000622:	4a40      	ldr	r2, [pc, #256]	; (8000724 <_Z18SystemClock_Configv+0x13c>)
 8000624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000628:	6413      	str	r3, [r2, #64]	; 0x40
 800062a:	4b3e      	ldr	r3, [pc, #248]	; (8000724 <_Z18SystemClock_Configv+0x13c>)
 800062c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000636:	4b3c      	ldr	r3, [pc, #240]	; (8000728 <_Z18SystemClock_Configv+0x140>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800063e:	4a3a      	ldr	r2, [pc, #232]	; (8000728 <_Z18SystemClock_Configv+0x140>)
 8000640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000644:	6013      	str	r3, [r2, #0]
 8000646:	4b38      	ldr	r3, [pc, #224]	; (8000728 <_Z18SystemClock_Configv+0x140>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000652:	2301      	movs	r3, #1
 8000654:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000658:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800065c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000660:	2302      	movs	r3, #2
 8000662:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000666:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800066e:	2304      	movs	r3, #4
 8000670:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000674:	2360      	movs	r3, #96	; 0x60
 8000676:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800067a:	2304      	movs	r3, #4
 800067c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000680:	2304      	movs	r3, #4
 8000682:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800068a:	4618      	mov	r0, r3
 800068c:	f002 fa14 	bl	8002ab8 <HAL_RCC_OscConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	bf14      	ite	ne
 8000696:	2301      	movne	r3, #1
 8000698:	2300      	moveq	r3, #0
 800069a:	b2db      	uxtb	r3, r3
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 80006a0:	f000 fa5a 	bl	8000b58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2302      	movs	r3, #2
 80006ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006c6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006ca:	2101      	movs	r1, #1
 80006cc:	4618      	mov	r0, r3
 80006ce:	f002 fca1 	bl	8003014 <HAL_RCC_ClockConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	bf14      	ite	ne
 80006d8:	2301      	movne	r3, #1
 80006da:	2300      	moveq	r3, #0
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <_Z18SystemClock_Configv+0xfe>
  {
    Error_Handler();
 80006e2:	f000 fa39 	bl	8000b58 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SDMMC1
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <_Z18SystemClock_Configv+0x144>)
 80006e8:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 80006f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006fc:	f107 0308 	add.w	r3, r7, #8
 8000700:	4618      	mov	r0, r3
 8000702:	f002 febb 	bl	800347c <HAL_RCCEx_PeriphCLKConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	bf14      	ite	ne
 800070c:	2301      	movne	r3, #1
 800070e:	2300      	moveq	r3, #0
 8000710:	b2db      	uxtb	r3, r3
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <_Z18SystemClock_Configv+0x132>
  {
    Error_Handler();
 8000716:	f000 fa1f 	bl	8000b58 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	37e0      	adds	r7, #224	; 0xe0
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000
 800072c:	00a00100 	.word	0x00a00100

08000730 <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000734:	4b19      	ldr	r3, [pc, #100]	; (800079c <_ZL12MX_CAN1_Initv+0x6c>)
 8000736:	4a1a      	ldr	r2, [pc, #104]	; (80007a0 <_ZL12MX_CAN1_Initv+0x70>)
 8000738:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <_ZL12MX_CAN1_Initv+0x6c>)
 800073c:	2201      	movs	r2, #1
 800073e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000740:	4b16      	ldr	r3, [pc, #88]	; (800079c <_ZL12MX_CAN1_Initv+0x6c>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <_ZL12MX_CAN1_Initv+0x6c>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 800074c:	4b13      	ldr	r3, [pc, #76]	; (800079c <_ZL12MX_CAN1_Initv+0x6c>)
 800074e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000752:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <_ZL12MX_CAN1_Initv+0x6c>)
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <_ZL12MX_CAN1_Initv+0x6c>)
 800075c:	2200      	movs	r2, #0
 800075e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000760:	4b0e      	ldr	r3, [pc, #56]	; (800079c <_ZL12MX_CAN1_Initv+0x6c>)
 8000762:	2200      	movs	r2, #0
 8000764:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000766:	4b0d      	ldr	r3, [pc, #52]	; (800079c <_ZL12MX_CAN1_Initv+0x6c>)
 8000768:	2200      	movs	r2, #0
 800076a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800076c:	4b0b      	ldr	r3, [pc, #44]	; (800079c <_ZL12MX_CAN1_Initv+0x6c>)
 800076e:	2200      	movs	r2, #0
 8000770:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <_ZL12MX_CAN1_Initv+0x6c>)
 8000774:	2200      	movs	r2, #0
 8000776:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <_ZL12MX_CAN1_Initv+0x6c>)
 800077a:	2200      	movs	r2, #0
 800077c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800077e:	4807      	ldr	r0, [pc, #28]	; (800079c <_ZL12MX_CAN1_Initv+0x6c>)
 8000780:	f000 fd34 	bl	80011ec <HAL_CAN_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	bf14      	ite	ne
 800078a:	2301      	movne	r3, #1
 800078c:	2300      	moveq	r3, #0
 800078e:	b2db      	uxtb	r3, r3
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <_ZL12MX_CAN1_Initv+0x68>
  {
    Error_Handler();
 8000794:	f000 f9e0 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	2000002c 	.word	0x2000002c
 80007a0:	40006400 	.word	0x40006400

080007a4 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 80007aa:	4a0d      	ldr	r2, [pc, #52]	; (80007e0 <_ZL17MX_SDMMC1_SD_Initv+0x3c>)
 80007ac:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80007c6:	4b05      	ldr	r3, [pc, #20]	; (80007dc <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80007cc:	4b03      	ldr	r3, [pc, #12]	; (80007dc <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	20000054 	.word	0x20000054
 80007e0:	40012c00 	.word	0x40012c00

080007e4 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007e8:	4b16      	ldr	r3, [pc, #88]	; (8000844 <_ZL19MX_USART3_UART_Initv+0x60>)
 80007ea:	4a17      	ldr	r2, [pc, #92]	; (8000848 <_ZL19MX_USART3_UART_Initv+0x64>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <_ZL19MX_USART3_UART_Initv+0x60>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b13      	ldr	r3, [pc, #76]	; (8000844 <_ZL19MX_USART3_UART_Initv+0x60>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <_ZL19MX_USART3_UART_Initv+0x60>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <_ZL19MX_USART3_UART_Initv+0x60>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081a:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <_ZL19MX_USART3_UART_Initv+0x60>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000826:	4807      	ldr	r0, [pc, #28]	; (8000844 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000828:	f005 f856 	bl	80058d8 <HAL_UART_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	bf14      	ite	ne
 8000832:	2301      	movne	r3, #1
 8000834:	2300      	moveq	r3, #0
 8000836:	b2db      	uxtb	r3, r3
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 800083c:	f000 f98c 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000198 	.word	0x20000198
 8000848:	40004800 	.word	0x40004800

0800084c <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000850:	4b16      	ldr	r3, [pc, #88]	; (80008ac <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000852:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000856:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800085a:	2206      	movs	r2, #6
 800085c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000860:	2202      	movs	r2, #2
 8000862:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800086c:	2202      	movs	r2, #2
 800086e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000870:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000872:	2201      	movs	r2, #1
 8000874:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000878:	2200      	movs	r2, #0
 800087a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800087c:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800087e:	2200      	movs	r2, #0
 8000880:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000882:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000884:	2201      	movs	r2, #1
 8000886:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000888:	4b08      	ldr	r3, [pc, #32]	; (80008ac <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800088a:	2200      	movs	r2, #0
 800088c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800088e:	4807      	ldr	r0, [pc, #28]	; (80008ac <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000890:	f001 ffb9 	bl	8002806 <HAL_PCD_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	bf14      	ite	ne
 800089a:	2301      	movne	r3, #1
 800089c:	2300      	moveq	r3, #0
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x5c>
  {
    Error_Handler();
 80008a4:	f000 f958 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	2000021c 	.word	0x2000021c

080008b0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <_ZL11MX_DMA_Initv+0x48>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a0f      	ldr	r2, [pc, #60]	; (80008f8 <_ZL11MX_DMA_Initv+0x48>)
 80008bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <_ZL11MX_DMA_Initv+0x48>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2105      	movs	r1, #5
 80008d2:	203b      	movs	r0, #59	; 0x3b
 80008d4:	f001 f9e8 	bl	8001ca8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008d8:	203b      	movs	r0, #59	; 0x3b
 80008da:	f001 fa01 	bl	8001ce0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2105      	movs	r1, #5
 80008e2:	2045      	movs	r0, #69	; 0x45
 80008e4:	f001 f9e0 	bl	8001ca8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80008e8:	2045      	movs	r0, #69	; 0x45
 80008ea:	f001 f9f9 	bl	8001ce0 <HAL_NVIC_EnableIRQ>

}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800

080008fc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08c      	sub	sp, #48	; 0x30
 8000900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000912:	4b67      	ldr	r3, [pc, #412]	; (8000ab0 <_ZL12MX_GPIO_Initv+0x1b4>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a66      	ldr	r2, [pc, #408]	; (8000ab0 <_ZL12MX_GPIO_Initv+0x1b4>)
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b64      	ldr	r3, [pc, #400]	; (8000ab0 <_ZL12MX_GPIO_Initv+0x1b4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0304 	and.w	r3, r3, #4
 8000926:	61bb      	str	r3, [r7, #24]
 8000928:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092a:	4b61      	ldr	r3, [pc, #388]	; (8000ab0 <_ZL12MX_GPIO_Initv+0x1b4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a60      	ldr	r2, [pc, #384]	; (8000ab0 <_ZL12MX_GPIO_Initv+0x1b4>)
 8000930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b5e      	ldr	r3, [pc, #376]	; (8000ab0 <_ZL12MX_GPIO_Initv+0x1b4>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	4b5b      	ldr	r3, [pc, #364]	; (8000ab0 <_ZL12MX_GPIO_Initv+0x1b4>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a5a      	ldr	r2, [pc, #360]	; (8000ab0 <_ZL12MX_GPIO_Initv+0x1b4>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b58      	ldr	r3, [pc, #352]	; (8000ab0 <_ZL12MX_GPIO_Initv+0x1b4>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	4b55      	ldr	r3, [pc, #340]	; (8000ab0 <_ZL12MX_GPIO_Initv+0x1b4>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a54      	ldr	r2, [pc, #336]	; (8000ab0 <_ZL12MX_GPIO_Initv+0x1b4>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b52      	ldr	r3, [pc, #328]	; (8000ab0 <_ZL12MX_GPIO_Initv+0x1b4>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000972:	4b4f      	ldr	r3, [pc, #316]	; (8000ab0 <_ZL12MX_GPIO_Initv+0x1b4>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a4e      	ldr	r2, [pc, #312]	; (8000ab0 <_ZL12MX_GPIO_Initv+0x1b4>)
 8000978:	f043 0308 	orr.w	r3, r3, #8
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b4c      	ldr	r3, [pc, #304]	; (8000ab0 <_ZL12MX_GPIO_Initv+0x1b4>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0308 	and.w	r3, r3, #8
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800098a:	4b49      	ldr	r3, [pc, #292]	; (8000ab0 <_ZL12MX_GPIO_Initv+0x1b4>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a48      	ldr	r2, [pc, #288]	; (8000ab0 <_ZL12MX_GPIO_Initv+0x1b4>)
 8000990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b46      	ldr	r3, [pc, #280]	; (8000ab0 <_ZL12MX_GPIO_Initv+0x1b4>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f244 0181 	movw	r1, #16513	; 0x4081
 80009a8:	4842      	ldr	r0, [pc, #264]	; (8000ab4 <_ZL12MX_GPIO_Initv+0x1b8>)
 80009aa:	f001 fef9 	bl	80027a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2140      	movs	r1, #64	; 0x40
 80009b2:	4841      	ldr	r0, [pc, #260]	; (8000ab8 <_ZL12MX_GPIO_Initv+0x1bc>)
 80009b4:	f001 fef4 	bl	80027a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009be:	4b3f      	ldr	r3, [pc, #252]	; (8000abc <_ZL12MX_GPIO_Initv+0x1c0>)
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	483c      	ldr	r0, [pc, #240]	; (8000ac0 <_ZL12MX_GPIO_Initv+0x1c4>)
 80009ce:	f001 fd3b 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009d2:	2332      	movs	r3, #50	; 0x32
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009de:	2303      	movs	r3, #3
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009e2:	230b      	movs	r3, #11
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	4834      	ldr	r0, [pc, #208]	; (8000ac0 <_ZL12MX_GPIO_Initv+0x1c4>)
 80009ee:	f001 fd2b 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009f2:	2386      	movs	r3, #134	; 0x86
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a02:	230b      	movs	r3, #11
 8000a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	482d      	ldr	r0, [pc, #180]	; (8000ac4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000a0e:	f001 fd1b 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a12:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4822      	ldr	r0, [pc, #136]	; (8000ab4 <_ZL12MX_GPIO_Initv+0x1b8>)
 8000a2c:	f001 fd0c 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a42:	230b      	movs	r3, #11
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4819      	ldr	r0, [pc, #100]	; (8000ab4 <_ZL12MX_GPIO_Initv+0x1b8>)
 8000a4e:	f001 fcfb 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a52:	2340      	movs	r3, #64	; 0x40
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	4813      	ldr	r0, [pc, #76]	; (8000ab8 <_ZL12MX_GPIO_Initv+0x1bc>)
 8000a6a:	f001 fced 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a6e:	2380      	movs	r3, #128	; 0x80
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <_ZL12MX_GPIO_Initv+0x1bc>)
 8000a82:	f001 fce1 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a86:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a94:	2303      	movs	r3, #3
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a98:	230b      	movs	r3, #11
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <_ZL12MX_GPIO_Initv+0x1bc>)
 8000aa4:	f001 fcd0 	bl	8002448 <HAL_GPIO_Init>

}
 8000aa8:	bf00      	nop
 8000aaa:	3730      	adds	r7, #48	; 0x30
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40020400 	.word	0x40020400
 8000ab8:	40021800 	.word	0x40021800
 8000abc:	10110000 	.word	0x10110000
 8000ac0:	40020800 	.word	0x40020800
 8000ac4:	40020000 	.word	0x40020000

08000ac8 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, Rx_buffer) == HAL_OK){
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8000ad2:	4a06      	ldr	r2, [pc, #24]	; (8000aec <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f000 fcc7 	bl	800146a <HAL_CAN_GetRxMessage>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
		// copy RxMessage data to buffer(no conversion from integer to float due to ISR context)


	}
}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	2000065c 	.word	0x2000065c
 8000aec:	20000628 	.word	0x20000628

08000af0 <_Z11StartSDcardPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSDcard */
void StartSDcard(void *argument)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	osTimerStart(CAN_send_timerHandle, 1000);
 8000af8:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <_Z11StartSDcardPv+0x28>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b00:	4618      	mov	r0, r3
 8000b02:	f007 f80b 	bl	8007b1c <osTimerStart>
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000b06:	2101      	movs	r1, #1
 8000b08:	4804      	ldr	r0, [pc, #16]	; (8000b1c <_Z11StartSDcardPv+0x2c>)
 8000b0a:	f001 fe62 	bl	80027d2 <HAL_GPIO_TogglePin>
    osDelay(2000);
 8000b0e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b12:	f006 ff3b 	bl	800798c <osDelay>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000b16:	e7f6      	b.n	8000b06 <_Z11StartSDcardPv+0x16>
 8000b18:	20000624 	.word	0x20000624
 8000b1c:	40020400 	.word	0x40020400

08000b20 <_Z8CAN_sendPv>:
  /* USER CODE END 5 */
}

/* CAN_send function */
void CAN_send(void *argument)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CAN_send */

  /* USER CODE END CAN_send */
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d101      	bne.n	8000b4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b46:	f000 fb0d 	bl	8001164 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40001000 	.word	0x40001000

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5c:	b672      	cpsid	i
}
 8000b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b66:	4802      	ldr	r0, [pc, #8]	; (8000b70 <Error_Handler+0x18>)
 8000b68:	f001 fe1a 	bl	80027a0 <HAL_GPIO_WritePin>
 8000b6c:	e7f8      	b.n	8000b60 <Error_Handler+0x8>
 8000b6e:	bf00      	nop
 8000b70:	40020400 	.word	0x40020400

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a10      	ldr	r2, [pc, #64]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	210f      	movs	r1, #15
 8000bae:	f06f 0001 	mvn.w	r0, #1
 8000bb2:	f001 f879 	bl	8001ca8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800

08000bc4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	; 0x28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a1f      	ldr	r2, [pc, #124]	; (8000c60 <HAL_CAN_MspInit+0x9c>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d137      	bne.n	8000c56 <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000be6:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <HAL_CAN_MspInit+0xa0>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	4a1e      	ldr	r2, [pc, #120]	; (8000c64 <HAL_CAN_MspInit+0xa0>)
 8000bec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <HAL_CAN_MspInit+0xa0>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <HAL_CAN_MspInit+0xa0>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a18      	ldr	r2, [pc, #96]	; (8000c64 <HAL_CAN_MspInit+0xa0>)
 8000c04:	f043 0308 	orr.w	r3, r3, #8
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <HAL_CAN_MspInit+0xa0>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0308 	and.w	r3, r3, #8
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c16:	2303      	movs	r3, #3
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c26:	2309      	movs	r3, #9
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	480d      	ldr	r0, [pc, #52]	; (8000c68 <HAL_CAN_MspInit+0xa4>)
 8000c32:	f001 fc09 	bl	8002448 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2105      	movs	r1, #5
 8000c3a:	2013      	movs	r0, #19
 8000c3c:	f001 f834 	bl	8001ca8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000c40:	2013      	movs	r0, #19
 8000c42:	f001 f84d 	bl	8001ce0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2105      	movs	r1, #5
 8000c4a:	2014      	movs	r0, #20
 8000c4c:	f001 f82c 	bl	8001ca8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000c50:	2014      	movs	r0, #20
 8000c52:	f001 f845 	bl	8001ce0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c56:	bf00      	nop
 8000c58:	3728      	adds	r7, #40	; 0x28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40006400 	.word	0x40006400
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020c00 	.word	0x40020c00

08000c6c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a65      	ldr	r2, [pc, #404]	; (8000e20 <HAL_SD_MspInit+0x1b4>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	f040 80c3 	bne.w	8000e16 <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000c90:	4b64      	ldr	r3, [pc, #400]	; (8000e24 <HAL_SD_MspInit+0x1b8>)
 8000c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c94:	4a63      	ldr	r2, [pc, #396]	; (8000e24 <HAL_SD_MspInit+0x1b8>)
 8000c96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c9a:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9c:	4b61      	ldr	r3, [pc, #388]	; (8000e24 <HAL_SD_MspInit+0x1b8>)
 8000c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca8:	4b5e      	ldr	r3, [pc, #376]	; (8000e24 <HAL_SD_MspInit+0x1b8>)
 8000caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cac:	4a5d      	ldr	r2, [pc, #372]	; (8000e24 <HAL_SD_MspInit+0x1b8>)
 8000cae:	f043 0304 	orr.w	r3, r3, #4
 8000cb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb4:	4b5b      	ldr	r3, [pc, #364]	; (8000e24 <HAL_SD_MspInit+0x1b8>)
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc0:	4b58      	ldr	r3, [pc, #352]	; (8000e24 <HAL_SD_MspInit+0x1b8>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc4:	4a57      	ldr	r2, [pc, #348]	; (8000e24 <HAL_SD_MspInit+0x1b8>)
 8000cc6:	f043 0308 	orr.w	r3, r3, #8
 8000cca:	6313      	str	r3, [r2, #48]	; 0x30
 8000ccc:	4b55      	ldr	r3, [pc, #340]	; (8000e24 <HAL_SD_MspInit+0x1b8>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd0:	f003 0308 	and.w	r3, r3, #8
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000cd8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000cdc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000cea:	230c      	movs	r3, #12
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	484c      	ldr	r0, [pc, #304]	; (8000e28 <HAL_SD_MspInit+0x1bc>)
 8000cf6:	f001 fba7 	bl	8002448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d06:	2303      	movs	r3, #3
 8000d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d0a:	230c      	movs	r3, #12
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	4845      	ldr	r0, [pc, #276]	; (8000e2c <HAL_SD_MspInit+0x1c0>)
 8000d16:	f001 fb97 	bl	8002448 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8000d1a:	4b45      	ldr	r3, [pc, #276]	; (8000e30 <HAL_SD_MspInit+0x1c4>)
 8000d1c:	4a45      	ldr	r2, [pc, #276]	; (8000e34 <HAL_SD_MspInit+0x1c8>)
 8000d1e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8000d20:	4b43      	ldr	r3, [pc, #268]	; (8000e30 <HAL_SD_MspInit+0x1c4>)
 8000d22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d26:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d28:	4b41      	ldr	r3, [pc, #260]	; (8000e30 <HAL_SD_MspInit+0x1c4>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d2e:	4b40      	ldr	r3, [pc, #256]	; (8000e30 <HAL_SD_MspInit+0x1c4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d34:	4b3e      	ldr	r3, [pc, #248]	; (8000e30 <HAL_SD_MspInit+0x1c4>)
 8000d36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d3a:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d3c:	4b3c      	ldr	r3, [pc, #240]	; (8000e30 <HAL_SD_MspInit+0x1c4>)
 8000d3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d42:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d44:	4b3a      	ldr	r3, [pc, #232]	; (8000e30 <HAL_SD_MspInit+0x1c4>)
 8000d46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d4a:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8000d4c:	4b38      	ldr	r3, [pc, #224]	; (8000e30 <HAL_SD_MspInit+0x1c4>)
 8000d4e:	2220      	movs	r2, #32
 8000d50:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d52:	4b37      	ldr	r3, [pc, #220]	; (8000e30 <HAL_SD_MspInit+0x1c4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d58:	4b35      	ldr	r3, [pc, #212]	; (8000e30 <HAL_SD_MspInit+0x1c4>)
 8000d5a:	2204      	movs	r2, #4
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d5e:	4b34      	ldr	r3, [pc, #208]	; (8000e30 <HAL_SD_MspInit+0x1c4>)
 8000d60:	2203      	movs	r2, #3
 8000d62:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000d64:	4b32      	ldr	r3, [pc, #200]	; (8000e30 <HAL_SD_MspInit+0x1c4>)
 8000d66:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000d6a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000d6c:	4b30      	ldr	r3, [pc, #192]	; (8000e30 <HAL_SD_MspInit+0x1c4>)
 8000d6e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d72:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8000d74:	482e      	ldr	r0, [pc, #184]	; (8000e30 <HAL_SD_MspInit+0x1c4>)
 8000d76:	f000 ffc1 	bl	8001cfc <HAL_DMA_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8000d80:	f7ff feea 	bl	8000b58 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a2a      	ldr	r2, [pc, #168]	; (8000e30 <HAL_SD_MspInit+0x1c4>)
 8000d88:	641a      	str	r2, [r3, #64]	; 0x40
 8000d8a:	4a29      	ldr	r2, [pc, #164]	; (8000e30 <HAL_SD_MspInit+0x1c4>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8000d90:	4b29      	ldr	r3, [pc, #164]	; (8000e38 <HAL_SD_MspInit+0x1cc>)
 8000d92:	4a2a      	ldr	r2, [pc, #168]	; (8000e3c <HAL_SD_MspInit+0x1d0>)
 8000d94:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8000d96:	4b28      	ldr	r3, [pc, #160]	; (8000e38 <HAL_SD_MspInit+0x1cc>)
 8000d98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d9c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d9e:	4b26      	ldr	r3, [pc, #152]	; (8000e38 <HAL_SD_MspInit+0x1cc>)
 8000da0:	2240      	movs	r2, #64	; 0x40
 8000da2:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da4:	4b24      	ldr	r3, [pc, #144]	; (8000e38 <HAL_SD_MspInit+0x1cc>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000daa:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <HAL_SD_MspInit+0x1cc>)
 8000dac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000db0:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000db2:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <HAL_SD_MspInit+0x1cc>)
 8000db4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000db8:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000dba:	4b1f      	ldr	r3, [pc, #124]	; (8000e38 <HAL_SD_MspInit+0x1cc>)
 8000dbc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dc0:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <HAL_SD_MspInit+0x1cc>)
 8000dc4:	2220      	movs	r2, #32
 8000dc6:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <HAL_SD_MspInit+0x1cc>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000dce:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <HAL_SD_MspInit+0x1cc>)
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000dd4:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <HAL_SD_MspInit+0x1cc>)
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <HAL_SD_MspInit+0x1cc>)
 8000ddc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000de0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <HAL_SD_MspInit+0x1cc>)
 8000de4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000de8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8000dea:	4813      	ldr	r0, [pc, #76]	; (8000e38 <HAL_SD_MspInit+0x1cc>)
 8000dec:	f000 ff86 	bl	8001cfc <HAL_DMA_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 8000df6:	f7ff feaf 	bl	8000b58 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <HAL_SD_MspInit+0x1cc>)
 8000dfe:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e00:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <HAL_SD_MspInit+0x1cc>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2105      	movs	r1, #5
 8000e0a:	2031      	movs	r0, #49	; 0x31
 8000e0c:	f000 ff4c 	bl	8001ca8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000e10:	2031      	movs	r0, #49	; 0x31
 8000e12:	f000 ff65 	bl	8001ce0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000e16:	bf00      	nop
 8000e18:	3728      	adds	r7, #40	; 0x28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40012c00 	.word	0x40012c00
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020800 	.word	0x40020800
 8000e2c:	40020c00 	.word	0x40020c00
 8000e30:	200000d8 	.word	0x200000d8
 8000e34:	40026458 	.word	0x40026458
 8000e38:	20000138 	.word	0x20000138
 8000e3c:	400264a0 	.word	0x400264a0

08000e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a17      	ldr	r2, [pc, #92]	; (8000ebc <HAL_UART_MspInit+0x7c>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d128      	bne.n	8000eb4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_UART_MspInit+0x80>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	4a16      	ldr	r2, [pc, #88]	; (8000ec0 <HAL_UART_MspInit+0x80>)
 8000e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <HAL_UART_MspInit+0x80>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_UART_MspInit+0x80>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a10      	ldr	r2, [pc, #64]	; (8000ec0 <HAL_UART_MspInit+0x80>)
 8000e80:	f043 0308 	orr.w	r3, r3, #8
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_UART_MspInit+0x80>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0308 	and.w	r3, r3, #8
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ea4:	2307      	movs	r3, #7
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4619      	mov	r1, r3
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <HAL_UART_MspInit+0x84>)
 8000eb0:	f001 faca 	bl	8002448 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eb4:	bf00      	nop
 8000eb6:	3728      	adds	r7, #40	; 0x28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40004800 	.word	0x40004800
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020c00 	.word	0x40020c00

08000ec8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ee8:	d141      	bne.n	8000f6e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	4b23      	ldr	r3, [pc, #140]	; (8000f78 <HAL_PCD_MspInit+0xb0>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a22      	ldr	r2, [pc, #136]	; (8000f78 <HAL_PCD_MspInit+0xb0>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <HAL_PCD_MspInit+0xb0>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f02:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	2303      	movs	r3, #3
 8000f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f14:	230a      	movs	r3, #10
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4817      	ldr	r0, [pc, #92]	; (8000f7c <HAL_PCD_MspInit+0xb4>)
 8000f20:	f001 fa92 	bl	8002448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	4810      	ldr	r0, [pc, #64]	; (8000f7c <HAL_PCD_MspInit+0xb4>)
 8000f3a:	f001 fa85 	bl	8002448 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_PCD_MspInit+0xb0>)
 8000f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f42:	4a0d      	ldr	r2, [pc, #52]	; (8000f78 <HAL_PCD_MspInit+0xb0>)
 8000f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f48:	6353      	str	r3, [r2, #52]	; 0x34
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_PCD_MspInit+0xb0>)
 8000f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_PCD_MspInit+0xb0>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <HAL_PCD_MspInit+0xb0>)
 8000f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f60:	6453      	str	r3, [r2, #68]	; 0x44
 8000f62:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <HAL_PCD_MspInit+0xb0>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f6e:	bf00      	nop
 8000f70:	3728      	adds	r7, #40	; 0x28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020000 	.word	0x40020000

08000f80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08c      	sub	sp, #48	; 0x30
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	2036      	movs	r0, #54	; 0x36
 8000f96:	f000 fe87 	bl	8001ca8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f9a:	2036      	movs	r0, #54	; 0x36
 8000f9c:	f000 fea0 	bl	8001ce0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <HAL_InitTick+0xa0>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	4a1e      	ldr	r2, [pc, #120]	; (8001020 <HAL_InitTick+0xa0>)
 8000fa6:	f043 0310 	orr.w	r3, r3, #16
 8000faa:	6413      	str	r3, [r2, #64]	; 0x40
 8000fac:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <HAL_InitTick+0xa0>)
 8000fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb0:	f003 0310 	and.w	r3, r3, #16
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fb8:	f107 0210 	add.w	r2, r7, #16
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f002 fa28 	bl	8003418 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000fc8:	f002 f9fe 	bl	80033c8 <HAL_RCC_GetPCLK1Freq>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd4:	4a13      	ldr	r2, [pc, #76]	; (8001024 <HAL_InitTick+0xa4>)
 8000fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fda:	0c9b      	lsrs	r3, r3, #18
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <HAL_InitTick+0xa8>)
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <HAL_InitTick+0xac>)
 8000fe4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <HAL_InitTick+0xa8>)
 8000fe8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fec:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000fee:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <HAL_InitTick+0xa8>)
 8000ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <HAL_InitTick+0xa8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <HAL_InitTick+0xa8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001000:	4809      	ldr	r0, [pc, #36]	; (8001028 <HAL_InitTick+0xa8>)
 8001002:	f004 f98a 	bl	800531a <HAL_TIM_Base_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d104      	bne.n	8001016 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800100c:	4806      	ldr	r0, [pc, #24]	; (8001028 <HAL_InitTick+0xa8>)
 800100e:	f004 f9e5 	bl	80053dc <HAL_TIM_Base_Start_IT>
 8001012:	4603      	mov	r3, r0
 8001014:	e000      	b.n	8001018 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	3730      	adds	r7, #48	; 0x30
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40023800 	.word	0x40023800
 8001024:	431bde83 	.word	0x431bde83
 8001028:	20004f7c 	.word	0x20004f7c
 800102c:	40001000 	.word	0x40001000

08001030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001034:	e7fe      	b.n	8001034 <NMI_Handler+0x4>

08001036 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103a:	e7fe      	b.n	800103a <HardFault_Handler+0x4>

0800103c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <MemManage_Handler+0x4>

08001042 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001046:	e7fe      	b.n	8001046 <BusFault_Handler+0x4>

08001048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800104c:	e7fe      	b.n	800104c <UsageFault_Handler+0x4>

0800104e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <CAN1_TX_IRQHandler+0x10>)
 8001062:	f000 fb3a 	bl	80016da <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000002c 	.word	0x2000002c

08001070 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <CAN1_RX0_IRQHandler+0x10>)
 8001076:	f000 fb30 	bl	80016da <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000002c 	.word	0x2000002c

08001084 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <SDMMC1_IRQHandler+0x10>)
 800108a:	f003 f89d 	bl	80041c8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000054 	.word	0x20000054

08001098 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <TIM6_DAC_IRQHandler+0x10>)
 800109e:	f004 fa15 	bl	80054cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20004f7c 	.word	0x20004f7c

080010ac <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <DMA2_Stream3_IRQHandler+0x10>)
 80010b2:	f000 ff53 	bl	8001f5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200000d8 	.word	0x200000d8

080010c0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <DMA2_Stream6_IRQHandler+0x10>)
 80010c6:	f000 ff49 	bl	8001f5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000138 	.word	0x20000138

080010d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <SystemInit+0x20>)
 80010da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010de:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <SystemInit+0x20>)
 80010e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001130 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010fc:	480d      	ldr	r0, [pc, #52]	; (8001134 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010fe:	490e      	ldr	r1, [pc, #56]	; (8001138 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001100:	4a0e      	ldr	r2, [pc, #56]	; (800113c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001104:	e002      	b.n	800110c <LoopCopyDataInit>

08001106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110a:	3304      	adds	r3, #4

0800110c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800110c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001110:	d3f9      	bcc.n	8001106 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001112:	4a0b      	ldr	r2, [pc, #44]	; (8001140 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001114:	4c0b      	ldr	r4, [pc, #44]	; (8001144 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001118:	e001      	b.n	800111e <LoopFillZerobss>

0800111a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800111c:	3204      	adds	r2, #4

0800111e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001120:	d3fb      	bcc.n	800111a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001122:	f7ff ffd7 	bl	80010d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001126:	f009 fcd1 	bl	800aacc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800112a:	f7ff fa05 	bl	8000538 <main>
  bx  lr    
 800112e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001130:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001138:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800113c:	0800ac08 	.word	0x0800ac08
  ldr r2, =_sbss
 8001140:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001144:	20005478 	.word	0x20005478

08001148 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001148:	e7fe      	b.n	8001148 <ADC_IRQHandler>

0800114a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800114e:	2003      	movs	r0, #3
 8001150:	f000 fd9f 	bl	8001c92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001154:	2000      	movs	r0, #0
 8001156:	f7ff ff13 	bl	8000f80 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800115a:	f7ff fd0b 	bl	8000b74 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	bd80      	pop	{r7, pc}

08001164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_IncTick+0x20>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_IncTick+0x24>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4413      	add	r3, r2
 8001174:	4a04      	ldr	r2, [pc, #16]	; (8001188 <HAL_IncTick+0x24>)
 8001176:	6013      	str	r3, [r2, #0]
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000008 	.word	0x20000008
 8001188:	20004fc8 	.word	0x20004fc8

0800118c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return uwTick;
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <HAL_GetTick+0x14>)
 8001192:	681b      	ldr	r3, [r3, #0]
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20004fc8 	.word	0x20004fc8

080011a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ac:	f7ff ffee 	bl	800118c <HAL_GetTick>
 80011b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011bc:	d005      	beq.n	80011ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_Delay+0x44>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ca:	bf00      	nop
 80011cc:	f7ff ffde 	bl	800118c <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d8f7      	bhi.n	80011cc <HAL_Delay+0x28>
  {
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000008 	.word	0x20000008

080011ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e0ed      	b.n	80013da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d102      	bne.n	8001210 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff fcda 	bl	8000bc4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 0202 	bic.w	r2, r2, #2
 800121e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001220:	f7ff ffb4 	bl	800118c <HAL_GetTick>
 8001224:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001226:	e012      	b.n	800124e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001228:	f7ff ffb0 	bl	800118c <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b0a      	cmp	r3, #10
 8001234:	d90b      	bls.n	800124e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2205      	movs	r2, #5
 8001246:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e0c5      	b.n	80013da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1e5      	bne.n	8001228 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f042 0201 	orr.w	r2, r2, #1
 800126a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800126c:	f7ff ff8e 	bl	800118c <HAL_GetTick>
 8001270:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001272:	e012      	b.n	800129a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001274:	f7ff ff8a 	bl	800118c <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b0a      	cmp	r3, #10
 8001280:	d90b      	bls.n	800129a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001286:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2205      	movs	r2, #5
 8001292:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e09f      	b.n	80013da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0e5      	beq.n	8001274 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	7e1b      	ldrb	r3, [r3, #24]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d108      	bne.n	80012c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	e007      	b.n	80012d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7e5b      	ldrb	r3, [r3, #25]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d108      	bne.n	80012ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	e007      	b.n	80012fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	7e9b      	ldrb	r3, [r3, #26]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d108      	bne.n	8001316 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f042 0220 	orr.w	r2, r2, #32
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	e007      	b.n	8001326 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 0220 	bic.w	r2, r2, #32
 8001324:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	7edb      	ldrb	r3, [r3, #27]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d108      	bne.n	8001340 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f022 0210 	bic.w	r2, r2, #16
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	e007      	b.n	8001350 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f042 0210 	orr.w	r2, r2, #16
 800134e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	7f1b      	ldrb	r3, [r3, #28]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d108      	bne.n	800136a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f042 0208 	orr.w	r2, r2, #8
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	e007      	b.n	800137a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 0208 	bic.w	r2, r2, #8
 8001378:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	7f5b      	ldrb	r3, [r3, #29]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d108      	bne.n	8001394 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f042 0204 	orr.w	r2, r2, #4
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	e007      	b.n	80013a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0204 	bic.w	r2, r2, #4
 80013a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	431a      	orrs	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	431a      	orrs	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	695b      	ldr	r3, [r3, #20]
 80013b8:	ea42 0103 	orr.w	r1, r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	1e5a      	subs	r2, r3, #1
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	430a      	orrs	r2, r1
 80013c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b084      	sub	sp, #16
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d12e      	bne.n	8001454 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2202      	movs	r2, #2
 80013fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 0201 	bic.w	r2, r2, #1
 800140c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800140e:	f7ff febd 	bl	800118c <HAL_GetTick>
 8001412:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001414:	e012      	b.n	800143c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001416:	f7ff feb9 	bl	800118c <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b0a      	cmp	r3, #10
 8001422:	d90b      	bls.n	800143c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001428:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2205      	movs	r2, #5
 8001434:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e012      	b.n	8001462 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1e5      	bne.n	8001416 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	e006      	b.n	8001462 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001458:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
  }
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800146a:	b480      	push	{r7}
 800146c:	b087      	sub	sp, #28
 800146e:	af00      	add	r7, sp, #0
 8001470:	60f8      	str	r0, [r7, #12]
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
 8001476:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800147e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001480:	7dfb      	ldrb	r3, [r7, #23]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d003      	beq.n	800148e <HAL_CAN_GetRxMessage+0x24>
 8001486:	7dfb      	ldrb	r3, [r7, #23]
 8001488:	2b02      	cmp	r3, #2
 800148a:	f040 80f3 	bne.w	8001674 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d10e      	bne.n	80014b2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d116      	bne.n	80014d0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e0e7      	b.n	8001682 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	f003 0303 	and.w	r3, r3, #3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d107      	bne.n	80014d0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e0d8      	b.n	8001682 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	331b      	adds	r3, #27
 80014d8:	011b      	lsls	r3, r3, #4
 80014da:	4413      	add	r3, r2
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0204 	and.w	r2, r3, #4
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10c      	bne.n	8001508 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	331b      	adds	r3, #27
 80014f6:	011b      	lsls	r3, r3, #4
 80014f8:	4413      	add	r3, r2
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	0d5b      	lsrs	r3, r3, #21
 80014fe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	e00b      	b.n	8001520 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	331b      	adds	r3, #27
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	4413      	add	r3, r2
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	08db      	lsrs	r3, r3, #3
 8001518:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	331b      	adds	r3, #27
 8001528:	011b      	lsls	r3, r3, #4
 800152a:	4413      	add	r3, r2
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0202 	and.w	r2, r3, #2
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	331b      	adds	r3, #27
 800153e:	011b      	lsls	r3, r3, #4
 8001540:	4413      	add	r3, r2
 8001542:	3304      	adds	r3, #4
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 020f 	and.w	r2, r3, #15
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	331b      	adds	r3, #27
 8001556:	011b      	lsls	r3, r3, #4
 8001558:	4413      	add	r3, r2
 800155a:	3304      	adds	r3, #4
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	0a1b      	lsrs	r3, r3, #8
 8001560:	b2da      	uxtb	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	331b      	adds	r3, #27
 800156e:	011b      	lsls	r3, r3, #4
 8001570:	4413      	add	r3, r2
 8001572:	3304      	adds	r3, #4
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	0c1b      	lsrs	r3, r3, #16
 8001578:	b29a      	uxth	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	4413      	add	r3, r2
 8001588:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	011b      	lsls	r3, r3, #4
 800159c:	4413      	add	r3, r2
 800159e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	0a1a      	lsrs	r2, r3, #8
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	3301      	adds	r3, #1
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	011b      	lsls	r3, r3, #4
 80015b6:	4413      	add	r3, r2
 80015b8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	0c1a      	lsrs	r2, r3, #16
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	3302      	adds	r3, #2
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	011b      	lsls	r3, r3, #4
 80015d0:	4413      	add	r3, r2
 80015d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	0e1a      	lsrs	r2, r3, #24
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	3303      	adds	r3, #3
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	011b      	lsls	r3, r3, #4
 80015ea:	4413      	add	r3, r2
 80015ec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	3304      	adds	r3, #4
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	4413      	add	r3, r2
 8001604:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	0a1a      	lsrs	r2, r3, #8
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	3305      	adds	r3, #5
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	4413      	add	r3, r2
 800161e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	0c1a      	lsrs	r2, r3, #16
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	3306      	adds	r3, #6
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	011b      	lsls	r3, r3, #4
 8001636:	4413      	add	r3, r2
 8001638:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	0e1a      	lsrs	r2, r3, #24
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	3307      	adds	r3, #7
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d108      	bne.n	8001660 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68da      	ldr	r2, [r3, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f042 0220 	orr.w	r2, r2, #32
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	e007      	b.n	8001670 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	691a      	ldr	r2, [r3, #16]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f042 0220 	orr.w	r2, r2, #32
 800166e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	e006      	b.n	8001682 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
  }
}
 8001682:	4618      	mov	r0, r3
 8001684:	371c      	adds	r7, #28
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800168e:	b480      	push	{r7}
 8001690:	b085      	sub	sp, #20
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800169e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d002      	beq.n	80016ac <HAL_CAN_ActivateNotification+0x1e>
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d109      	bne.n	80016c0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6959      	ldr	r1, [r3, #20]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80016bc:	2300      	movs	r3, #0
 80016be:	e006      	b.n	80016ce <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
  }
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b08a      	sub	sp, #40	; 0x28
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001716:	6a3b      	ldr	r3, [r7, #32]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d07c      	beq.n	800181a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b00      	cmp	r3, #0
 8001728:	d023      	beq.n	8001772 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2201      	movs	r2, #1
 8001730:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 f983 	bl	8001a48 <HAL_CAN_TxMailbox0CompleteCallback>
 8001742:	e016      	b.n	8001772 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	2b00      	cmp	r3, #0
 800174c:	d004      	beq.n	8001758 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
 8001756:	e00c      	b.n	8001772 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d004      	beq.n	800176c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
 800176a:	e002      	b.n	8001772 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 f989 	bl	8001a84 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001778:	2b00      	cmp	r3, #0
 800177a:	d024      	beq.n	80017c6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001784:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 f963 	bl	8001a5c <HAL_CAN_TxMailbox1CompleteCallback>
 8001796:	e016      	b.n	80017c6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d004      	beq.n	80017ac <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
 80017aa:	e00c      	b.n	80017c6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d004      	beq.n	80017c0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
 80017be:	e002      	b.n	80017c6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 f969 	bl	8001a98 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d024      	beq.n	800181a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 f943 	bl	8001a70 <HAL_CAN_TxMailbox2CompleteCallback>
 80017ea:	e016      	b.n	800181a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d004      	beq.n	8001800 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
 80017fe:	e00c      	b.n	800181a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d004      	beq.n	8001814 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
 8001812:	e002      	b.n	800181a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 f949 	bl	8001aac <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800181a:	6a3b      	ldr	r3, [r7, #32]
 800181c:	f003 0308 	and.w	r3, r3, #8
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00c      	beq.n	800183e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	f003 0310 	and.w	r3, r3, #16
 800182a:	2b00      	cmp	r3, #0
 800182c:	d007      	beq.n	800183e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001834:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2210      	movs	r2, #16
 800183c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800183e:	6a3b      	ldr	r3, [r7, #32]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00b      	beq.n	8001860 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d006      	beq.n	8001860 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2208      	movs	r2, #8
 8001858:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f930 	bl	8001ac0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001860:	6a3b      	ldr	r3, [r7, #32]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d009      	beq.n	800187e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	2b00      	cmp	r3, #0
 8001876:	d002      	beq.n	800187e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff f925 	bl	8000ac8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001884:	2b00      	cmp	r3, #0
 8001886:	d00c      	beq.n	80018a2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	f003 0310 	and.w	r3, r3, #16
 800188e:	2b00      	cmp	r3, #0
 8001890:	d007      	beq.n	80018a2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001898:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2210      	movs	r2, #16
 80018a0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80018a2:	6a3b      	ldr	r3, [r7, #32]
 80018a4:	f003 0320 	and.w	r3, r3, #32
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00b      	beq.n	80018c4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d006      	beq.n	80018c4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2208      	movs	r2, #8
 80018bc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 f912 	bl	8001ae8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	f003 0310 	and.w	r3, r3, #16
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d009      	beq.n	80018e2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d002      	beq.n	80018e2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 f8f9 	bl	8001ad4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d00b      	beq.n	8001904 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f003 0310 	and.w	r3, r3, #16
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d006      	beq.n	8001904 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2210      	movs	r2, #16
 80018fc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f8fc 	bl	8001afc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001904:	6a3b      	ldr	r3, [r7, #32]
 8001906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00b      	beq.n	8001926 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	2b00      	cmp	r3, #0
 8001916:	d006      	beq.n	8001926 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2208      	movs	r2, #8
 800191e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 f8f5 	bl	8001b10 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001926:	6a3b      	ldr	r3, [r7, #32]
 8001928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d07b      	beq.n	8001a28 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f003 0304 	and.w	r3, r3, #4
 8001936:	2b00      	cmp	r3, #0
 8001938:	d072      	beq.n	8001a20 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800193a:	6a3b      	ldr	r3, [r7, #32]
 800193c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001940:	2b00      	cmp	r3, #0
 8001942:	d008      	beq.n	8001956 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001956:	6a3b      	ldr	r3, [r7, #32]
 8001958:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800195c:	2b00      	cmp	r3, #0
 800195e:	d008      	beq.n	8001972 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	f043 0302 	orr.w	r3, r3, #2
 8001970:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001978:	2b00      	cmp	r3, #0
 800197a:	d008      	beq.n	800198e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	f043 0304 	orr.w	r3, r3, #4
 800198c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001994:	2b00      	cmp	r3, #0
 8001996:	d043      	beq.n	8001a20 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d03e      	beq.n	8001a20 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019a8:	2b60      	cmp	r3, #96	; 0x60
 80019aa:	d02b      	beq.n	8001a04 <HAL_CAN_IRQHandler+0x32a>
 80019ac:	2b60      	cmp	r3, #96	; 0x60
 80019ae:	d82e      	bhi.n	8001a0e <HAL_CAN_IRQHandler+0x334>
 80019b0:	2b50      	cmp	r3, #80	; 0x50
 80019b2:	d022      	beq.n	80019fa <HAL_CAN_IRQHandler+0x320>
 80019b4:	2b50      	cmp	r3, #80	; 0x50
 80019b6:	d82a      	bhi.n	8001a0e <HAL_CAN_IRQHandler+0x334>
 80019b8:	2b40      	cmp	r3, #64	; 0x40
 80019ba:	d019      	beq.n	80019f0 <HAL_CAN_IRQHandler+0x316>
 80019bc:	2b40      	cmp	r3, #64	; 0x40
 80019be:	d826      	bhi.n	8001a0e <HAL_CAN_IRQHandler+0x334>
 80019c0:	2b30      	cmp	r3, #48	; 0x30
 80019c2:	d010      	beq.n	80019e6 <HAL_CAN_IRQHandler+0x30c>
 80019c4:	2b30      	cmp	r3, #48	; 0x30
 80019c6:	d822      	bhi.n	8001a0e <HAL_CAN_IRQHandler+0x334>
 80019c8:	2b10      	cmp	r3, #16
 80019ca:	d002      	beq.n	80019d2 <HAL_CAN_IRQHandler+0x2f8>
 80019cc:	2b20      	cmp	r3, #32
 80019ce:	d005      	beq.n	80019dc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80019d0:	e01d      	b.n	8001a0e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	f043 0308 	orr.w	r3, r3, #8
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019da:	e019      	b.n	8001a10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	f043 0310 	orr.w	r3, r3, #16
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019e4:	e014      	b.n	8001a10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	f043 0320 	orr.w	r3, r3, #32
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019ee:	e00f      	b.n	8001a10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019f8:	e00a      	b.n	8001a10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a02:	e005      	b.n	8001a10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a0c:	e000      	b.n	8001a10 <HAL_CAN_IRQHandler+0x336>
            break;
 8001a0e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	699a      	ldr	r2, [r3, #24]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a1e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2204      	movs	r2, #4
 8001a26:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d008      	beq.n	8001a40 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 f872 	bl	8001b24 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001a40:	bf00      	nop
 8001a42:	3728      	adds	r7, #40	; 0x28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <__NVIC_SetPriorityGrouping+0x40>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b54:	4013      	ands	r3, r2
 8001b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <__NVIC_SetPriorityGrouping+0x44>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b66:	4a04      	ldr	r2, [pc, #16]	; (8001b78 <__NVIC_SetPriorityGrouping+0x40>)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	60d3      	str	r3, [r2, #12]
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00
 8001b7c:	05fa0000 	.word	0x05fa0000

08001b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <__NVIC_GetPriorityGrouping+0x18>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	0a1b      	lsrs	r3, r3, #8
 8001b8a:	f003 0307 	and.w	r3, r3, #7
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	db0b      	blt.n	8001bc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	f003 021f 	and.w	r2, r3, #31
 8001bb4:	4907      	ldr	r1, [pc, #28]	; (8001bd4 <__NVIC_EnableIRQ+0x38>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	095b      	lsrs	r3, r3, #5
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000e100 	.word	0xe000e100

08001bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	6039      	str	r1, [r7, #0]
 8001be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	db0a      	blt.n	8001c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	490c      	ldr	r1, [pc, #48]	; (8001c24 <__NVIC_SetPriority+0x4c>)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	0112      	lsls	r2, r2, #4
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c00:	e00a      	b.n	8001c18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	4908      	ldr	r1, [pc, #32]	; (8001c28 <__NVIC_SetPriority+0x50>)
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	3b04      	subs	r3, #4
 8001c10:	0112      	lsls	r2, r2, #4
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	440b      	add	r3, r1
 8001c16:	761a      	strb	r2, [r3, #24]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000e100 	.word	0xe000e100
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b089      	sub	sp, #36	; 0x24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f1c3 0307 	rsb	r3, r3, #7
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	bf28      	it	cs
 8001c4a:	2304      	movcs	r3, #4
 8001c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3304      	adds	r3, #4
 8001c52:	2b06      	cmp	r3, #6
 8001c54:	d902      	bls.n	8001c5c <NVIC_EncodePriority+0x30>
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3b03      	subs	r3, #3
 8001c5a:	e000      	b.n	8001c5e <NVIC_EncodePriority+0x32>
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c60:	f04f 32ff 	mov.w	r2, #4294967295
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	401a      	ands	r2, r3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c74:	f04f 31ff 	mov.w	r1, #4294967295
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7e:	43d9      	mvns	r1, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c84:	4313      	orrs	r3, r2
         );
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3724      	adds	r7, #36	; 0x24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ff4c 	bl	8001b38 <__NVIC_SetPriorityGrouping>
}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
 8001cb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cba:	f7ff ff61 	bl	8001b80 <__NVIC_GetPriorityGrouping>
 8001cbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	68b9      	ldr	r1, [r7, #8]
 8001cc4:	6978      	ldr	r0, [r7, #20]
 8001cc6:	f7ff ffb1 	bl	8001c2c <NVIC_EncodePriority>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff ff80 	bl	8001bd8 <__NVIC_SetPriority>
}
 8001cd8:	bf00      	nop
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff ff54 	bl	8001b9c <__NVIC_EnableIRQ>
}
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d08:	f7ff fa40 	bl	800118c <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e099      	b.n	8001e4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2202      	movs	r2, #2
 8001d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 0201 	bic.w	r2, r2, #1
 8001d36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d38:	e00f      	b.n	8001d5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d3a:	f7ff fa27 	bl	800118c <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b05      	cmp	r3, #5
 8001d46:	d908      	bls.n	8001d5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2203      	movs	r2, #3
 8001d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e078      	b.n	8001e4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1e8      	bne.n	8001d3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	4b38      	ldr	r3, [pc, #224]	; (8001e54 <HAL_DMA_Init+0x158>)
 8001d74:	4013      	ands	r3, r2
 8001d76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d107      	bne.n	8001dc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f023 0307 	bic.w	r3, r3, #7
 8001dda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d117      	bne.n	8001e1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00e      	beq.n	8001e1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 faa5 	bl	8002350 <DMA_CheckFifoParam>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d008      	beq.n	8001e1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2240      	movs	r2, #64	; 0x40
 8001e10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e016      	b.n	8001e4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 fa5c 	bl	80022e4 <DMA_CalcBaseAndBitshift>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e34:	223f      	movs	r2, #63	; 0x3f
 8001e36:	409a      	lsls	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	e010803f 	.word	0xe010803f

08001e58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
 8001e64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e66:	2300      	movs	r3, #0
 8001e68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d101      	bne.n	8001e7e <HAL_DMA_Start_IT+0x26>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e048      	b.n	8001f10 <HAL_DMA_Start_IT+0xb8>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d137      	bne.n	8001f02 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2202      	movs	r2, #2
 8001e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 f9ee 	bl	8002288 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb0:	223f      	movs	r2, #63	; 0x3f
 8001eb2:	409a      	lsls	r2, r3
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0216 	orr.w	r2, r2, #22
 8001ec6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	695a      	ldr	r2, [r3, #20]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ed6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d007      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0208 	orr.w	r2, r2, #8
 8001eee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	e005      	b.n	8001f0e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d004      	beq.n	8001f36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2280      	movs	r2, #128	; 0x80
 8001f30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e00c      	b.n	8001f50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2205      	movs	r2, #5
 8001f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0201 	bic.w	r2, r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001f68:	4b92      	ldr	r3, [pc, #584]	; (80021b4 <HAL_DMA_IRQHandler+0x258>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a92      	ldr	r2, [pc, #584]	; (80021b8 <HAL_DMA_IRQHandler+0x25c>)
 8001f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f72:	0a9b      	lsrs	r3, r3, #10
 8001f74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f86:	2208      	movs	r2, #8
 8001f88:	409a      	lsls	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d01a      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d013      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0204 	bic.w	r2, r2, #4
 8001fae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb4:	2208      	movs	r2, #8
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc0:	f043 0201 	orr.w	r2, r3, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fcc:	2201      	movs	r2, #1
 8001fce:	409a      	lsls	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d012      	beq.n	8001ffe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00b      	beq.n	8001ffe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fea:	2201      	movs	r2, #1
 8001fec:	409a      	lsls	r2, r3
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff6:	f043 0202 	orr.w	r2, r3, #2
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002002:	2204      	movs	r2, #4
 8002004:	409a      	lsls	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4013      	ands	r3, r2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d012      	beq.n	8002034 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00b      	beq.n	8002034 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002020:	2204      	movs	r2, #4
 8002022:	409a      	lsls	r2, r3
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202c:	f043 0204 	orr.w	r2, r3, #4
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002038:	2210      	movs	r2, #16
 800203a:	409a      	lsls	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4013      	ands	r3, r2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d043      	beq.n	80020cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d03c      	beq.n	80020cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002056:	2210      	movs	r2, #16
 8002058:	409a      	lsls	r2, r3
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d018      	beq.n	800209e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d108      	bne.n	800208c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	2b00      	cmp	r3, #0
 8002080:	d024      	beq.n	80020cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	4798      	blx	r3
 800208a:	e01f      	b.n	80020cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002090:	2b00      	cmp	r3, #0
 8002092:	d01b      	beq.n	80020cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	4798      	blx	r3
 800209c:	e016      	b.n	80020cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d107      	bne.n	80020bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0208 	bic.w	r2, r2, #8
 80020ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d0:	2220      	movs	r2, #32
 80020d2:	409a      	lsls	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 808e 	beq.w	80021fa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0310 	and.w	r3, r3, #16
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 8086 	beq.w	80021fa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f2:	2220      	movs	r2, #32
 80020f4:	409a      	lsls	r2, r3
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b05      	cmp	r3, #5
 8002104:	d136      	bne.n	8002174 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0216 	bic.w	r2, r2, #22
 8002114:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	695a      	ldr	r2, [r3, #20]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002124:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	2b00      	cmp	r3, #0
 800212c:	d103      	bne.n	8002136 <HAL_DMA_IRQHandler+0x1da>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002132:	2b00      	cmp	r3, #0
 8002134:	d007      	beq.n	8002146 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0208 	bic.w	r2, r2, #8
 8002144:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214a:	223f      	movs	r2, #63	; 0x3f
 800214c:	409a      	lsls	r2, r3
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002166:	2b00      	cmp	r3, #0
 8002168:	d07d      	beq.n	8002266 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	4798      	blx	r3
        }
        return;
 8002172:	e078      	b.n	8002266 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d01c      	beq.n	80021bc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d108      	bne.n	80021a2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002194:	2b00      	cmp	r3, #0
 8002196:	d030      	beq.n	80021fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	4798      	blx	r3
 80021a0:	e02b      	b.n	80021fa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d027      	beq.n	80021fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	4798      	blx	r3
 80021b2:	e022      	b.n	80021fa <HAL_DMA_IRQHandler+0x29e>
 80021b4:	20000000 	.word	0x20000000
 80021b8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10f      	bne.n	80021ea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0210 	bic.w	r2, r2, #16
 80021d8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d032      	beq.n	8002268 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d022      	beq.n	8002254 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2205      	movs	r2, #5
 8002212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0201 	bic.w	r2, r2, #1
 8002224:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	3301      	adds	r3, #1
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	429a      	cmp	r2, r3
 8002230:	d307      	bcc.n	8002242 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1f2      	bne.n	8002226 <HAL_DMA_IRQHandler+0x2ca>
 8002240:	e000      	b.n	8002244 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002242:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	4798      	blx	r3
 8002264:	e000      	b.n	8002268 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002266:	bf00      	nop
    }
  }
}
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop

08002270 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800227c:	4618      	mov	r0, r3
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b40      	cmp	r3, #64	; 0x40
 80022b4:	d108      	bne.n	80022c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022c6:	e007      	b.n	80022d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	60da      	str	r2, [r3, #12]
}
 80022d8:	bf00      	nop
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	3b10      	subs	r3, #16
 80022f4:	4a13      	ldr	r2, [pc, #76]	; (8002344 <DMA_CalcBaseAndBitshift+0x60>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	091b      	lsrs	r3, r3, #4
 80022fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022fe:	4a12      	ldr	r2, [pc, #72]	; (8002348 <DMA_CalcBaseAndBitshift+0x64>)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4413      	add	r3, r2
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b03      	cmp	r3, #3
 8002310:	d908      	bls.n	8002324 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <DMA_CalcBaseAndBitshift+0x68>)
 800231a:	4013      	ands	r3, r2
 800231c:	1d1a      	adds	r2, r3, #4
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	659a      	str	r2, [r3, #88]	; 0x58
 8002322:	e006      	b.n	8002332 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	4b08      	ldr	r3, [pc, #32]	; (800234c <DMA_CalcBaseAndBitshift+0x68>)
 800232c:	4013      	ands	r3, r2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002336:	4618      	mov	r0, r3
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	aaaaaaab 	.word	0xaaaaaaab
 8002348:	0800abdc 	.word	0x0800abdc
 800234c:	fffffc00 	.word	0xfffffc00

08002350 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002360:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d11f      	bne.n	80023aa <DMA_CheckFifoParam+0x5a>
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b03      	cmp	r3, #3
 800236e:	d856      	bhi.n	800241e <DMA_CheckFifoParam+0xce>
 8002370:	a201      	add	r2, pc, #4	; (adr r2, 8002378 <DMA_CheckFifoParam+0x28>)
 8002372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002376:	bf00      	nop
 8002378:	08002389 	.word	0x08002389
 800237c:	0800239b 	.word	0x0800239b
 8002380:	08002389 	.word	0x08002389
 8002384:	0800241f 	.word	0x0800241f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d046      	beq.n	8002422 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002398:	e043      	b.n	8002422 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023a2:	d140      	bne.n	8002426 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023a8:	e03d      	b.n	8002426 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023b2:	d121      	bne.n	80023f8 <DMA_CheckFifoParam+0xa8>
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d837      	bhi.n	800242a <DMA_CheckFifoParam+0xda>
 80023ba:	a201      	add	r2, pc, #4	; (adr r2, 80023c0 <DMA_CheckFifoParam+0x70>)
 80023bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c0:	080023d1 	.word	0x080023d1
 80023c4:	080023d7 	.word	0x080023d7
 80023c8:	080023d1 	.word	0x080023d1
 80023cc:	080023e9 	.word	0x080023e9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	73fb      	strb	r3, [r7, #15]
      break;
 80023d4:	e030      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d025      	beq.n	800242e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e6:	e022      	b.n	800242e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023f0:	d11f      	bne.n	8002432 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023f6:	e01c      	b.n	8002432 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d903      	bls.n	8002406 <DMA_CheckFifoParam+0xb6>
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2b03      	cmp	r3, #3
 8002402:	d003      	beq.n	800240c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002404:	e018      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	73fb      	strb	r3, [r7, #15]
      break;
 800240a:	e015      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00e      	beq.n	8002436 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	73fb      	strb	r3, [r7, #15]
      break;
 800241c:	e00b      	b.n	8002436 <DMA_CheckFifoParam+0xe6>
      break;
 800241e:	bf00      	nop
 8002420:	e00a      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 8002422:	bf00      	nop
 8002424:	e008      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 8002426:	bf00      	nop
 8002428:	e006      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 800242a:	bf00      	nop
 800242c:	e004      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 800242e:	bf00      	nop
 8002430:	e002      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;   
 8002432:	bf00      	nop
 8002434:	e000      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 8002436:	bf00      	nop
    }
  } 
  
  return status; 
 8002438:	7bfb      	ldrb	r3, [r7, #15]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop

08002448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002448:	b480      	push	{r7}
 800244a:	b089      	sub	sp, #36	; 0x24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800245e:	2300      	movs	r3, #0
 8002460:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	e175      	b.n	8002754 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002468:	2201      	movs	r2, #1
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	429a      	cmp	r2, r3
 8002482:	f040 8164 	bne.w	800274e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d00b      	beq.n	80024a6 <HAL_GPIO_Init+0x5e>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d007      	beq.n	80024a6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800249a:	2b11      	cmp	r3, #17
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b12      	cmp	r3, #18
 80024a4:	d130      	bne.n	8002508 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	2203      	movs	r2, #3
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024dc:	2201      	movs	r2, #1
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 0201 	and.w	r2, r3, #1
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d003      	beq.n	8002548 <HAL_GPIO_Init+0x100>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b12      	cmp	r3, #18
 8002546:	d123      	bne.n	8002590 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	08da      	lsrs	r2, r3, #3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3208      	adds	r2, #8
 8002550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	220f      	movs	r2, #15
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	08da      	lsrs	r2, r3, #3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3208      	adds	r2, #8
 800258a:	69b9      	ldr	r1, [r7, #24]
 800258c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	2203      	movs	r2, #3
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 0203 	and.w	r2, r3, #3
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80be 	beq.w	800274e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d2:	4b66      	ldr	r3, [pc, #408]	; (800276c <HAL_GPIO_Init+0x324>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	4a65      	ldr	r2, [pc, #404]	; (800276c <HAL_GPIO_Init+0x324>)
 80025d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025dc:	6453      	str	r3, [r2, #68]	; 0x44
 80025de:	4b63      	ldr	r3, [pc, #396]	; (800276c <HAL_GPIO_Init+0x324>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80025ea:	4a61      	ldr	r2, [pc, #388]	; (8002770 <HAL_GPIO_Init+0x328>)
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	089b      	lsrs	r3, r3, #2
 80025f0:	3302      	adds	r3, #2
 80025f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	220f      	movs	r2, #15
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a58      	ldr	r2, [pc, #352]	; (8002774 <HAL_GPIO_Init+0x32c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d037      	beq.n	8002686 <HAL_GPIO_Init+0x23e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a57      	ldr	r2, [pc, #348]	; (8002778 <HAL_GPIO_Init+0x330>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d031      	beq.n	8002682 <HAL_GPIO_Init+0x23a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a56      	ldr	r2, [pc, #344]	; (800277c <HAL_GPIO_Init+0x334>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d02b      	beq.n	800267e <HAL_GPIO_Init+0x236>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a55      	ldr	r2, [pc, #340]	; (8002780 <HAL_GPIO_Init+0x338>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d025      	beq.n	800267a <HAL_GPIO_Init+0x232>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a54      	ldr	r2, [pc, #336]	; (8002784 <HAL_GPIO_Init+0x33c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d01f      	beq.n	8002676 <HAL_GPIO_Init+0x22e>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a53      	ldr	r2, [pc, #332]	; (8002788 <HAL_GPIO_Init+0x340>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d019      	beq.n	8002672 <HAL_GPIO_Init+0x22a>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a52      	ldr	r2, [pc, #328]	; (800278c <HAL_GPIO_Init+0x344>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d013      	beq.n	800266e <HAL_GPIO_Init+0x226>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a51      	ldr	r2, [pc, #324]	; (8002790 <HAL_GPIO_Init+0x348>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d00d      	beq.n	800266a <HAL_GPIO_Init+0x222>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a50      	ldr	r2, [pc, #320]	; (8002794 <HAL_GPIO_Init+0x34c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d007      	beq.n	8002666 <HAL_GPIO_Init+0x21e>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a4f      	ldr	r2, [pc, #316]	; (8002798 <HAL_GPIO_Init+0x350>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d101      	bne.n	8002662 <HAL_GPIO_Init+0x21a>
 800265e:	2309      	movs	r3, #9
 8002660:	e012      	b.n	8002688 <HAL_GPIO_Init+0x240>
 8002662:	230a      	movs	r3, #10
 8002664:	e010      	b.n	8002688 <HAL_GPIO_Init+0x240>
 8002666:	2308      	movs	r3, #8
 8002668:	e00e      	b.n	8002688 <HAL_GPIO_Init+0x240>
 800266a:	2307      	movs	r3, #7
 800266c:	e00c      	b.n	8002688 <HAL_GPIO_Init+0x240>
 800266e:	2306      	movs	r3, #6
 8002670:	e00a      	b.n	8002688 <HAL_GPIO_Init+0x240>
 8002672:	2305      	movs	r3, #5
 8002674:	e008      	b.n	8002688 <HAL_GPIO_Init+0x240>
 8002676:	2304      	movs	r3, #4
 8002678:	e006      	b.n	8002688 <HAL_GPIO_Init+0x240>
 800267a:	2303      	movs	r3, #3
 800267c:	e004      	b.n	8002688 <HAL_GPIO_Init+0x240>
 800267e:	2302      	movs	r3, #2
 8002680:	e002      	b.n	8002688 <HAL_GPIO_Init+0x240>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <HAL_GPIO_Init+0x240>
 8002686:	2300      	movs	r3, #0
 8002688:	69fa      	ldr	r2, [r7, #28]
 800268a:	f002 0203 	and.w	r2, r2, #3
 800268e:	0092      	lsls	r2, r2, #2
 8002690:	4093      	lsls	r3, r2
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002698:	4935      	ldr	r1, [pc, #212]	; (8002770 <HAL_GPIO_Init+0x328>)
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	089b      	lsrs	r3, r3, #2
 800269e:	3302      	adds	r3, #2
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026a6:	4b3d      	ldr	r3, [pc, #244]	; (800279c <HAL_GPIO_Init+0x354>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026ca:	4a34      	ldr	r2, [pc, #208]	; (800279c <HAL_GPIO_Init+0x354>)
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026d0:	4b32      	ldr	r3, [pc, #200]	; (800279c <HAL_GPIO_Init+0x354>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026f4:	4a29      	ldr	r2, [pc, #164]	; (800279c <HAL_GPIO_Init+0x354>)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026fa:	4b28      	ldr	r3, [pc, #160]	; (800279c <HAL_GPIO_Init+0x354>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	43db      	mvns	r3, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4013      	ands	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4313      	orrs	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800271e:	4a1f      	ldr	r2, [pc, #124]	; (800279c <HAL_GPIO_Init+0x354>)
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002724:	4b1d      	ldr	r3, [pc, #116]	; (800279c <HAL_GPIO_Init+0x354>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002748:	4a14      	ldr	r2, [pc, #80]	; (800279c <HAL_GPIO_Init+0x354>)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3301      	adds	r3, #1
 8002752:	61fb      	str	r3, [r7, #28]
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	2b0f      	cmp	r3, #15
 8002758:	f67f ae86 	bls.w	8002468 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800275c:	bf00      	nop
 800275e:	bf00      	nop
 8002760:	3724      	adds	r7, #36	; 0x24
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800
 8002770:	40013800 	.word	0x40013800
 8002774:	40020000 	.word	0x40020000
 8002778:	40020400 	.word	0x40020400
 800277c:	40020800 	.word	0x40020800
 8002780:	40020c00 	.word	0x40020c00
 8002784:	40021000 	.word	0x40021000
 8002788:	40021400 	.word	0x40021400
 800278c:	40021800 	.word	0x40021800
 8002790:	40021c00 	.word	0x40021c00
 8002794:	40022000 	.word	0x40022000
 8002798:	40022400 	.word	0x40022400
 800279c:	40013c00 	.word	0x40013c00

080027a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	807b      	strh	r3, [r7, #2]
 80027ac:	4613      	mov	r3, r2
 80027ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027b0:	787b      	ldrb	r3, [r7, #1]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027b6:	887a      	ldrh	r2, [r7, #2]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80027bc:	e003      	b.n	80027c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80027be:	887b      	ldrh	r3, [r7, #2]
 80027c0:	041a      	lsls	r2, r3, #16
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	619a      	str	r2, [r3, #24]
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b085      	sub	sp, #20
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	460b      	mov	r3, r1
 80027dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027e4:	887a      	ldrh	r2, [r7, #2]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4013      	ands	r3, r2
 80027ea:	041a      	lsls	r2, r3, #16
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	43d9      	mvns	r1, r3
 80027f0:	887b      	ldrh	r3, [r7, #2]
 80027f2:	400b      	ands	r3, r1
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	619a      	str	r2, [r3, #24]
}
 80027fa:	bf00      	nop
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002806:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002808:	b08f      	sub	sp, #60	; 0x3c
 800280a:	af0a      	add	r7, sp, #40	; 0x28
 800280c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e116      	b.n	8002a46 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d106      	bne.n	8002838 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7fe fb48 	bl	8000ec8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2203      	movs	r2, #3
 800283c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002848:	2b00      	cmp	r3, #0
 800284a:	d102      	bne.n	8002852 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f004 fa26 	bl	8006ca8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	603b      	str	r3, [r7, #0]
 8002862:	687e      	ldr	r6, [r7, #4]
 8002864:	466d      	mov	r5, sp
 8002866:	f106 0410 	add.w	r4, r6, #16
 800286a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800286c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800286e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002870:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002872:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002876:	e885 0003 	stmia.w	r5, {r0, r1}
 800287a:	1d33      	adds	r3, r6, #4
 800287c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800287e:	6838      	ldr	r0, [r7, #0]
 8002880:	f004 f9ba 	bl	8006bf8 <USB_CoreInit>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d005      	beq.n	8002896 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2202      	movs	r2, #2
 800288e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e0d7      	b.n	8002a46 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2100      	movs	r1, #0
 800289c:	4618      	mov	r0, r3
 800289e:	f004 fa14 	bl	8006cca <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a2:	2300      	movs	r3, #0
 80028a4:	73fb      	strb	r3, [r7, #15]
 80028a6:	e04a      	b.n	800293e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028a8:	7bfa      	ldrb	r2, [r7, #15]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	333d      	adds	r3, #61	; 0x3d
 80028b8:	2201      	movs	r2, #1
 80028ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028bc:	7bfa      	ldrb	r2, [r7, #15]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	333c      	adds	r3, #60	; 0x3c
 80028cc:	7bfa      	ldrb	r2, [r7, #15]
 80028ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028d0:	7bfa      	ldrb	r2, [r7, #15]
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
 80028d4:	b298      	uxth	r0, r3
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	1a9b      	subs	r3, r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	3342      	adds	r3, #66	; 0x42
 80028e4:	4602      	mov	r2, r0
 80028e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028e8:	7bfa      	ldrb	r2, [r7, #15]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	333f      	adds	r3, #63	; 0x3f
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028fc:	7bfa      	ldrb	r2, [r7, #15]
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	1a9b      	subs	r3, r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	3344      	adds	r3, #68	; 0x44
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002910:	7bfa      	ldrb	r2, [r7, #15]
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	1a9b      	subs	r3, r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	3348      	adds	r3, #72	; 0x48
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002924:	7bfa      	ldrb	r2, [r7, #15]
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	1a9b      	subs	r3, r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	3350      	adds	r3, #80	; 0x50
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	3301      	adds	r3, #1
 800293c:	73fb      	strb	r3, [r7, #15]
 800293e:	7bfa      	ldrb	r2, [r7, #15]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	429a      	cmp	r2, r3
 8002946:	d3af      	bcc.n	80028a8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002948:	2300      	movs	r3, #0
 800294a:	73fb      	strb	r3, [r7, #15]
 800294c:	e044      	b.n	80029d8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800294e:	7bfa      	ldrb	r2, [r7, #15]
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	1a9b      	subs	r3, r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	440b      	add	r3, r1
 800295c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002964:	7bfa      	ldrb	r2, [r7, #15]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002976:	7bfa      	ldrb	r2, [r7, #15]
 8002978:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800297a:	7bfa      	ldrb	r2, [r7, #15]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	1a9b      	subs	r3, r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	440b      	add	r3, r1
 8002988:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800298c:	2200      	movs	r2, #0
 800298e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002990:	7bfa      	ldrb	r2, [r7, #15]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	1a9b      	subs	r3, r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029a6:	7bfa      	ldrb	r2, [r7, #15]
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	1a9b      	subs	r3, r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	440b      	add	r3, r1
 80029b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029bc:	7bfa      	ldrb	r2, [r7, #15]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	1a9b      	subs	r3, r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d2:	7bfb      	ldrb	r3, [r7, #15]
 80029d4:	3301      	adds	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
 80029d8:	7bfa      	ldrb	r2, [r7, #15]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d3b5      	bcc.n	800294e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	687e      	ldr	r6, [r7, #4]
 80029ea:	466d      	mov	r5, sp
 80029ec:	f106 0410 	add.w	r4, r6, #16
 80029f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a00:	1d33      	adds	r3, r6, #4
 8002a02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a04:	6838      	ldr	r0, [r7, #0]
 8002a06:	f004 f98b 	bl	8006d20 <USB_DevInit>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e014      	b.n	8002a46 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d102      	bne.n	8002a3a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f80b 	bl	8002a50 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f004 fb3d 	bl	80070be <USB_DevDisconnect>

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002a50 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a7e:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <HAL_PCDEx_ActivateLPM+0x44>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	10000003 	.word	0x10000003

08002a98 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a9c:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a04      	ldr	r2, [pc, #16]	; (8002ab4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa6:	6013      	str	r3, [r2, #0]
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40007000 	.word	0x40007000

08002ab8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e29b      	b.n	8003006 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 8087 	beq.w	8002bea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002adc:	4b96      	ldr	r3, [pc, #600]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 030c 	and.w	r3, r3, #12
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	d00c      	beq.n	8002b02 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ae8:	4b93      	ldr	r3, [pc, #588]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 030c 	and.w	r3, r3, #12
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d112      	bne.n	8002b1a <HAL_RCC_OscConfig+0x62>
 8002af4:	4b90      	ldr	r3, [pc, #576]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002afc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b00:	d10b      	bne.n	8002b1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b02:	4b8d      	ldr	r3, [pc, #564]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d06c      	beq.n	8002be8 <HAL_RCC_OscConfig+0x130>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d168      	bne.n	8002be8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e275      	b.n	8003006 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b22:	d106      	bne.n	8002b32 <HAL_RCC_OscConfig+0x7a>
 8002b24:	4b84      	ldr	r3, [pc, #528]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a83      	ldr	r2, [pc, #524]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	e02e      	b.n	8002b90 <HAL_RCC_OscConfig+0xd8>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10c      	bne.n	8002b54 <HAL_RCC_OscConfig+0x9c>
 8002b3a:	4b7f      	ldr	r3, [pc, #508]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a7e      	ldr	r2, [pc, #504]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	4b7c      	ldr	r3, [pc, #496]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a7b      	ldr	r2, [pc, #492]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002b4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	e01d      	b.n	8002b90 <HAL_RCC_OscConfig+0xd8>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b5c:	d10c      	bne.n	8002b78 <HAL_RCC_OscConfig+0xc0>
 8002b5e:	4b76      	ldr	r3, [pc, #472]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a75      	ldr	r2, [pc, #468]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	4b73      	ldr	r3, [pc, #460]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a72      	ldr	r2, [pc, #456]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	e00b      	b.n	8002b90 <HAL_RCC_OscConfig+0xd8>
 8002b78:	4b6f      	ldr	r3, [pc, #444]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a6e      	ldr	r2, [pc, #440]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b82:	6013      	str	r3, [r2, #0]
 8002b84:	4b6c      	ldr	r3, [pc, #432]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a6b      	ldr	r2, [pc, #428]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d013      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b98:	f7fe faf8 	bl	800118c <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba0:	f7fe faf4 	bl	800118c <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b64      	cmp	r3, #100	; 0x64
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e229      	b.n	8003006 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb2:	4b61      	ldr	r3, [pc, #388]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0f0      	beq.n	8002ba0 <HAL_RCC_OscConfig+0xe8>
 8002bbe:	e014      	b.n	8002bea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc0:	f7fe fae4 	bl	800118c <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc8:	f7fe fae0 	bl	800118c <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b64      	cmp	r3, #100	; 0x64
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e215      	b.n	8003006 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bda:	4b57      	ldr	r3, [pc, #348]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f0      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x110>
 8002be6:	e000      	b.n	8002bea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d069      	beq.n	8002cca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bf6:	4b50      	ldr	r3, [pc, #320]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00b      	beq.n	8002c1a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c02:	4b4d      	ldr	r3, [pc, #308]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 030c 	and.w	r3, r3, #12
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d11c      	bne.n	8002c48 <HAL_RCC_OscConfig+0x190>
 8002c0e:	4b4a      	ldr	r3, [pc, #296]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d116      	bne.n	8002c48 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c1a:	4b47      	ldr	r3, [pc, #284]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d005      	beq.n	8002c32 <HAL_RCC_OscConfig+0x17a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d001      	beq.n	8002c32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e1e9      	b.n	8003006 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c32:	4b41      	ldr	r3, [pc, #260]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	493d      	ldr	r1, [pc, #244]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c46:	e040      	b.n	8002cca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d023      	beq.n	8002c98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c50:	4b39      	ldr	r3, [pc, #228]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a38      	ldr	r2, [pc, #224]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5c:	f7fe fa96 	bl	800118c <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c64:	f7fe fa92 	bl	800118c <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e1c7      	b.n	8003006 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c76:	4b30      	ldr	r3, [pc, #192]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0f0      	beq.n	8002c64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c82:	4b2d      	ldr	r3, [pc, #180]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4929      	ldr	r1, [pc, #164]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]
 8002c96:	e018      	b.n	8002cca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c98:	4b27      	ldr	r3, [pc, #156]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a26      	ldr	r2, [pc, #152]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002c9e:	f023 0301 	bic.w	r3, r3, #1
 8002ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca4:	f7fe fa72 	bl	800118c <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cac:	f7fe fa6e 	bl	800118c <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e1a3      	b.n	8003006 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cbe:	4b1e      	ldr	r3, [pc, #120]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d038      	beq.n	8002d48 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d019      	beq.n	8002d12 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cde:	4b16      	ldr	r3, [pc, #88]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce2:	4a15      	ldr	r2, [pc, #84]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cea:	f7fe fa4f 	bl	800118c <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf2:	f7fe fa4b 	bl	800118c <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e180      	b.n	8003006 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d04:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0f0      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x23a>
 8002d10:	e01a      	b.n	8002d48 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d12:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d16:	4a08      	ldr	r2, [pc, #32]	; (8002d38 <HAL_RCC_OscConfig+0x280>)
 8002d18:	f023 0301 	bic.w	r3, r3, #1
 8002d1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1e:	f7fe fa35 	bl	800118c <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d24:	e00a      	b.n	8002d3c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d26:	f7fe fa31 	bl	800118c <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d903      	bls.n	8002d3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e166      	b.n	8003006 <HAL_RCC_OscConfig+0x54e>
 8002d38:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d3c:	4b92      	ldr	r3, [pc, #584]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1ee      	bne.n	8002d26 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 80a4 	beq.w	8002e9e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d56:	4b8c      	ldr	r3, [pc, #560]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10d      	bne.n	8002d7e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d62:	4b89      	ldr	r3, [pc, #548]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	4a88      	ldr	r2, [pc, #544]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d6e:	4b86      	ldr	r3, [pc, #536]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d76:	60bb      	str	r3, [r7, #8]
 8002d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d7e:	4b83      	ldr	r3, [pc, #524]	; (8002f8c <HAL_RCC_OscConfig+0x4d4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d118      	bne.n	8002dbc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d8a:	4b80      	ldr	r3, [pc, #512]	; (8002f8c <HAL_RCC_OscConfig+0x4d4>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a7f      	ldr	r2, [pc, #508]	; (8002f8c <HAL_RCC_OscConfig+0x4d4>)
 8002d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d96:	f7fe f9f9 	bl	800118c <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d9e:	f7fe f9f5 	bl	800118c <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b64      	cmp	r3, #100	; 0x64
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e12a      	b.n	8003006 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002db0:	4b76      	ldr	r3, [pc, #472]	; (8002f8c <HAL_RCC_OscConfig+0x4d4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0f0      	beq.n	8002d9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d106      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x31a>
 8002dc4:	4b70      	ldr	r3, [pc, #448]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc8:	4a6f      	ldr	r2, [pc, #444]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd0:	e02d      	b.n	8002e2e <HAL_RCC_OscConfig+0x376>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x33c>
 8002dda:	4b6b      	ldr	r3, [pc, #428]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dde:	4a6a      	ldr	r2, [pc, #424]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002de0:	f023 0301 	bic.w	r3, r3, #1
 8002de4:	6713      	str	r3, [r2, #112]	; 0x70
 8002de6:	4b68      	ldr	r3, [pc, #416]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dea:	4a67      	ldr	r2, [pc, #412]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002dec:	f023 0304 	bic.w	r3, r3, #4
 8002df0:	6713      	str	r3, [r2, #112]	; 0x70
 8002df2:	e01c      	b.n	8002e2e <HAL_RCC_OscConfig+0x376>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	2b05      	cmp	r3, #5
 8002dfa:	d10c      	bne.n	8002e16 <HAL_RCC_OscConfig+0x35e>
 8002dfc:	4b62      	ldr	r3, [pc, #392]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e00:	4a61      	ldr	r2, [pc, #388]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002e02:	f043 0304 	orr.w	r3, r3, #4
 8002e06:	6713      	str	r3, [r2, #112]	; 0x70
 8002e08:	4b5f      	ldr	r3, [pc, #380]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0c:	4a5e      	ldr	r2, [pc, #376]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	6713      	str	r3, [r2, #112]	; 0x70
 8002e14:	e00b      	b.n	8002e2e <HAL_RCC_OscConfig+0x376>
 8002e16:	4b5c      	ldr	r3, [pc, #368]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1a:	4a5b      	ldr	r2, [pc, #364]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002e1c:	f023 0301 	bic.w	r3, r3, #1
 8002e20:	6713      	str	r3, [r2, #112]	; 0x70
 8002e22:	4b59      	ldr	r3, [pc, #356]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e26:	4a58      	ldr	r2, [pc, #352]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002e28:	f023 0304 	bic.w	r3, r3, #4
 8002e2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d015      	beq.n	8002e62 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e36:	f7fe f9a9 	bl	800118c <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e3c:	e00a      	b.n	8002e54 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e3e:	f7fe f9a5 	bl	800118c <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e0d8      	b.n	8003006 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e54:	4b4c      	ldr	r3, [pc, #304]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0ee      	beq.n	8002e3e <HAL_RCC_OscConfig+0x386>
 8002e60:	e014      	b.n	8002e8c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e62:	f7fe f993 	bl	800118c <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e68:	e00a      	b.n	8002e80 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6a:	f7fe f98f 	bl	800118c <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e0c2      	b.n	8003006 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e80:	4b41      	ldr	r3, [pc, #260]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1ee      	bne.n	8002e6a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d105      	bne.n	8002e9e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e92:	4b3d      	ldr	r3, [pc, #244]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	4a3c      	ldr	r2, [pc, #240]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 80ae 	beq.w	8003004 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ea8:	4b37      	ldr	r3, [pc, #220]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 030c 	and.w	r3, r3, #12
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d06d      	beq.n	8002f90 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d14b      	bne.n	8002f54 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ebc:	4b32      	ldr	r3, [pc, #200]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a31      	ldr	r2, [pc, #196]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec8:	f7fe f960 	bl	800118c <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed0:	f7fe f95c 	bl	800118c <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e091      	b.n	8003006 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee2:	4b29      	ldr	r3, [pc, #164]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69da      	ldr	r2, [r3, #28]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	019b      	lsls	r3, r3, #6
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f04:	085b      	lsrs	r3, r3, #1
 8002f06:	3b01      	subs	r3, #1
 8002f08:	041b      	lsls	r3, r3, #16
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	061b      	lsls	r3, r3, #24
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f18:	071b      	lsls	r3, r3, #28
 8002f1a:	491b      	ldr	r1, [pc, #108]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f20:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a18      	ldr	r2, [pc, #96]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2c:	f7fe f92e 	bl	800118c <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f34:	f7fe f92a 	bl	800118c <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e05f      	b.n	8003006 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f46:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0f0      	beq.n	8002f34 <HAL_RCC_OscConfig+0x47c>
 8002f52:	e057      	b.n	8003004 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f54:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a0b      	ldr	r2, [pc, #44]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f60:	f7fe f914 	bl	800118c <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f68:	f7fe f910 	bl	800118c <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e045      	b.n	8003006 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7a:	4b03      	ldr	r3, [pc, #12]	; (8002f88 <HAL_RCC_OscConfig+0x4d0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0x4b0>
 8002f86:	e03d      	b.n	8003004 <HAL_RCC_OscConfig+0x54c>
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f90:	4b1f      	ldr	r3, [pc, #124]	; (8003010 <HAL_RCC_OscConfig+0x558>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d030      	beq.n	8003000 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d129      	bne.n	8003000 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d122      	bne.n	8003000 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fc6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d119      	bne.n	8003000 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd6:	085b      	lsrs	r3, r3, #1
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d10f      	bne.n	8003000 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d107      	bne.n	8003000 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e000      	b.n	8003006 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40023800 	.word	0x40023800

08003014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800301e:	2300      	movs	r3, #0
 8003020:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0d0      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800302c:	4b6a      	ldr	r3, [pc, #424]	; (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 030f 	and.w	r3, r3, #15
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d910      	bls.n	800305c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303a:	4b67      	ldr	r3, [pc, #412]	; (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f023 020f 	bic.w	r2, r3, #15
 8003042:	4965      	ldr	r1, [pc, #404]	; (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	4313      	orrs	r3, r2
 8003048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800304a:	4b63      	ldr	r3, [pc, #396]	; (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d001      	beq.n	800305c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0b8      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d020      	beq.n	80030aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003074:	4b59      	ldr	r3, [pc, #356]	; (80031dc <HAL_RCC_ClockConfig+0x1c8>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	4a58      	ldr	r2, [pc, #352]	; (80031dc <HAL_RCC_ClockConfig+0x1c8>)
 800307a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800307e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	2b00      	cmp	r3, #0
 800308a:	d005      	beq.n	8003098 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800308c:	4b53      	ldr	r3, [pc, #332]	; (80031dc <HAL_RCC_ClockConfig+0x1c8>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	4a52      	ldr	r2, [pc, #328]	; (80031dc <HAL_RCC_ClockConfig+0x1c8>)
 8003092:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003096:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003098:	4b50      	ldr	r3, [pc, #320]	; (80031dc <HAL_RCC_ClockConfig+0x1c8>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	494d      	ldr	r1, [pc, #308]	; (80031dc <HAL_RCC_ClockConfig+0x1c8>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d040      	beq.n	8003138 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d107      	bne.n	80030ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030be:	4b47      	ldr	r3, [pc, #284]	; (80031dc <HAL_RCC_ClockConfig+0x1c8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d115      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e07f      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d107      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d6:	4b41      	ldr	r3, [pc, #260]	; (80031dc <HAL_RCC_ClockConfig+0x1c8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d109      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e073      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e6:	4b3d      	ldr	r3, [pc, #244]	; (80031dc <HAL_RCC_ClockConfig+0x1c8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e06b      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030f6:	4b39      	ldr	r3, [pc, #228]	; (80031dc <HAL_RCC_ClockConfig+0x1c8>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f023 0203 	bic.w	r2, r3, #3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	4936      	ldr	r1, [pc, #216]	; (80031dc <HAL_RCC_ClockConfig+0x1c8>)
 8003104:	4313      	orrs	r3, r2
 8003106:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003108:	f7fe f840 	bl	800118c <HAL_GetTick>
 800310c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310e:	e00a      	b.n	8003126 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003110:	f7fe f83c 	bl	800118c <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	f241 3288 	movw	r2, #5000	; 0x1388
 800311e:	4293      	cmp	r3, r2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e053      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003126:	4b2d      	ldr	r3, [pc, #180]	; (80031dc <HAL_RCC_ClockConfig+0x1c8>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 020c 	and.w	r2, r3, #12
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	429a      	cmp	r2, r3
 8003136:	d1eb      	bne.n	8003110 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003138:	4b27      	ldr	r3, [pc, #156]	; (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d210      	bcs.n	8003168 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003146:	4b24      	ldr	r3, [pc, #144]	; (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 020f 	bic.w	r2, r3, #15
 800314e:	4922      	ldr	r1, [pc, #136]	; (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	4313      	orrs	r3, r2
 8003154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003156:	4b20      	ldr	r3, [pc, #128]	; (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d001      	beq.n	8003168 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e032      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	d008      	beq.n	8003186 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003174:	4b19      	ldr	r3, [pc, #100]	; (80031dc <HAL_RCC_ClockConfig+0x1c8>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	4916      	ldr	r1, [pc, #88]	; (80031dc <HAL_RCC_ClockConfig+0x1c8>)
 8003182:	4313      	orrs	r3, r2
 8003184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d009      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003192:	4b12      	ldr	r3, [pc, #72]	; (80031dc <HAL_RCC_ClockConfig+0x1c8>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	490e      	ldr	r1, [pc, #56]	; (80031dc <HAL_RCC_ClockConfig+0x1c8>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031a6:	f000 f821 	bl	80031ec <HAL_RCC_GetSysClockFreq>
 80031aa:	4602      	mov	r2, r0
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <HAL_RCC_ClockConfig+0x1c8>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	091b      	lsrs	r3, r3, #4
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	490a      	ldr	r1, [pc, #40]	; (80031e0 <HAL_RCC_ClockConfig+0x1cc>)
 80031b8:	5ccb      	ldrb	r3, [r1, r3]
 80031ba:	fa22 f303 	lsr.w	r3, r2, r3
 80031be:	4a09      	ldr	r2, [pc, #36]	; (80031e4 <HAL_RCC_ClockConfig+0x1d0>)
 80031c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031c2:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <HAL_RCC_ClockConfig+0x1d4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fd feda 	bl	8000f80 <HAL_InitTick>

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40023c00 	.word	0x40023c00
 80031dc:	40023800 	.word	0x40023800
 80031e0:	0800abc4 	.word	0x0800abc4
 80031e4:	20000000 	.word	0x20000000
 80031e8:	20000004 	.word	0x20000004

080031ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80031f0:	b084      	sub	sp, #16
 80031f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80031f4:	2300      	movs	r3, #0
 80031f6:	607b      	str	r3, [r7, #4]
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	2300      	movs	r3, #0
 80031fe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003204:	4b67      	ldr	r3, [pc, #412]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 030c 	and.w	r3, r3, #12
 800320c:	2b08      	cmp	r3, #8
 800320e:	d00d      	beq.n	800322c <HAL_RCC_GetSysClockFreq+0x40>
 8003210:	2b08      	cmp	r3, #8
 8003212:	f200 80bd 	bhi.w	8003390 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003216:	2b00      	cmp	r3, #0
 8003218:	d002      	beq.n	8003220 <HAL_RCC_GetSysClockFreq+0x34>
 800321a:	2b04      	cmp	r3, #4
 800321c:	d003      	beq.n	8003226 <HAL_RCC_GetSysClockFreq+0x3a>
 800321e:	e0b7      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003220:	4b61      	ldr	r3, [pc, #388]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003222:	60bb      	str	r3, [r7, #8]
      break;
 8003224:	e0b7      	b.n	8003396 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003226:	4b61      	ldr	r3, [pc, #388]	; (80033ac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003228:	60bb      	str	r3, [r7, #8]
      break;
 800322a:	e0b4      	b.n	8003396 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800322c:	4b5d      	ldr	r3, [pc, #372]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003234:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003236:	4b5b      	ldr	r3, [pc, #364]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d04d      	beq.n	80032de <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003242:	4b58      	ldr	r3, [pc, #352]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	099b      	lsrs	r3, r3, #6
 8003248:	461a      	mov	r2, r3
 800324a:	f04f 0300 	mov.w	r3, #0
 800324e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003252:	f04f 0100 	mov.w	r1, #0
 8003256:	ea02 0800 	and.w	r8, r2, r0
 800325a:	ea03 0901 	and.w	r9, r3, r1
 800325e:	4640      	mov	r0, r8
 8003260:	4649      	mov	r1, r9
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	014b      	lsls	r3, r1, #5
 800326c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003270:	0142      	lsls	r2, r0, #5
 8003272:	4610      	mov	r0, r2
 8003274:	4619      	mov	r1, r3
 8003276:	ebb0 0008 	subs.w	r0, r0, r8
 800327a:	eb61 0109 	sbc.w	r1, r1, r9
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	018b      	lsls	r3, r1, #6
 8003288:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800328c:	0182      	lsls	r2, r0, #6
 800328e:	1a12      	subs	r2, r2, r0
 8003290:	eb63 0301 	sbc.w	r3, r3, r1
 8003294:	f04f 0000 	mov.w	r0, #0
 8003298:	f04f 0100 	mov.w	r1, #0
 800329c:	00d9      	lsls	r1, r3, #3
 800329e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032a2:	00d0      	lsls	r0, r2, #3
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	eb12 0208 	adds.w	r2, r2, r8
 80032ac:	eb43 0309 	adc.w	r3, r3, r9
 80032b0:	f04f 0000 	mov.w	r0, #0
 80032b4:	f04f 0100 	mov.w	r1, #0
 80032b8:	0259      	lsls	r1, r3, #9
 80032ba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80032be:	0250      	lsls	r0, r2, #9
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4610      	mov	r0, r2
 80032c6:	4619      	mov	r1, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	461a      	mov	r2, r3
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	f7fc ffb6 	bl	8000240 <__aeabi_uldivmod>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4613      	mov	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	e04a      	b.n	8003374 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032de:	4b31      	ldr	r3, [pc, #196]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	099b      	lsrs	r3, r3, #6
 80032e4:	461a      	mov	r2, r3
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032ee:	f04f 0100 	mov.w	r1, #0
 80032f2:	ea02 0400 	and.w	r4, r2, r0
 80032f6:	ea03 0501 	and.w	r5, r3, r1
 80032fa:	4620      	mov	r0, r4
 80032fc:	4629      	mov	r1, r5
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	014b      	lsls	r3, r1, #5
 8003308:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800330c:	0142      	lsls	r2, r0, #5
 800330e:	4610      	mov	r0, r2
 8003310:	4619      	mov	r1, r3
 8003312:	1b00      	subs	r0, r0, r4
 8003314:	eb61 0105 	sbc.w	r1, r1, r5
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	018b      	lsls	r3, r1, #6
 8003322:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003326:	0182      	lsls	r2, r0, #6
 8003328:	1a12      	subs	r2, r2, r0
 800332a:	eb63 0301 	sbc.w	r3, r3, r1
 800332e:	f04f 0000 	mov.w	r0, #0
 8003332:	f04f 0100 	mov.w	r1, #0
 8003336:	00d9      	lsls	r1, r3, #3
 8003338:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800333c:	00d0      	lsls	r0, r2, #3
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	1912      	adds	r2, r2, r4
 8003344:	eb45 0303 	adc.w	r3, r5, r3
 8003348:	f04f 0000 	mov.w	r0, #0
 800334c:	f04f 0100 	mov.w	r1, #0
 8003350:	0299      	lsls	r1, r3, #10
 8003352:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003356:	0290      	lsls	r0, r2, #10
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	4610      	mov	r0, r2
 800335e:	4619      	mov	r1, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	461a      	mov	r2, r3
 8003364:	f04f 0300 	mov.w	r3, #0
 8003368:	f7fc ff6a 	bl	8000240 <__aeabi_uldivmod>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4613      	mov	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003374:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	0c1b      	lsrs	r3, r3, #16
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	3301      	adds	r3, #1
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	fbb2 f3f3 	udiv	r3, r2, r3
 800338c:	60bb      	str	r3, [r7, #8]
      break;
 800338e:	e002      	b.n	8003396 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003390:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003392:	60bb      	str	r3, [r7, #8]
      break;
 8003394:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003396:	68bb      	ldr	r3, [r7, #8]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033a2:	bf00      	nop
 80033a4:	40023800 	.word	0x40023800
 80033a8:	00f42400 	.word	0x00f42400
 80033ac:	007a1200 	.word	0x007a1200

080033b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033b4:	4b03      	ldr	r3, [pc, #12]	; (80033c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033b6:	681b      	ldr	r3, [r3, #0]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	20000000 	.word	0x20000000

080033c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033cc:	f7ff fff0 	bl	80033b0 <HAL_RCC_GetHCLKFreq>
 80033d0:	4602      	mov	r2, r0
 80033d2:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	0a9b      	lsrs	r3, r3, #10
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	4903      	ldr	r1, [pc, #12]	; (80033ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80033de:	5ccb      	ldrb	r3, [r1, r3]
 80033e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40023800 	.word	0x40023800
 80033ec:	0800abd4 	.word	0x0800abd4

080033f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033f4:	f7ff ffdc 	bl	80033b0 <HAL_RCC_GetHCLKFreq>
 80033f8:	4602      	mov	r2, r0
 80033fa:	4b05      	ldr	r3, [pc, #20]	; (8003410 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	0b5b      	lsrs	r3, r3, #13
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	4903      	ldr	r1, [pc, #12]	; (8003414 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003406:	5ccb      	ldrb	r3, [r1, r3]
 8003408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800340c:	4618      	mov	r0, r3
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40023800 	.word	0x40023800
 8003414:	0800abd4 	.word	0x0800abd4

08003418 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	220f      	movs	r2, #15
 8003426:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003428:	4b12      	ldr	r3, [pc, #72]	; (8003474 <HAL_RCC_GetClockConfig+0x5c>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 0203 	and.w	r2, r3, #3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003434:	4b0f      	ldr	r3, [pc, #60]	; (8003474 <HAL_RCC_GetClockConfig+0x5c>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003440:	4b0c      	ldr	r3, [pc, #48]	; (8003474 <HAL_RCC_GetClockConfig+0x5c>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800344c:	4b09      	ldr	r3, [pc, #36]	; (8003474 <HAL_RCC_GetClockConfig+0x5c>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	08db      	lsrs	r3, r3, #3
 8003452:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800345a:	4b07      	ldr	r3, [pc, #28]	; (8003478 <HAL_RCC_GetClockConfig+0x60>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 020f 	and.w	r2, r3, #15
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	601a      	str	r2, [r3, #0]
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	40023800 	.word	0x40023800
 8003478:	40023c00 	.word	0x40023c00

0800347c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003488:	2300      	movs	r3, #0
 800348a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800348c:	2300      	movs	r3, #0
 800348e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003490:	2300      	movs	r3, #0
 8003492:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d012      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034a4:	4b69      	ldr	r3, [pc, #420]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	4a68      	ldr	r2, [pc, #416]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80034ae:	6093      	str	r3, [r2, #8]
 80034b0:	4b66      	ldr	r3, [pc, #408]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b8:	4964      	ldr	r1, [pc, #400]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80034c6:	2301      	movs	r3, #1
 80034c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d017      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034d6:	4b5d      	ldr	r3, [pc, #372]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e4:	4959      	ldr	r1, [pc, #356]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034f4:	d101      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80034f6:	2301      	movs	r3, #1
 80034f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003502:	2301      	movs	r3, #1
 8003504:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d017      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003512:	4b4e      	ldr	r3, [pc, #312]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003514:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003518:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	494a      	ldr	r1, [pc, #296]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003522:	4313      	orrs	r3, r2
 8003524:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003530:	d101      	bne.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003532:	2301      	movs	r3, #1
 8003534:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800353e:	2301      	movs	r3, #1
 8003540:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800354e:	2301      	movs	r3, #1
 8003550:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0320 	and.w	r3, r3, #32
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 808b 	beq.w	8003676 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003560:	4b3a      	ldr	r3, [pc, #232]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	4a39      	ldr	r2, [pc, #228]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800356a:	6413      	str	r3, [r2, #64]	; 0x40
 800356c:	4b37      	ldr	r3, [pc, #220]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003574:	60bb      	str	r3, [r7, #8]
 8003576:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003578:	4b35      	ldr	r3, [pc, #212]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a34      	ldr	r2, [pc, #208]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800357e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003582:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003584:	f7fd fe02 	bl	800118c <HAL_GetTick>
 8003588:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800358a:	e008      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800358c:	f7fd fdfe 	bl	800118c <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b64      	cmp	r3, #100	; 0x64
 8003598:	d901      	bls.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e38f      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800359e:	4b2c      	ldr	r3, [pc, #176]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0f0      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035aa:	4b28      	ldr	r3, [pc, #160]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d035      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d02e      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035c8:	4b20      	ldr	r3, [pc, #128]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035d2:	4b1e      	ldr	r3, [pc, #120]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d6:	4a1d      	ldr	r2, [pc, #116]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035dc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035de:	4b1b      	ldr	r3, [pc, #108]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e2:	4a1a      	ldr	r2, [pc, #104]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80035ea:	4a18      	ldr	r2, [pc, #96]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80035f0:	4b16      	ldr	r3, [pc, #88]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d114      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fc:	f7fd fdc6 	bl	800118c <HAL_GetTick>
 8003600:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003602:	e00a      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003604:	f7fd fdc2 	bl	800118c <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003612:	4293      	cmp	r3, r2
 8003614:	d901      	bls.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e351      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800361a:	4b0c      	ldr	r3, [pc, #48]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800361c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0ee      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800362e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003632:	d111      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003634:	4b05      	ldr	r3, [pc, #20]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003640:	4b04      	ldr	r3, [pc, #16]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003642:	400b      	ands	r3, r1
 8003644:	4901      	ldr	r1, [pc, #4]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003646:	4313      	orrs	r3, r2
 8003648:	608b      	str	r3, [r1, #8]
 800364a:	e00b      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800364c:	40023800 	.word	0x40023800
 8003650:	40007000 	.word	0x40007000
 8003654:	0ffffcff 	.word	0x0ffffcff
 8003658:	4bb3      	ldr	r3, [pc, #716]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	4ab2      	ldr	r2, [pc, #712]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800365e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003662:	6093      	str	r3, [r2, #8]
 8003664:	4bb0      	ldr	r3, [pc, #704]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003666:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003670:	49ad      	ldr	r1, [pc, #692]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003672:	4313      	orrs	r3, r2
 8003674:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0310 	and.w	r3, r3, #16
 800367e:	2b00      	cmp	r3, #0
 8003680:	d010      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003682:	4ba9      	ldr	r3, [pc, #676]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003688:	4aa7      	ldr	r2, [pc, #668]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800368a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800368e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003692:	4ba5      	ldr	r3, [pc, #660]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003694:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369c:	49a2      	ldr	r1, [pc, #648]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00a      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036b0:	4b9d      	ldr	r3, [pc, #628]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036be:	499a      	ldr	r1, [pc, #616]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036d2:	4b95      	ldr	r3, [pc, #596]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036e0:	4991      	ldr	r1, [pc, #580]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00a      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036f4:	4b8c      	ldr	r3, [pc, #560]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003702:	4989      	ldr	r1, [pc, #548]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003716:	4b84      	ldr	r3, [pc, #528]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003724:	4980      	ldr	r1, [pc, #512]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003738:	4b7b      	ldr	r3, [pc, #492]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800373a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373e:	f023 0203 	bic.w	r2, r3, #3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	4978      	ldr	r1, [pc, #480]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800375a:	4b73      	ldr	r3, [pc, #460]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800375c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003760:	f023 020c 	bic.w	r2, r3, #12
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003768:	496f      	ldr	r1, [pc, #444]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800377c:	4b6a      	ldr	r3, [pc, #424]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003782:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800378a:	4967      	ldr	r1, [pc, #412]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800379e:	4b62      	ldr	r3, [pc, #392]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ac:	495e      	ldr	r1, [pc, #376]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037c0:	4b59      	ldr	r3, [pc, #356]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ce:	4956      	ldr	r1, [pc, #344]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80037e2:	4b51      	ldr	r3, [pc, #324]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f0:	494d      	ldr	r1, [pc, #308]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003804:	4b48      	ldr	r3, [pc, #288]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003812:	4945      	ldr	r1, [pc, #276]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003826:	4b40      	ldr	r3, [pc, #256]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003834:	493c      	ldr	r1, [pc, #240]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00a      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003848:	4b37      	ldr	r3, [pc, #220]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003856:	4934      	ldr	r1, [pc, #208]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003858:	4313      	orrs	r3, r2
 800385a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d011      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800386a:	4b2f      	ldr	r3, [pc, #188]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800386c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003870:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003878:	492b      	ldr	r1, [pc, #172]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003884:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003888:	d101      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800388a:	2301      	movs	r3, #1
 800388c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800389a:	2301      	movs	r3, #1
 800389c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038aa:	4b1f      	ldr	r3, [pc, #124]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b8:	491b      	ldr	r1, [pc, #108]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00b      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038cc:	4b16      	ldr	r3, [pc, #88]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038dc:	4912      	ldr	r1, [pc, #72]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00b      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80038f0:	4b0d      	ldr	r3, [pc, #52]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003900:	4909      	ldr	r1, [pc, #36]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00f      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003914:	4b04      	ldr	r3, [pc, #16]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003916:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800391a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003924:	e002      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003926:	bf00      	nop
 8003928:	40023800 	.word	0x40023800
 800392c:	4986      	ldr	r1, [pc, #536]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00b      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003940:	4b81      	ldr	r3, [pc, #516]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003942:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003946:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003950:	497d      	ldr	r1, [pc, #500]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d006      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 80d6 	beq.w	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800396c:	4b76      	ldr	r3, [pc, #472]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a75      	ldr	r2, [pc, #468]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003972:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003976:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003978:	f7fd fc08 	bl	800118c <HAL_GetTick>
 800397c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003980:	f7fd fc04 	bl	800118c <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b64      	cmp	r3, #100	; 0x64
 800398c:	d901      	bls.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e195      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003992:	4b6d      	ldr	r3, [pc, #436]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1f0      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d021      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x572>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d11d      	bne.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039b2:	4b65      	ldr	r3, [pc, #404]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039b8:	0c1b      	lsrs	r3, r3, #16
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039c0:	4b61      	ldr	r3, [pc, #388]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039c6:	0e1b      	lsrs	r3, r3, #24
 80039c8:	f003 030f 	and.w	r3, r3, #15
 80039cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	019a      	lsls	r2, r3, #6
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	041b      	lsls	r3, r3, #16
 80039d8:	431a      	orrs	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	061b      	lsls	r3, r3, #24
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	071b      	lsls	r3, r3, #28
 80039e6:	4958      	ldr	r1, [pc, #352]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d004      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a02:	d00a      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d02e      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a18:	d129      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a1a:	4b4b      	ldr	r3, [pc, #300]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a20:	0c1b      	lsrs	r3, r3, #16
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a28:	4b47      	ldr	r3, [pc, #284]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a2e:	0f1b      	lsrs	r3, r3, #28
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	019a      	lsls	r2, r3, #6
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	041b      	lsls	r3, r3, #16
 8003a40:	431a      	orrs	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	061b      	lsls	r3, r3, #24
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	071b      	lsls	r3, r3, #28
 8003a4e:	493e      	ldr	r1, [pc, #248]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a56:	4b3c      	ldr	r3, [pc, #240]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a5c:	f023 021f 	bic.w	r2, r3, #31
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	3b01      	subs	r3, #1
 8003a66:	4938      	ldr	r1, [pc, #224]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d01d      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a7a:	4b33      	ldr	r3, [pc, #204]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a80:	0e1b      	lsrs	r3, r3, #24
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a88:	4b2f      	ldr	r3, [pc, #188]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a8e:	0f1b      	lsrs	r3, r3, #28
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	019a      	lsls	r2, r3, #6
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	041b      	lsls	r3, r3, #16
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	061b      	lsls	r3, r3, #24
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	071b      	lsls	r3, r3, #28
 8003aae:	4926      	ldr	r1, [pc, #152]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d011      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	019a      	lsls	r2, r3, #6
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	041b      	lsls	r3, r3, #16
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	061b      	lsls	r3, r3, #24
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	071b      	lsls	r3, r3, #28
 8003ade:	491a      	ldr	r1, [pc, #104]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ae6:	4b18      	ldr	r3, [pc, #96]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a17      	ldr	r2, [pc, #92]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003af0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af2:	f7fd fb4b 	bl	800118c <HAL_GetTick>
 8003af6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003af8:	e008      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003afa:	f7fd fb47 	bl	800118c <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b64      	cmp	r3, #100	; 0x64
 8003b06:	d901      	bls.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e0d8      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b0c:	4b0e      	ldr	r3, [pc, #56]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	f040 80ce 	bne.w	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b20:	4b09      	ldr	r3, [pc, #36]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a08      	ldr	r2, [pc, #32]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b2c:	f7fd fb2e 	bl	800118c <HAL_GetTick>
 8003b30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b32:	e00b      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b34:	f7fd fb2a 	bl	800118c <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b64      	cmp	r3, #100	; 0x64
 8003b40:	d904      	bls.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e0bb      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003b46:	bf00      	nop
 8003b48:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b4c:	4b5e      	ldr	r3, [pc, #376]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b58:	d0ec      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d009      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d02e      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d12a      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b82:	4b51      	ldr	r3, [pc, #324]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b88:	0c1b      	lsrs	r3, r3, #16
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b90:	4b4d      	ldr	r3, [pc, #308]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b96:	0f1b      	lsrs	r3, r3, #28
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	019a      	lsls	r2, r3, #6
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	041b      	lsls	r3, r3, #16
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	061b      	lsls	r3, r3, #24
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	071b      	lsls	r3, r3, #28
 8003bb6:	4944      	ldr	r1, [pc, #272]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003bbe:	4b42      	ldr	r3, [pc, #264]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bc4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	021b      	lsls	r3, r3, #8
 8003bd0:	493d      	ldr	r1, [pc, #244]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d022      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003be8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bec:	d11d      	bne.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003bee:	4b36      	ldr	r3, [pc, #216]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf4:	0e1b      	lsrs	r3, r3, #24
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bfc:	4b32      	ldr	r3, [pc, #200]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c02:	0f1b      	lsrs	r3, r3, #28
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	019a      	lsls	r2, r3, #6
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	041b      	lsls	r3, r3, #16
 8003c16:	431a      	orrs	r2, r3
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	061b      	lsls	r3, r3, #24
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	071b      	lsls	r3, r3, #28
 8003c22:	4929      	ldr	r1, [pc, #164]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d028      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c36:	4b24      	ldr	r3, [pc, #144]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3c:	0e1b      	lsrs	r3, r3, #24
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c44:	4b20      	ldr	r3, [pc, #128]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4a:	0c1b      	lsrs	r3, r3, #16
 8003c4c:	f003 0303 	and.w	r3, r3, #3
 8003c50:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	019a      	lsls	r2, r3, #6
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	041b      	lsls	r3, r3, #16
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	061b      	lsls	r3, r3, #24
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	071b      	lsls	r3, r3, #28
 8003c6a:	4917      	ldr	r1, [pc, #92]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c72:	4b15      	ldr	r3, [pc, #84]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c80:	4911      	ldr	r1, [pc, #68]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c88:	4b0f      	ldr	r3, [pc, #60]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a0e      	ldr	r2, [pc, #56]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c94:	f7fd fa7a 	bl	800118c <HAL_GetTick>
 8003c98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c9c:	f7fd fa76 	bl	800118c <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b64      	cmp	r3, #100	; 0x64
 8003ca8:	d901      	bls.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e007      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cae:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cba:	d1ef      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3720      	adds	r7, #32
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40023800 	.word	0x40023800

08003ccc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e022      	b.n	8003d24 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d105      	bne.n	8003cf6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7fc ffbb 	bl	8000c6c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2203      	movs	r2, #3
 8003cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f814 	bl	8003d2c <HAL_SD_InitCard>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e00a      	b.n	8003d24 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003d2c:	b5b0      	push	{r4, r5, r7, lr}
 8003d2e:	b08e      	sub	sp, #56	; 0x38
 8003d30:	af04      	add	r7, sp, #16
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003d34:	2300      	movs	r3, #0
 8003d36:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003d44:	2300      	movs	r3, #0
 8003d46:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8003d48:	2376      	movs	r3, #118	; 0x76
 8003d4a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681d      	ldr	r5, [r3, #0]
 8003d50:	466c      	mov	r4, sp
 8003d52:	f107 0314 	add.w	r3, r7, #20
 8003d56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003d5e:	f107 0308 	add.w	r3, r7, #8
 8003d62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d64:	4628      	mov	r0, r5
 8003d66:	f002 f9cf 	bl	8006108 <SDMMC_Init>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003d70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e056      	b.n	8003e2a <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d8a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f002 fa03 	bl	800619c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003da4:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fff2 	bl	8004d90 <SD_PowerON>
 8003dac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00b      	beq.n	8003dcc <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e02e      	b.n	8003e2a <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 ff13 	bl	8004bf8 <SD_InitCard>
 8003dd2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003dd4:	6a3b      	ldr	r3, [r7, #32]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00b      	beq.n	8003df2 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e01b      	b.n	8003e2a <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f002 fa62 	bl	80062c4 <SDMMC_CmdBlockLength>
 8003e00:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00f      	beq.n	8003e28 <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a09      	ldr	r2, [pc, #36]	; (8003e34 <HAL_SD_InitCard+0x108>)
 8003e0e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e000      	b.n	8003e2a <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3728      	adds	r7, #40	; 0x28
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bdb0      	pop	{r4, r5, r7, pc}
 8003e32:	bf00      	nop
 8003e34:	004005ff 	.word	0x004005ff

08003e38 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b08c      	sub	sp, #48	; 0x30
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
 8003e44:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d107      	bne.n	8003e60 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e54:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e0c3      	b.n	8003fe8 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	f040 80bc 	bne.w	8003fe6 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003e74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	441a      	add	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d907      	bls.n	8003e92 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e86:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e0aa      	b.n	8003fe8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2203      	movs	r2, #3
 8003e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8003eb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	4a4e      	ldr	r2, [pc, #312]	; (8003ff0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003eb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	4a4d      	ldr	r2, [pc, #308]	; (8003ff4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003ec0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	2200      	movs	r2, #0
 8003ed0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3380      	adds	r3, #128	; 0x80
 8003ef8:	4619      	mov	r1, r3
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	025b      	lsls	r3, r3, #9
 8003f00:	089b      	lsrs	r3, r3, #2
 8003f02:	f7fd ffa9 	bl	8001e58 <HAL_DMA_Start_IT>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d017      	beq.n	8003f3c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8003f1a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a35      	ldr	r2, [pc, #212]	; (8003ff8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8003f22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e055      	b.n	8003fe8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0208 	orr.w	r2, r2, #8
 8003f4a:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d002      	beq.n	8003f5a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8003f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f56:	025b      	lsls	r3, r3, #9
 8003f58:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f5e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	025b      	lsls	r3, r3, #9
 8003f64:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003f66:	2390      	movs	r3, #144	; 0x90
 8003f68:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003f72:	2301      	movs	r3, #1
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f107 0210 	add.w	r2, r7, #16
 8003f7e:	4611      	mov	r1, r2
 8003f80:	4618      	mov	r0, r3
 8003f82:	f002 f973 	bl	800626c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d90a      	bls.n	8003fa2 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2282      	movs	r2, #130	; 0x82
 8003f90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f002 f9d7 	bl	800634c <SDMMC_CmdReadMultiBlock>
 8003f9e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003fa0:	e009      	b.n	8003fb6 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2281      	movs	r2, #129	; 0x81
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f002 f9aa 	bl	8006308 <SDMMC_CmdReadSingleBlock>
 8003fb4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d012      	beq.n	8003fe2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a0d      	ldr	r2, [pc, #52]	; (8003ff8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8003fc2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e002      	b.n	8003fe8 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	e000      	b.n	8003fe8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8003fe6:	2302      	movs	r3, #2
  }
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3730      	adds	r7, #48	; 0x30
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	08004a07 	.word	0x08004a07
 8003ff4:	08004a79 	.word	0x08004a79
 8003ff8:	004005ff 	.word	0x004005ff

08003ffc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08c      	sub	sp, #48	; 0x30
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d107      	bne.n	8004024 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004018:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e0c6      	b.n	80041b2 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b01      	cmp	r3, #1
 800402e:	f040 80bf 	bne.w	80041b0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	441a      	add	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004042:	429a      	cmp	r2, r3
 8004044:	d907      	bls.n	8004056 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e0ad      	b.n	80041b2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2203      	movs	r2, #3
 800405a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2200      	movs	r2, #0
 8004064:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 021a 	orr.w	r2, r2, #26
 8004074:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407a:	4a50      	ldr	r2, [pc, #320]	; (80041bc <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800407c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004082:	4a4f      	ldr	r2, [pc, #316]	; (80041c0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004084:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408a:	2200      	movs	r2, #0
 800408c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004092:	2b01      	cmp	r3, #1
 8004094:	d002      	beq.n	800409c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8004096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004098:	025b      	lsls	r3, r3, #9
 800409a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d90a      	bls.n	80040b8 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	22a0      	movs	r2, #160	; 0xa0
 80040a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040ae:	4618      	mov	r0, r3
 80040b0:	f002 f990 	bl	80063d4 <SDMMC_CmdWriteMultiBlock>
 80040b4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80040b6:	e009      	b.n	80040cc <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2290      	movs	r2, #144	; 0x90
 80040bc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040c4:	4618      	mov	r0, r3
 80040c6:	f002 f963 	bl	8006390 <SDMMC_CmdWriteSingleBlock>
 80040ca:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80040cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d012      	beq.n	80040f8 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a3b      	ldr	r2, [pc, #236]	; (80041c4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80040d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e0:	431a      	orrs	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e05c      	b.n	80041b2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0208 	orr.w	r2, r2, #8
 8004106:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410c:	2240      	movs	r2, #64	; 0x40
 800410e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004130:	68b9      	ldr	r1, [r7, #8]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3380      	adds	r3, #128	; 0x80
 8004138:	461a      	mov	r2, r3
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	025b      	lsls	r3, r3, #9
 800413e:	089b      	lsrs	r3, r3, #2
 8004140:	f7fd fe8a 	bl	8001e58 <HAL_DMA_Start_IT>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d01a      	beq.n	8004180 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 021a 	bic.w	r2, r2, #26
 8004158:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a19      	ldr	r2, [pc, #100]	; (80041c4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004160:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004166:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e018      	b.n	80041b2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004180:	f04f 33ff 	mov.w	r3, #4294967295
 8004184:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	025b      	lsls	r3, r3, #9
 800418a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800418c:	2390      	movs	r3, #144	; 0x90
 800418e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004190:	2300      	movs	r3, #0
 8004192:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004194:	2300      	movs	r3, #0
 8004196:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8004198:	2301      	movs	r3, #1
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f107 0210 	add.w	r2, r7, #16
 80041a4:	4611      	mov	r1, r2
 80041a6:	4618      	mov	r0, r3
 80041a8:	f002 f860 	bl	800626c <SDMMC_ConfigData>

      return HAL_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	e000      	b.n	80041b2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80041b0:	2302      	movs	r3, #2
  }
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3730      	adds	r7, #48	; 0x30
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	080049dd 	.word	0x080049dd
 80041c0:	08004a79 	.word	0x08004a79
 80041c4:	004005ff 	.word	0x004005ff

080041c8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d008      	beq.n	80041f6 <HAL_SD_IRQHandler+0x2e>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 ffed 	bl	80051ce <SD_Read_IT>
 80041f4:	e153      	b.n	800449e <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 808d 	beq.w	8004320 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800420e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	4ba3      	ldr	r3, [pc, #652]	; (80044a8 <HAL_SD_IRQHandler+0x2e0>)
 800421c:	400b      	ands	r3, r1
 800421e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0201 	bic.w	r2, r2, #1
 800422e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b00      	cmp	r3, #0
 8004238:	d039      	beq.n	80042ae <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d104      	bne.n	800424e <HAL_SD_IRQHandler+0x86>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f003 0320 	and.w	r3, r3, #32
 800424a:	2b00      	cmp	r3, #0
 800424c:	d011      	beq.n	8004272 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f002 f8e0 	bl	8006418 <SDMMC_CmdStopTransfer>
 8004258:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d008      	beq.n	8004272 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f921 	bl	80044b4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f240 523a 	movw	r2, #1338	; 0x53a
 800427a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b00      	cmp	r3, #0
 8004292:	d104      	bne.n	800429e <HAL_SD_IRQHandler+0xd6>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f003 f800 	bl	80072a4 <HAL_SD_RxCpltCallback>
 80042a4:	e0fb      	b.n	800449e <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f002 fff2 	bl	8007290 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80042ac:	e0f7      	b.n	800449e <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 80f2 	beq.w	800449e <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f003 0320 	and.w	r3, r3, #32
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d011      	beq.n	80042e8 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f002 f8a5 	bl	8006418 <SDMMC_CmdStopTransfer>
 80042ce:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d008      	beq.n	80042e8 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	431a      	orrs	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f8e6 	bl	80044b4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f040 80d5 	bne.w	800449e <HAL_SD_IRQHandler+0x2d6>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f040 80cf 	bne.w	800449e <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0208 	bic.w	r2, r2, #8
 800430e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f002 ffb9 	bl	8007290 <HAL_SD_TxCpltCallback>
}
 800431e:	e0be      	b.n	800449e <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d008      	beq.n	8004340 <HAL_SD_IRQHandler+0x178>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f003 0308 	and.w	r3, r3, #8
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 ff99 	bl	8005270 <SD_Write_IT>
 800433e:	e0ae      	b.n	800449e <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004346:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 80a7 	beq.w	800449e <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d005      	beq.n	800436a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004362:	f043 0202 	orr.w	r2, r3, #2
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b00      	cmp	r3, #0
 8004376:	d005      	beq.n	8004384 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437c:	f043 0208 	orr.w	r2, r3, #8
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438a:	f003 0320 	and.w	r3, r3, #32
 800438e:	2b00      	cmp	r3, #0
 8004390:	d005      	beq.n	800439e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004396:	f043 0220 	orr.w	r2, r3, #32
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a4:	f003 0310 	and.w	r3, r3, #16
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d005      	beq.n	80043b8 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b0:	f043 0210 	orr.w	r2, r3, #16
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f240 523a 	movw	r2, #1338	; 0x53a
 80043c0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80043d0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f002 f81e 	bl	8006418 <SDMMC_CmdStopTransfer>
 80043dc:	4602      	mov	r2, r0
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00a      	beq.n	8004408 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f857 	bl	80044b4 <HAL_SD_ErrorCallback>
}
 8004406:	e04a      	b.n	800449e <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440e:	2b00      	cmp	r3, #0
 8004410:	d045      	beq.n	800449e <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f003 0310 	and.w	r3, r3, #16
 8004418:	2b00      	cmp	r3, #0
 800441a:	d104      	bne.n	8004426 <HAL_SD_IRQHandler+0x25e>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f003 0320 	and.w	r3, r3, #32
 8004422:	2b00      	cmp	r3, #0
 8004424:	d011      	beq.n	800444a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442a:	4a20      	ldr	r2, [pc, #128]	; (80044ac <HAL_SD_IRQHandler+0x2e4>)
 800442c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004432:	4618      	mov	r0, r3
 8004434:	f7fd fd70 	bl	8001f18 <HAL_DMA_Abort_IT>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d02f      	beq.n	800449e <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004442:	4618      	mov	r0, r3
 8004444:	f000 fb6a 	bl	8004b1c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004448:	e029      	b.n	800449e <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b00      	cmp	r3, #0
 8004452:	d104      	bne.n	800445e <HAL_SD_IRQHandler+0x296>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d011      	beq.n	8004482 <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	4a13      	ldr	r2, [pc, #76]	; (80044b0 <HAL_SD_IRQHandler+0x2e8>)
 8004464:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	4618      	mov	r0, r3
 800446c:	f7fd fd54 	bl	8001f18 <HAL_DMA_Abort_IT>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d013      	beq.n	800449e <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	4618      	mov	r0, r3
 800447c:	f000 fb85 	bl	8004b8a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004480:	e00d      	b.n	800449e <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f002 fef0 	bl	800727c <HAL_SD_AbortCallback>
}
 800449c:	e7ff      	b.n	800449e <HAL_SD_IRQHandler+0x2d6>
 800449e:	bf00      	nop
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	ffff3ec5 	.word	0xffff3ec5
 80044ac:	08004b1d 	.word	0x08004b1d
 80044b0:	08004b8b 	.word	0x08004b8b

080044b4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044d6:	0f9b      	lsrs	r3, r3, #30
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044e2:	0e9b      	lsrs	r3, r3, #26
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044f4:	0e1b      	lsrs	r3, r3, #24
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	f003 0303 	and.w	r3, r3, #3
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004506:	0c1b      	lsrs	r3, r3, #16
 8004508:	b2da      	uxtb	r2, r3
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004512:	0a1b      	lsrs	r3, r3, #8
 8004514:	b2da      	uxtb	r2, r3
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800451e:	b2da      	uxtb	r2, r3
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004528:	0d1b      	lsrs	r3, r3, #20
 800452a:	b29a      	uxth	r2, r3
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004534:	0c1b      	lsrs	r3, r3, #16
 8004536:	b2db      	uxtb	r3, r3
 8004538:	f003 030f 	and.w	r3, r3, #15
 800453c:	b2da      	uxtb	r2, r3
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004546:	0bdb      	lsrs	r3, r3, #15
 8004548:	b2db      	uxtb	r3, r3
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	b2da      	uxtb	r2, r3
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004558:	0b9b      	lsrs	r3, r3, #14
 800455a:	b2db      	uxtb	r3, r3
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	b2da      	uxtb	r2, r3
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800456a:	0b5b      	lsrs	r3, r3, #13
 800456c:	b2db      	uxtb	r3, r3
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	b2da      	uxtb	r2, r3
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800457c:	0b1b      	lsrs	r3, r3, #12
 800457e:	b2db      	uxtb	r3, r3
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	b2da      	uxtb	r2, r3
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2200      	movs	r2, #0
 800458e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004594:	2b00      	cmp	r3, #0
 8004596:	d163      	bne.n	8004660 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800459c:	009a      	lsls	r2, r3, #2
 800459e:	f640 73fc 	movw	r3, #4092	; 0xffc
 80045a2:	4013      	ands	r3, r2
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80045a8:	0f92      	lsrs	r2, r2, #30
 80045aa:	431a      	orrs	r2, r3
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045b4:	0edb      	lsrs	r3, r3, #27
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045c6:	0e1b      	lsrs	r3, r3, #24
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045d8:	0d5b      	lsrs	r3, r3, #21
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ea:	0c9b      	lsrs	r3, r3, #18
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045fc:	0bdb      	lsrs	r3, r3, #15
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	b2da      	uxtb	r2, r3
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	7e1b      	ldrb	r3, [r3, #24]
 8004618:	b2db      	uxtb	r3, r3
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	3302      	adds	r3, #2
 8004620:	2201      	movs	r2, #1
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800462a:	fb02 f203 	mul.w	r2, r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	7a1b      	ldrb	r3, [r3, #8]
 8004636:	b2db      	uxtb	r3, r3
 8004638:	f003 030f 	and.w	r3, r3, #15
 800463c:	2201      	movs	r2, #1
 800463e:	409a      	lsls	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800464c:	0a52      	lsrs	r2, r2, #9
 800464e:	fb02 f203 	mul.w	r2, r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800465c:	661a      	str	r2, [r3, #96]	; 0x60
 800465e:	e031      	b.n	80046c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004664:	2b01      	cmp	r3, #1
 8004666:	d11d      	bne.n	80046a4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800466c:	041b      	lsls	r3, r3, #16
 800466e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004676:	0c1b      	lsrs	r3, r3, #16
 8004678:	431a      	orrs	r2, r3
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	3301      	adds	r3, #1
 8004684:	029a      	lsls	r2, r3, #10
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004698:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	661a      	str	r2, [r3, #96]	; 0x60
 80046a2:	e00f      	b.n	80046c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a58      	ldr	r2, [pc, #352]	; (800480c <HAL_SD_GetCardCSD+0x344>)
 80046aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e09d      	b.n	8004800 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046c8:	0b9b      	lsrs	r3, r3, #14
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046da:	09db      	lsrs	r3, r3, #7
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fc:	0fdb      	lsrs	r3, r3, #31
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004708:	0f5b      	lsrs	r3, r3, #29
 800470a:	b2db      	uxtb	r3, r3
 800470c:	f003 0303 	and.w	r3, r3, #3
 8004710:	b2da      	uxtb	r2, r3
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471a:	0e9b      	lsrs	r3, r3, #26
 800471c:	b2db      	uxtb	r3, r3
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	b2da      	uxtb	r2, r3
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472c:	0d9b      	lsrs	r3, r3, #22
 800472e:	b2db      	uxtb	r3, r3
 8004730:	f003 030f 	and.w	r3, r3, #15
 8004734:	b2da      	uxtb	r2, r3
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473e:	0d5b      	lsrs	r3, r3, #21
 8004740:	b2db      	uxtb	r3, r3
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	b2da      	uxtb	r2, r3
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475a:	0c1b      	lsrs	r3, r3, #16
 800475c:	b2db      	uxtb	r3, r3
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	b2da      	uxtb	r2, r3
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476e:	0bdb      	lsrs	r3, r3, #15
 8004770:	b2db      	uxtb	r3, r3
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	b2da      	uxtb	r2, r3
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004782:	0b9b      	lsrs	r3, r3, #14
 8004784:	b2db      	uxtb	r3, r3
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	b2da      	uxtb	r2, r3
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004796:	0b5b      	lsrs	r3, r3, #13
 8004798:	b2db      	uxtb	r3, r3
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047aa:	0b1b      	lsrs	r3, r3, #12
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047be:	0a9b      	lsrs	r3, r3, #10
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d2:	0a1b      	lsrs	r3, r3, #8
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e6:	085b      	lsrs	r3, r3, #1
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr
 800480c:	004005ff 	.word	0x004005ff

08004810 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004868:	b5b0      	push	{r4, r5, r7, lr}
 800486a:	b08e      	sub	sp, #56	; 0x38
 800486c:	af04      	add	r7, sp, #16
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2203      	movs	r2, #3
 800487c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004884:	2b03      	cmp	r3, #3
 8004886:	d02e      	beq.n	80048e6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800488e:	d106      	bne.n	800489e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	639a      	str	r2, [r3, #56]	; 0x38
 800489c:	e029      	b.n	80048f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048a4:	d10a      	bne.n	80048bc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 fb28 	bl	8004efc <SD_WideBus_Enable>
 80048ac:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	431a      	orrs	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	639a      	str	r2, [r3, #56]	; 0x38
 80048ba:	e01a      	b.n	80048f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10a      	bne.n	80048d8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fb65 	bl	8004f92 <SD_WideBus_Disable>
 80048c8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048ce:	6a3b      	ldr	r3, [r7, #32]
 80048d0:	431a      	orrs	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	639a      	str	r2, [r3, #56]	; 0x38
 80048d6:	e00c      	b.n	80048f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	639a      	str	r2, [r3, #56]	; 0x38
 80048e4:	e005      	b.n	80048f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ea:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00b      	beq.n	8004912 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a26      	ldr	r2, [pc, #152]	; (8004998 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004900:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004910:	e01f      	b.n	8004952 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681d      	ldr	r5, [r3, #0]
 8004938:	466c      	mov	r4, sp
 800493a:	f107 0314 	add.w	r3, r7, #20
 800493e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004942:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004946:	f107 0308 	add.w	r3, r7, #8
 800494a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800494c:	4628      	mov	r0, r5
 800494e:	f001 fbdb 	bl	8006108 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f44f 7100 	mov.w	r1, #512	; 0x200
 800495a:	4618      	mov	r0, r3
 800495c:	f001 fcb2 	bl	80062c4 <SDMMC_CmdBlockLength>
 8004960:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00c      	beq.n	8004982 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a0a      	ldr	r2, [pc, #40]	; (8004998 <HAL_SD_ConfigWideBusOperation+0x130>)
 800496e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800498a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800498e:	4618      	mov	r0, r3
 8004990:	3728      	adds	r7, #40	; 0x28
 8004992:	46bd      	mov	sp, r7
 8004994:	bdb0      	pop	{r4, r5, r7, pc}
 8004996:	bf00      	nop
 8004998:	004005ff 	.word	0x004005ff

0800499c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80049a4:	2300      	movs	r3, #0
 80049a6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80049a8:	f107 030c 	add.w	r3, r7, #12
 80049ac:	4619      	mov	r1, r3
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fa7c 	bl	8004eac <SD_SendStatus>
 80049b4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d005      	beq.n	80049c8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	0a5b      	lsrs	r3, r3, #9
 80049cc:	f003 030f 	and.w	r3, r3, #15
 80049d0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80049d2:	693b      	ldr	r3, [r7, #16]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049f8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80049fa:	bf00      	nop
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b084      	sub	sp, #16
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a12:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a18:	2b82      	cmp	r3, #130	; 0x82
 8004a1a:	d111      	bne.n	8004a40 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f001 fcf9 	bl	8006418 <SDMMC_CmdStopTransfer>
 8004a26:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d008      	beq.n	8004a40 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	431a      	orrs	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f7ff fd3a 	bl	80044b4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0208 	bic.w	r2, r2, #8
 8004a4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f240 523a 	movw	r2, #1338	; 0x53a
 8004a58:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f002 fc1b 	bl	80072a4 <HAL_SD_RxCpltCallback>
#endif
}
 8004a6e:	bf00      	nop
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a84:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7fd fbf2 	bl	8002270 <HAL_DMA_GetError>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d03e      	beq.n	8004b10 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a98:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d002      	beq.n	8004aae <SD_DMAError+0x36>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d12d      	bne.n	8004b0a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a19      	ldr	r2, [pc, #100]	; (8004b18 <SD_DMAError+0xa0>)
 8004ab4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004ac4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004ad2:	6978      	ldr	r0, [r7, #20]
 8004ad4:	f7ff ff62 	bl	800499c <HAL_SD_GetCardState>
 8004ad8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b06      	cmp	r3, #6
 8004ade:	d002      	beq.n	8004ae6 <SD_DMAError+0x6e>
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2b05      	cmp	r3, #5
 8004ae4:	d10a      	bne.n	8004afc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f001 fc94 	bl	8006418 <SDMMC_CmdStopTransfer>
 8004af0:	4602      	mov	r2, r0
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af6:	431a      	orrs	r2, r3
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	2200      	movs	r2, #0
 8004b08:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004b0a:	6978      	ldr	r0, [r7, #20]
 8004b0c:	f7ff fcd2 	bl	80044b4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004b10:	bf00      	nop
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	004005ff 	.word	0x004005ff

08004b1c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b28:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004b32:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f7ff ff31 	bl	800499c <HAL_SD_GetCardState>
 8004b3a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	2b06      	cmp	r3, #6
 8004b4e:	d002      	beq.n	8004b56 <SD_DMATxAbort+0x3a>
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2b05      	cmp	r3, #5
 8004b54:	d10a      	bne.n	8004b6c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f001 fc5c 	bl	8006418 <SDMMC_CmdStopTransfer>
 8004b60:	4602      	mov	r2, r0
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b66:	431a      	orrs	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d103      	bne.n	8004b7c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f002 fb81 	bl	800727c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004b7a:	e002      	b.n	8004b82 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f7ff fc99 	bl	80044b4 <HAL_SD_ErrorCallback>
}
 8004b82:	bf00      	nop
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b084      	sub	sp, #16
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b96:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004ba0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f7ff fefa 	bl	800499c <HAL_SD_GetCardState>
 8004ba8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b06      	cmp	r3, #6
 8004bbc:	d002      	beq.n	8004bc4 <SD_DMARxAbort+0x3a>
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	2b05      	cmp	r3, #5
 8004bc2:	d10a      	bne.n	8004bda <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f001 fc25 	bl	8006418 <SDMMC_CmdStopTransfer>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d103      	bne.n	8004bea <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f002 fb4a 	bl	800727c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004be8:	e002      	b.n	8004bf0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f7ff fc62 	bl	80044b4 <HAL_SD_ErrorCallback>
}
 8004bf0:	bf00      	nop
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004bf8:	b5b0      	push	{r4, r5, r7, lr}
 8004bfa:	b094      	sub	sp, #80	; 0x50
 8004bfc:	af04      	add	r7, sp, #16
 8004bfe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004c00:	2301      	movs	r3, #1
 8004c02:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f001 fad6 	bl	80061ba <SDMMC_GetPowerState>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d102      	bne.n	8004c1a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004c14:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004c18:	e0b6      	b.n	8004d88 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1e:	2b03      	cmp	r3, #3
 8004c20:	d02f      	beq.n	8004c82 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f001 fd01 	bl	800662e <SDMMC_CmdSendCID>
 8004c2c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <SD_InitCard+0x40>
    {
      return errorstate;
 8004c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c36:	e0a7      	b.n	8004d88 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f001 fb01 	bl	8006246 <SDMMC_GetResponse>
 8004c44:	4602      	mov	r2, r0
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2104      	movs	r1, #4
 8004c50:	4618      	mov	r0, r3
 8004c52:	f001 faf8 	bl	8006246 <SDMMC_GetResponse>
 8004c56:	4602      	mov	r2, r0
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2108      	movs	r1, #8
 8004c62:	4618      	mov	r0, r3
 8004c64:	f001 faef 	bl	8006246 <SDMMC_GetResponse>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	210c      	movs	r1, #12
 8004c74:	4618      	mov	r0, r3
 8004c76:	f001 fae6 	bl	8006246 <SDMMC_GetResponse>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c86:	2b03      	cmp	r3, #3
 8004c88:	d00d      	beq.n	8004ca6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f107 020e 	add.w	r2, r7, #14
 8004c92:	4611      	mov	r1, r2
 8004c94:	4618      	mov	r0, r3
 8004c96:	f001 fd07 	bl	80066a8 <SDMMC_CmdSetRelAdd>
 8004c9a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <SD_InitCard+0xae>
    {
      return errorstate;
 8004ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ca4:	e070      	b.n	8004d88 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004caa:	2b03      	cmp	r3, #3
 8004cac:	d036      	beq.n	8004d1c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004cae:	89fb      	ldrh	r3, [r7, #14]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cbe:	041b      	lsls	r3, r3, #16
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	4610      	mov	r0, r2
 8004cc4:	f001 fcd1 	bl	800666a <SDMMC_CmdSendCSD>
 8004cc8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd2:	e059      	b.n	8004d88 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2100      	movs	r1, #0
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f001 fab3 	bl	8006246 <SDMMC_GetResponse>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2104      	movs	r1, #4
 8004cec:	4618      	mov	r0, r3
 8004cee:	f001 faaa 	bl	8006246 <SDMMC_GetResponse>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2108      	movs	r1, #8
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f001 faa1 	bl	8006246 <SDMMC_GetResponse>
 8004d04:	4602      	mov	r2, r0
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	210c      	movs	r1, #12
 8004d10:	4618      	mov	r0, r3
 8004d12:	f001 fa98 	bl	8006246 <SDMMC_GetResponse>
 8004d16:	4602      	mov	r2, r0
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2104      	movs	r1, #4
 8004d22:	4618      	mov	r0, r3
 8004d24:	f001 fa8f 	bl	8006246 <SDMMC_GetResponse>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	0d1a      	lsrs	r2, r3, #20
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004d30:	f107 0310 	add.w	r3, r7, #16
 8004d34:	4619      	mov	r1, r3
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7ff fbc6 	bl	80044c8 <HAL_SD_GetCardCSD>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004d46:	e01f      	b.n	8004d88 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6819      	ldr	r1, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d50:	041b      	lsls	r3, r3, #16
 8004d52:	461a      	mov	r2, r3
 8004d54:	f04f 0300 	mov.w	r3, #0
 8004d58:	4608      	mov	r0, r1
 8004d5a:	f001 fb7f 	bl	800645c <SDMMC_CmdSelDesel>
 8004d5e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <SD_InitCard+0x172>
  {
    return errorstate;
 8004d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d68:	e00e      	b.n	8004d88 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681d      	ldr	r5, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	466c      	mov	r4, sp
 8004d72:	f103 0210 	add.w	r2, r3, #16
 8004d76:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d80:	4628      	mov	r0, r5
 8004d82:	f001 f9c1 	bl	8006108 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3740      	adds	r7, #64	; 0x40
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bdb0      	pop	{r4, r5, r7, pc}

08004d90 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	2300      	movs	r3, #0
 8004da2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f001 fb7a 	bl	80064a2 <SDMMC_CmdGoIdleState>
 8004dae:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <SD_PowerON+0x2a>
  {
    return errorstate;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	e072      	b.n	8004ea0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f001 fb8d 	bl	80064de <SDMMC_CmdOperCond>
 8004dc4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00d      	beq.n	8004de8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f001 fb63 	bl	80064a2 <SDMMC_CmdGoIdleState>
 8004ddc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d004      	beq.n	8004dee <SD_PowerON+0x5e>
    {
      return errorstate;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	e05b      	b.n	8004ea0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d137      	bne.n	8004e66 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f001 fb8d 	bl	800651c <SDMMC_CmdAppCommand>
 8004e02:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d02d      	beq.n	8004e66 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004e0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004e0e:	e047      	b.n	8004ea0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2100      	movs	r1, #0
 8004e16:	4618      	mov	r0, r3
 8004e18:	f001 fb80 	bl	800651c <SDMMC_CmdAppCommand>
 8004e1c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d001      	beq.n	8004e28 <SD_PowerON+0x98>
    {
      return errorstate;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	e03b      	b.n	8004ea0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	491e      	ldr	r1, [pc, #120]	; (8004ea8 <SD_PowerON+0x118>)
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f001 fb96 	bl	8006560 <SDMMC_CmdAppOperCommand>
 8004e34:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d002      	beq.n	8004e42 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004e3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004e40:	e02e      	b.n	8004ea0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2100      	movs	r1, #0
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f001 f9fc 	bl	8006246 <SDMMC_GetResponse>
 8004e4e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	0fdb      	lsrs	r3, r3, #31
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d101      	bne.n	8004e5c <SD_PowerON+0xcc>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e000      	b.n	8004e5e <SD_PowerON+0xce>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	613b      	str	r3, [r7, #16]

    count++;
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	3301      	adds	r3, #1
 8004e64:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d802      	bhi.n	8004e76 <SD_PowerON+0xe6>
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0cc      	beq.n	8004e10 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d902      	bls.n	8004e86 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004e80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e84:	e00c      	b.n	8004ea0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d003      	beq.n	8004e98 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	645a      	str	r2, [r3, #68]	; 0x44
 8004e96:	e002      	b.n	8004e9e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	c1100000 	.word	0xc1100000

08004eac <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d102      	bne.n	8004ec2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004ebc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ec0:	e018      	b.n	8004ef4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eca:	041b      	lsls	r3, r3, #16
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4610      	mov	r0, r2
 8004ed0:	f001 fc0b 	bl	80066ea <SDMMC_CmdSendStatus>
 8004ed4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	e009      	b.n	8004ef4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f001 f9ad 	bl	8006246 <SDMMC_GetResponse>
 8004eec:	4602      	mov	r2, r0
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004f04:	2300      	movs	r3, #0
 8004f06:	60fb      	str	r3, [r7, #12]
 8004f08:	2300      	movs	r3, #0
 8004f0a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2100      	movs	r1, #0
 8004f12:	4618      	mov	r0, r3
 8004f14:	f001 f997 	bl	8006246 <SDMMC_GetResponse>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f22:	d102      	bne.n	8004f2a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004f24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f28:	e02f      	b.n	8004f8a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004f2a:	f107 030c 	add.w	r3, r7, #12
 8004f2e:	4619      	mov	r1, r3
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f879 	bl	8005028 <SD_FindSCR>
 8004f36:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	e023      	b.n	8004f8a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d01c      	beq.n	8004f86 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f54:	041b      	lsls	r3, r3, #16
 8004f56:	4619      	mov	r1, r3
 8004f58:	4610      	mov	r0, r2
 8004f5a:	f001 fadf 	bl	800651c <SDMMC_CmdAppCommand>
 8004f5e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	e00f      	b.n	8004f8a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2102      	movs	r1, #2
 8004f70:	4618      	mov	r0, r3
 8004f72:	f001 fb19 	bl	80065a8 <SDMMC_CmdBusWidth>
 8004f76:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	e003      	b.n	8004f8a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004f82:	2300      	movs	r3, #0
 8004f84:	e001      	b.n	8004f8a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004f86:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b086      	sub	sp, #24
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60fb      	str	r3, [r7, #12]
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f001 f94c 	bl	8006246 <SDMMC_GetResponse>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fb8:	d102      	bne.n	8004fc0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004fba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004fbe:	e02f      	b.n	8005020 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004fc0:	f107 030c 	add.w	r3, r7, #12
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f82e 	bl	8005028 <SD_FindSCR>
 8004fcc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	e023      	b.n	8005020 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d01c      	beq.n	800501c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fea:	041b      	lsls	r3, r3, #16
 8004fec:	4619      	mov	r1, r3
 8004fee:	4610      	mov	r0, r2
 8004ff0:	f001 fa94 	bl	800651c <SDMMC_CmdAppCommand>
 8004ff4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	e00f      	b.n	8005020 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2100      	movs	r1, #0
 8005006:	4618      	mov	r0, r3
 8005008:	f001 face 	bl	80065a8 <SDMMC_CmdBusWidth>
 800500c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	e003      	b.n	8005020 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005018:	2300      	movs	r3, #0
 800501a:	e001      	b.n	8005020 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800501c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005028:	b590      	push	{r4, r7, lr}
 800502a:	b08f      	sub	sp, #60	; 0x3c
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005032:	f7fc f8ab 	bl	800118c <HAL_GetTick>
 8005036:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800503c:	2300      	movs	r3, #0
 800503e:	60bb      	str	r3, [r7, #8]
 8005040:	2300      	movs	r3, #0
 8005042:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2108      	movs	r1, #8
 800504e:	4618      	mov	r0, r3
 8005050:	f001 f938 	bl	80062c4 <SDMMC_CmdBlockLength>
 8005054:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005058:	2b00      	cmp	r3, #0
 800505a:	d001      	beq.n	8005060 <SD_FindSCR+0x38>
  {
    return errorstate;
 800505c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505e:	e0b2      	b.n	80051c6 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005068:	041b      	lsls	r3, r3, #16
 800506a:	4619      	mov	r1, r3
 800506c:	4610      	mov	r0, r2
 800506e:	f001 fa55 	bl	800651c <SDMMC_CmdAppCommand>
 8005072:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <SD_FindSCR+0x56>
  {
    return errorstate;
 800507a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507c:	e0a3      	b.n	80051c6 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800507e:	f04f 33ff 	mov.w	r3, #4294967295
 8005082:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005084:	2308      	movs	r3, #8
 8005086:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005088:	2330      	movs	r3, #48	; 0x30
 800508a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800508c:	2302      	movs	r3, #2
 800508e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005090:	2300      	movs	r3, #0
 8005092:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005094:	2301      	movs	r3, #1
 8005096:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f107 0210 	add.w	r2, r7, #16
 80050a0:	4611      	mov	r1, r2
 80050a2:	4618      	mov	r0, r3
 80050a4:	f001 f8e2 	bl	800626c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f001 fa9d 	bl	80065ec <SDMMC_CmdSendSCR>
 80050b2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80050b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d02a      	beq.n	8005110 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80050ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050bc:	e083      	b.n	80051c6 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00f      	beq.n	80050ec <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6819      	ldr	r1, [r3, #0]
 80050d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	f107 0208 	add.w	r2, r7, #8
 80050d8:	18d4      	adds	r4, r2, r3
 80050da:	4608      	mov	r0, r1
 80050dc:	f001 f840 	bl	8006160 <SDMMC_ReadFIFO>
 80050e0:	4603      	mov	r3, r0
 80050e2:	6023      	str	r3, [r4, #0]
      index++;
 80050e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e6:	3301      	adds	r3, #1
 80050e8:	637b      	str	r3, [r7, #52]	; 0x34
 80050ea:	e006      	b.n	80050fa <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d012      	beq.n	8005120 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80050fa:	f7fc f847 	bl	800118c <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005108:	d102      	bne.n	8005110 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800510a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800510e:	e05a      	b.n	80051c6 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005116:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800511a:	2b00      	cmp	r3, #0
 800511c:	d0cf      	beq.n	80050be <SD_FindSCR+0x96>
 800511e:	e000      	b.n	8005122 <SD_FindSCR+0xfa>
      break;
 8005120:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005128:	f003 0308 	and.w	r3, r3, #8
 800512c:	2b00      	cmp	r3, #0
 800512e:	d005      	beq.n	800513c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2208      	movs	r2, #8
 8005136:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005138:	2308      	movs	r3, #8
 800513a:	e044      	b.n	80051c6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d005      	beq.n	8005156 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2202      	movs	r2, #2
 8005150:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005152:	2302      	movs	r3, #2
 8005154:	e037      	b.n	80051c6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800515c:	f003 0320 	and.w	r3, r3, #32
 8005160:	2b00      	cmp	r3, #0
 8005162:	d005      	beq.n	8005170 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2220      	movs	r2, #32
 800516a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800516c:	2320      	movs	r3, #32
 800516e:	e02a      	b.n	80051c6 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f240 523a 	movw	r2, #1338	; 0x53a
 8005178:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	061a      	lsls	r2, r3, #24
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	021b      	lsls	r3, r3, #8
 8005182:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005186:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	0a1b      	lsrs	r3, r3, #8
 800518c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005190:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	0e1b      	lsrs	r3, r3, #24
 8005196:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519a:	601a      	str	r2, [r3, #0]
    scr++;
 800519c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519e:	3304      	adds	r3, #4
 80051a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	061a      	lsls	r2, r3, #24
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	021b      	lsls	r3, r3, #8
 80051aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051ae:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	0a1b      	lsrs	r3, r3, #8
 80051b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80051b8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	0e1b      	lsrs	r3, r3, #24
 80051be:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80051c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c2:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	373c      	adds	r7, #60	; 0x3c
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd90      	pop	{r4, r7, pc}

080051ce <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b086      	sub	sp, #24
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051da:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d03f      	beq.n	8005268 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80051e8:	2300      	movs	r3, #0
 80051ea:	617b      	str	r3, [r7, #20]
 80051ec:	e033      	b.n	8005256 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 ffb4 	bl	8006160 <SDMMC_ReadFIFO>
 80051f8:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	3301      	adds	r3, #1
 8005206:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	3b01      	subs	r3, #1
 800520c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	0a1b      	lsrs	r3, r3, #8
 8005212:	b2da      	uxtb	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	3301      	adds	r3, #1
 800521c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	3b01      	subs	r3, #1
 8005222:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	0c1b      	lsrs	r3, r3, #16
 8005228:	b2da      	uxtb	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	3301      	adds	r3, #1
 8005232:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	3b01      	subs	r3, #1
 8005238:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	0e1b      	lsrs	r3, r3, #24
 800523e:	b2da      	uxtb	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	3301      	adds	r3, #1
 8005248:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	3b01      	subs	r3, #1
 800524e:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	3301      	adds	r3, #1
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2b07      	cmp	r3, #7
 800525a:	d9c8      	bls.n	80051ee <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005268:	bf00      	nop
 800526a:	3718      	adds	r7, #24
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d043      	beq.n	8005312 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800528a:	2300      	movs	r3, #0
 800528c:	617b      	str	r3, [r7, #20]
 800528e:	e037      	b.n	8005300 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	3301      	adds	r3, #1
 800529a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	3b01      	subs	r3, #1
 80052a0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	021a      	lsls	r2, r3, #8
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60bb      	str	r3, [r7, #8]
      tmp++;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	3301      	adds	r3, #1
 80052b2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	3b01      	subs	r3, #1
 80052b8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	041a      	lsls	r2, r3, #16
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	3301      	adds	r3, #1
 80052ca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	3b01      	subs	r3, #1
 80052d0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	061a      	lsls	r2, r3, #24
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60bb      	str	r3, [r7, #8]
      tmp++;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	3301      	adds	r3, #1
 80052e2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	3b01      	subs	r3, #1
 80052e8:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f107 0208 	add.w	r2, r7, #8
 80052f2:	4611      	mov	r1, r2
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 ff40 	bl	800617a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	3301      	adds	r3, #1
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	2b07      	cmp	r3, #7
 8005304:	d9c4      	bls.n	8005290 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005312:	bf00      	nop
 8005314:	3718      	adds	r7, #24
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b082      	sub	sp, #8
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e049      	b.n	80053c0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	d106      	bne.n	8005346 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f841 	bl	80053c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2202      	movs	r2, #2
 800534a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	3304      	adds	r3, #4
 8005356:	4619      	mov	r1, r3
 8005358:	4610      	mov	r0, r2
 800535a:	f000 f9ff 	bl	800575c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d001      	beq.n	80053f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e054      	b.n	800549e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 0201 	orr.w	r2, r2, #1
 800540a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a26      	ldr	r2, [pc, #152]	; (80054ac <HAL_TIM_Base_Start_IT+0xd0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d022      	beq.n	800545c <HAL_TIM_Base_Start_IT+0x80>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541e:	d01d      	beq.n	800545c <HAL_TIM_Base_Start_IT+0x80>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a22      	ldr	r2, [pc, #136]	; (80054b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d018      	beq.n	800545c <HAL_TIM_Base_Start_IT+0x80>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a21      	ldr	r2, [pc, #132]	; (80054b4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d013      	beq.n	800545c <HAL_TIM_Base_Start_IT+0x80>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a1f      	ldr	r2, [pc, #124]	; (80054b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d00e      	beq.n	800545c <HAL_TIM_Base_Start_IT+0x80>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a1e      	ldr	r2, [pc, #120]	; (80054bc <HAL_TIM_Base_Start_IT+0xe0>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d009      	beq.n	800545c <HAL_TIM_Base_Start_IT+0x80>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a1c      	ldr	r2, [pc, #112]	; (80054c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d004      	beq.n	800545c <HAL_TIM_Base_Start_IT+0x80>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a1b      	ldr	r2, [pc, #108]	; (80054c4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d115      	bne.n	8005488 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	4b19      	ldr	r3, [pc, #100]	; (80054c8 <HAL_TIM_Base_Start_IT+0xec>)
 8005464:	4013      	ands	r3, r2
 8005466:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2b06      	cmp	r3, #6
 800546c:	d015      	beq.n	800549a <HAL_TIM_Base_Start_IT+0xbe>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005474:	d011      	beq.n	800549a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f042 0201 	orr.w	r2, r2, #1
 8005484:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005486:	e008      	b.n	800549a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0201 	orr.w	r2, r2, #1
 8005496:	601a      	str	r2, [r3, #0]
 8005498:	e000      	b.n	800549c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800549a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	40010000 	.word	0x40010000
 80054b0:	40000400 	.word	0x40000400
 80054b4:	40000800 	.word	0x40000800
 80054b8:	40000c00 	.word	0x40000c00
 80054bc:	40010400 	.word	0x40010400
 80054c0:	40014000 	.word	0x40014000
 80054c4:	40001800 	.word	0x40001800
 80054c8:	00010007 	.word	0x00010007

080054cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d122      	bne.n	8005528 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f003 0302 	and.w	r3, r3, #2
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d11b      	bne.n	8005528 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0202 	mvn.w	r2, #2
 80054f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	f003 0303 	and.w	r3, r3, #3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f905 	bl	800571e <HAL_TIM_IC_CaptureCallback>
 8005514:	e005      	b.n	8005522 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f8f7 	bl	800570a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f908 	bl	8005732 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f003 0304 	and.w	r3, r3, #4
 8005532:	2b04      	cmp	r3, #4
 8005534:	d122      	bne.n	800557c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f003 0304 	and.w	r3, r3, #4
 8005540:	2b04      	cmp	r3, #4
 8005542:	d11b      	bne.n	800557c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f06f 0204 	mvn.w	r2, #4
 800554c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2202      	movs	r2, #2
 8005552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f8db 	bl	800571e <HAL_TIM_IC_CaptureCallback>
 8005568:	e005      	b.n	8005576 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f8cd 	bl	800570a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f8de 	bl	8005732 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f003 0308 	and.w	r3, r3, #8
 8005586:	2b08      	cmp	r3, #8
 8005588:	d122      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f003 0308 	and.w	r3, r3, #8
 8005594:	2b08      	cmp	r3, #8
 8005596:	d11b      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f06f 0208 	mvn.w	r2, #8
 80055a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2204      	movs	r2, #4
 80055a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	f003 0303 	and.w	r3, r3, #3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f8b1 	bl	800571e <HAL_TIM_IC_CaptureCallback>
 80055bc:	e005      	b.n	80055ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f8a3 	bl	800570a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 f8b4 	bl	8005732 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f003 0310 	and.w	r3, r3, #16
 80055da:	2b10      	cmp	r3, #16
 80055dc:	d122      	bne.n	8005624 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f003 0310 	and.w	r3, r3, #16
 80055e8:	2b10      	cmp	r3, #16
 80055ea:	d11b      	bne.n	8005624 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f06f 0210 	mvn.w	r2, #16
 80055f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2208      	movs	r2, #8
 80055fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f887 	bl	800571e <HAL_TIM_IC_CaptureCallback>
 8005610:	e005      	b.n	800561e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f879 	bl	800570a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f88a 	bl	8005732 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b01      	cmp	r3, #1
 8005630:	d10e      	bne.n	8005650 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	2b01      	cmp	r3, #1
 800563e:	d107      	bne.n	8005650 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f06f 0201 	mvn.w	r2, #1
 8005648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7fb fa72 	bl	8000b34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800565a:	2b80      	cmp	r3, #128	; 0x80
 800565c:	d10e      	bne.n	800567c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005668:	2b80      	cmp	r3, #128	; 0x80
 800566a:	d107      	bne.n	800567c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f91a 	bl	80058b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800568a:	d10e      	bne.n	80056aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005696:	2b80      	cmp	r3, #128	; 0x80
 8005698:	d107      	bne.n	80056aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f90d 	bl	80058c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b4:	2b40      	cmp	r3, #64	; 0x40
 80056b6:	d10e      	bne.n	80056d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c2:	2b40      	cmp	r3, #64	; 0x40
 80056c4:	d107      	bne.n	80056d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f838 	bl	8005746 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	f003 0320 	and.w	r3, r3, #32
 80056e0:	2b20      	cmp	r3, #32
 80056e2:	d10e      	bne.n	8005702 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f003 0320 	and.w	r3, r3, #32
 80056ee:	2b20      	cmp	r3, #32
 80056f0:	d107      	bne.n	8005702 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f06f 0220 	mvn.w	r2, #32
 80056fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 f8cd 	bl	800589c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005702:	bf00      	nop
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800571e:	b480      	push	{r7}
 8005720:	b083      	sub	sp, #12
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005726:	bf00      	nop
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800573a:	bf00      	nop
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005746:	b480      	push	{r7}
 8005748:	b083      	sub	sp, #12
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800574e:	bf00      	nop
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
	...

0800575c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a40      	ldr	r2, [pc, #256]	; (8005870 <TIM_Base_SetConfig+0x114>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d013      	beq.n	800579c <TIM_Base_SetConfig+0x40>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800577a:	d00f      	beq.n	800579c <TIM_Base_SetConfig+0x40>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a3d      	ldr	r2, [pc, #244]	; (8005874 <TIM_Base_SetConfig+0x118>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d00b      	beq.n	800579c <TIM_Base_SetConfig+0x40>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a3c      	ldr	r2, [pc, #240]	; (8005878 <TIM_Base_SetConfig+0x11c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d007      	beq.n	800579c <TIM_Base_SetConfig+0x40>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a3b      	ldr	r2, [pc, #236]	; (800587c <TIM_Base_SetConfig+0x120>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d003      	beq.n	800579c <TIM_Base_SetConfig+0x40>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a3a      	ldr	r2, [pc, #232]	; (8005880 <TIM_Base_SetConfig+0x124>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d108      	bne.n	80057ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a2f      	ldr	r2, [pc, #188]	; (8005870 <TIM_Base_SetConfig+0x114>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d02b      	beq.n	800580e <TIM_Base_SetConfig+0xb2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057bc:	d027      	beq.n	800580e <TIM_Base_SetConfig+0xb2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a2c      	ldr	r2, [pc, #176]	; (8005874 <TIM_Base_SetConfig+0x118>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d023      	beq.n	800580e <TIM_Base_SetConfig+0xb2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a2b      	ldr	r2, [pc, #172]	; (8005878 <TIM_Base_SetConfig+0x11c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d01f      	beq.n	800580e <TIM_Base_SetConfig+0xb2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a2a      	ldr	r2, [pc, #168]	; (800587c <TIM_Base_SetConfig+0x120>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d01b      	beq.n	800580e <TIM_Base_SetConfig+0xb2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a29      	ldr	r2, [pc, #164]	; (8005880 <TIM_Base_SetConfig+0x124>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d017      	beq.n	800580e <TIM_Base_SetConfig+0xb2>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a28      	ldr	r2, [pc, #160]	; (8005884 <TIM_Base_SetConfig+0x128>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d013      	beq.n	800580e <TIM_Base_SetConfig+0xb2>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a27      	ldr	r2, [pc, #156]	; (8005888 <TIM_Base_SetConfig+0x12c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d00f      	beq.n	800580e <TIM_Base_SetConfig+0xb2>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a26      	ldr	r2, [pc, #152]	; (800588c <TIM_Base_SetConfig+0x130>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d00b      	beq.n	800580e <TIM_Base_SetConfig+0xb2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a25      	ldr	r2, [pc, #148]	; (8005890 <TIM_Base_SetConfig+0x134>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d007      	beq.n	800580e <TIM_Base_SetConfig+0xb2>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a24      	ldr	r2, [pc, #144]	; (8005894 <TIM_Base_SetConfig+0x138>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d003      	beq.n	800580e <TIM_Base_SetConfig+0xb2>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a23      	ldr	r2, [pc, #140]	; (8005898 <TIM_Base_SetConfig+0x13c>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d108      	bne.n	8005820 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	4313      	orrs	r3, r2
 800581e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	4313      	orrs	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	689a      	ldr	r2, [r3, #8]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a0a      	ldr	r2, [pc, #40]	; (8005870 <TIM_Base_SetConfig+0x114>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d003      	beq.n	8005854 <TIM_Base_SetConfig+0xf8>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a0c      	ldr	r2, [pc, #48]	; (8005880 <TIM_Base_SetConfig+0x124>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d103      	bne.n	800585c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	691a      	ldr	r2, [r3, #16]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	615a      	str	r2, [r3, #20]
}
 8005862:	bf00      	nop
 8005864:	3714      	adds	r7, #20
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	40010000 	.word	0x40010000
 8005874:	40000400 	.word	0x40000400
 8005878:	40000800 	.word	0x40000800
 800587c:	40000c00 	.word	0x40000c00
 8005880:	40010400 	.word	0x40010400
 8005884:	40014000 	.word	0x40014000
 8005888:	40014400 	.word	0x40014400
 800588c:	40014800 	.word	0x40014800
 8005890:	40001800 	.word	0x40001800
 8005894:	40001c00 	.word	0x40001c00
 8005898:	40002000 	.word	0x40002000

0800589c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e040      	b.n	800596c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d106      	bne.n	8005900 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7fb faa0 	bl	8000e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2224      	movs	r2, #36	; 0x24
 8005904:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 0201 	bic.w	r2, r2, #1
 8005914:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f82c 	bl	8005974 <UART_SetConfig>
 800591c:	4603      	mov	r3, r0
 800591e:	2b01      	cmp	r3, #1
 8005920:	d101      	bne.n	8005926 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e022      	b.n	800596c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	2b00      	cmp	r3, #0
 800592c:	d002      	beq.n	8005934 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fa82 	bl	8005e38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005942:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689a      	ldr	r2, [r3, #8]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005952:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0201 	orr.w	r2, r2, #1
 8005962:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 fb09 	bl	8005f7c <UART_CheckIdleState>
 800596a:	4603      	mov	r3, r0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3708      	adds	r7, #8
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b088      	sub	sp, #32
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800597c:	2300      	movs	r3, #0
 800597e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	431a      	orrs	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	431a      	orrs	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	69db      	ldr	r3, [r3, #28]
 8005994:	4313      	orrs	r3, r2
 8005996:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	4ba7      	ldr	r3, [pc, #668]	; (8005c3c <UART_SetConfig+0x2c8>)
 80059a0:	4013      	ands	r3, r2
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	6812      	ldr	r2, [r2, #0]
 80059a6:	6979      	ldr	r1, [r7, #20]
 80059a8:	430b      	orrs	r3, r1
 80059aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a95      	ldr	r2, [pc, #596]	; (8005c40 <UART_SetConfig+0x2cc>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d120      	bne.n	8005a32 <UART_SetConfig+0xbe>
 80059f0:	4b94      	ldr	r3, [pc, #592]	; (8005c44 <UART_SetConfig+0x2d0>)
 80059f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f6:	f003 0303 	and.w	r3, r3, #3
 80059fa:	2b03      	cmp	r3, #3
 80059fc:	d816      	bhi.n	8005a2c <UART_SetConfig+0xb8>
 80059fe:	a201      	add	r2, pc, #4	; (adr r2, 8005a04 <UART_SetConfig+0x90>)
 8005a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a04:	08005a15 	.word	0x08005a15
 8005a08:	08005a21 	.word	0x08005a21
 8005a0c:	08005a1b 	.word	0x08005a1b
 8005a10:	08005a27 	.word	0x08005a27
 8005a14:	2301      	movs	r3, #1
 8005a16:	77fb      	strb	r3, [r7, #31]
 8005a18:	e14f      	b.n	8005cba <UART_SetConfig+0x346>
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	77fb      	strb	r3, [r7, #31]
 8005a1e:	e14c      	b.n	8005cba <UART_SetConfig+0x346>
 8005a20:	2304      	movs	r3, #4
 8005a22:	77fb      	strb	r3, [r7, #31]
 8005a24:	e149      	b.n	8005cba <UART_SetConfig+0x346>
 8005a26:	2308      	movs	r3, #8
 8005a28:	77fb      	strb	r3, [r7, #31]
 8005a2a:	e146      	b.n	8005cba <UART_SetConfig+0x346>
 8005a2c:	2310      	movs	r3, #16
 8005a2e:	77fb      	strb	r3, [r7, #31]
 8005a30:	e143      	b.n	8005cba <UART_SetConfig+0x346>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a84      	ldr	r2, [pc, #528]	; (8005c48 <UART_SetConfig+0x2d4>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d132      	bne.n	8005aa2 <UART_SetConfig+0x12e>
 8005a3c:	4b81      	ldr	r3, [pc, #516]	; (8005c44 <UART_SetConfig+0x2d0>)
 8005a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a42:	f003 030c 	and.w	r3, r3, #12
 8005a46:	2b0c      	cmp	r3, #12
 8005a48:	d828      	bhi.n	8005a9c <UART_SetConfig+0x128>
 8005a4a:	a201      	add	r2, pc, #4	; (adr r2, 8005a50 <UART_SetConfig+0xdc>)
 8005a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a50:	08005a85 	.word	0x08005a85
 8005a54:	08005a9d 	.word	0x08005a9d
 8005a58:	08005a9d 	.word	0x08005a9d
 8005a5c:	08005a9d 	.word	0x08005a9d
 8005a60:	08005a91 	.word	0x08005a91
 8005a64:	08005a9d 	.word	0x08005a9d
 8005a68:	08005a9d 	.word	0x08005a9d
 8005a6c:	08005a9d 	.word	0x08005a9d
 8005a70:	08005a8b 	.word	0x08005a8b
 8005a74:	08005a9d 	.word	0x08005a9d
 8005a78:	08005a9d 	.word	0x08005a9d
 8005a7c:	08005a9d 	.word	0x08005a9d
 8005a80:	08005a97 	.word	0x08005a97
 8005a84:	2300      	movs	r3, #0
 8005a86:	77fb      	strb	r3, [r7, #31]
 8005a88:	e117      	b.n	8005cba <UART_SetConfig+0x346>
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	77fb      	strb	r3, [r7, #31]
 8005a8e:	e114      	b.n	8005cba <UART_SetConfig+0x346>
 8005a90:	2304      	movs	r3, #4
 8005a92:	77fb      	strb	r3, [r7, #31]
 8005a94:	e111      	b.n	8005cba <UART_SetConfig+0x346>
 8005a96:	2308      	movs	r3, #8
 8005a98:	77fb      	strb	r3, [r7, #31]
 8005a9a:	e10e      	b.n	8005cba <UART_SetConfig+0x346>
 8005a9c:	2310      	movs	r3, #16
 8005a9e:	77fb      	strb	r3, [r7, #31]
 8005aa0:	e10b      	b.n	8005cba <UART_SetConfig+0x346>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a69      	ldr	r2, [pc, #420]	; (8005c4c <UART_SetConfig+0x2d8>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d120      	bne.n	8005aee <UART_SetConfig+0x17a>
 8005aac:	4b65      	ldr	r3, [pc, #404]	; (8005c44 <UART_SetConfig+0x2d0>)
 8005aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ab6:	2b30      	cmp	r3, #48	; 0x30
 8005ab8:	d013      	beq.n	8005ae2 <UART_SetConfig+0x16e>
 8005aba:	2b30      	cmp	r3, #48	; 0x30
 8005abc:	d814      	bhi.n	8005ae8 <UART_SetConfig+0x174>
 8005abe:	2b20      	cmp	r3, #32
 8005ac0:	d009      	beq.n	8005ad6 <UART_SetConfig+0x162>
 8005ac2:	2b20      	cmp	r3, #32
 8005ac4:	d810      	bhi.n	8005ae8 <UART_SetConfig+0x174>
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d002      	beq.n	8005ad0 <UART_SetConfig+0x15c>
 8005aca:	2b10      	cmp	r3, #16
 8005acc:	d006      	beq.n	8005adc <UART_SetConfig+0x168>
 8005ace:	e00b      	b.n	8005ae8 <UART_SetConfig+0x174>
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	77fb      	strb	r3, [r7, #31]
 8005ad4:	e0f1      	b.n	8005cba <UART_SetConfig+0x346>
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	77fb      	strb	r3, [r7, #31]
 8005ada:	e0ee      	b.n	8005cba <UART_SetConfig+0x346>
 8005adc:	2304      	movs	r3, #4
 8005ade:	77fb      	strb	r3, [r7, #31]
 8005ae0:	e0eb      	b.n	8005cba <UART_SetConfig+0x346>
 8005ae2:	2308      	movs	r3, #8
 8005ae4:	77fb      	strb	r3, [r7, #31]
 8005ae6:	e0e8      	b.n	8005cba <UART_SetConfig+0x346>
 8005ae8:	2310      	movs	r3, #16
 8005aea:	77fb      	strb	r3, [r7, #31]
 8005aec:	e0e5      	b.n	8005cba <UART_SetConfig+0x346>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a57      	ldr	r2, [pc, #348]	; (8005c50 <UART_SetConfig+0x2dc>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d120      	bne.n	8005b3a <UART_SetConfig+0x1c6>
 8005af8:	4b52      	ldr	r3, [pc, #328]	; (8005c44 <UART_SetConfig+0x2d0>)
 8005afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005afe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b02:	2bc0      	cmp	r3, #192	; 0xc0
 8005b04:	d013      	beq.n	8005b2e <UART_SetConfig+0x1ba>
 8005b06:	2bc0      	cmp	r3, #192	; 0xc0
 8005b08:	d814      	bhi.n	8005b34 <UART_SetConfig+0x1c0>
 8005b0a:	2b80      	cmp	r3, #128	; 0x80
 8005b0c:	d009      	beq.n	8005b22 <UART_SetConfig+0x1ae>
 8005b0e:	2b80      	cmp	r3, #128	; 0x80
 8005b10:	d810      	bhi.n	8005b34 <UART_SetConfig+0x1c0>
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d002      	beq.n	8005b1c <UART_SetConfig+0x1a8>
 8005b16:	2b40      	cmp	r3, #64	; 0x40
 8005b18:	d006      	beq.n	8005b28 <UART_SetConfig+0x1b4>
 8005b1a:	e00b      	b.n	8005b34 <UART_SetConfig+0x1c0>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	77fb      	strb	r3, [r7, #31]
 8005b20:	e0cb      	b.n	8005cba <UART_SetConfig+0x346>
 8005b22:	2302      	movs	r3, #2
 8005b24:	77fb      	strb	r3, [r7, #31]
 8005b26:	e0c8      	b.n	8005cba <UART_SetConfig+0x346>
 8005b28:	2304      	movs	r3, #4
 8005b2a:	77fb      	strb	r3, [r7, #31]
 8005b2c:	e0c5      	b.n	8005cba <UART_SetConfig+0x346>
 8005b2e:	2308      	movs	r3, #8
 8005b30:	77fb      	strb	r3, [r7, #31]
 8005b32:	e0c2      	b.n	8005cba <UART_SetConfig+0x346>
 8005b34:	2310      	movs	r3, #16
 8005b36:	77fb      	strb	r3, [r7, #31]
 8005b38:	e0bf      	b.n	8005cba <UART_SetConfig+0x346>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a45      	ldr	r2, [pc, #276]	; (8005c54 <UART_SetConfig+0x2e0>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d125      	bne.n	8005b90 <UART_SetConfig+0x21c>
 8005b44:	4b3f      	ldr	r3, [pc, #252]	; (8005c44 <UART_SetConfig+0x2d0>)
 8005b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b52:	d017      	beq.n	8005b84 <UART_SetConfig+0x210>
 8005b54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b58:	d817      	bhi.n	8005b8a <UART_SetConfig+0x216>
 8005b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b5e:	d00b      	beq.n	8005b78 <UART_SetConfig+0x204>
 8005b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b64:	d811      	bhi.n	8005b8a <UART_SetConfig+0x216>
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d003      	beq.n	8005b72 <UART_SetConfig+0x1fe>
 8005b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b6e:	d006      	beq.n	8005b7e <UART_SetConfig+0x20a>
 8005b70:	e00b      	b.n	8005b8a <UART_SetConfig+0x216>
 8005b72:	2300      	movs	r3, #0
 8005b74:	77fb      	strb	r3, [r7, #31]
 8005b76:	e0a0      	b.n	8005cba <UART_SetConfig+0x346>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	77fb      	strb	r3, [r7, #31]
 8005b7c:	e09d      	b.n	8005cba <UART_SetConfig+0x346>
 8005b7e:	2304      	movs	r3, #4
 8005b80:	77fb      	strb	r3, [r7, #31]
 8005b82:	e09a      	b.n	8005cba <UART_SetConfig+0x346>
 8005b84:	2308      	movs	r3, #8
 8005b86:	77fb      	strb	r3, [r7, #31]
 8005b88:	e097      	b.n	8005cba <UART_SetConfig+0x346>
 8005b8a:	2310      	movs	r3, #16
 8005b8c:	77fb      	strb	r3, [r7, #31]
 8005b8e:	e094      	b.n	8005cba <UART_SetConfig+0x346>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a30      	ldr	r2, [pc, #192]	; (8005c58 <UART_SetConfig+0x2e4>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d125      	bne.n	8005be6 <UART_SetConfig+0x272>
 8005b9a:	4b2a      	ldr	r3, [pc, #168]	; (8005c44 <UART_SetConfig+0x2d0>)
 8005b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ba0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ba4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ba8:	d017      	beq.n	8005bda <UART_SetConfig+0x266>
 8005baa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bae:	d817      	bhi.n	8005be0 <UART_SetConfig+0x26c>
 8005bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bb4:	d00b      	beq.n	8005bce <UART_SetConfig+0x25a>
 8005bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bba:	d811      	bhi.n	8005be0 <UART_SetConfig+0x26c>
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d003      	beq.n	8005bc8 <UART_SetConfig+0x254>
 8005bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bc4:	d006      	beq.n	8005bd4 <UART_SetConfig+0x260>
 8005bc6:	e00b      	b.n	8005be0 <UART_SetConfig+0x26c>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	77fb      	strb	r3, [r7, #31]
 8005bcc:	e075      	b.n	8005cba <UART_SetConfig+0x346>
 8005bce:	2302      	movs	r3, #2
 8005bd0:	77fb      	strb	r3, [r7, #31]
 8005bd2:	e072      	b.n	8005cba <UART_SetConfig+0x346>
 8005bd4:	2304      	movs	r3, #4
 8005bd6:	77fb      	strb	r3, [r7, #31]
 8005bd8:	e06f      	b.n	8005cba <UART_SetConfig+0x346>
 8005bda:	2308      	movs	r3, #8
 8005bdc:	77fb      	strb	r3, [r7, #31]
 8005bde:	e06c      	b.n	8005cba <UART_SetConfig+0x346>
 8005be0:	2310      	movs	r3, #16
 8005be2:	77fb      	strb	r3, [r7, #31]
 8005be4:	e069      	b.n	8005cba <UART_SetConfig+0x346>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a1c      	ldr	r2, [pc, #112]	; (8005c5c <UART_SetConfig+0x2e8>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d137      	bne.n	8005c60 <UART_SetConfig+0x2ec>
 8005bf0:	4b14      	ldr	r3, [pc, #80]	; (8005c44 <UART_SetConfig+0x2d0>)
 8005bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005bfa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bfe:	d017      	beq.n	8005c30 <UART_SetConfig+0x2bc>
 8005c00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c04:	d817      	bhi.n	8005c36 <UART_SetConfig+0x2c2>
 8005c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c0a:	d00b      	beq.n	8005c24 <UART_SetConfig+0x2b0>
 8005c0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c10:	d811      	bhi.n	8005c36 <UART_SetConfig+0x2c2>
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <UART_SetConfig+0x2aa>
 8005c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c1a:	d006      	beq.n	8005c2a <UART_SetConfig+0x2b6>
 8005c1c:	e00b      	b.n	8005c36 <UART_SetConfig+0x2c2>
 8005c1e:	2300      	movs	r3, #0
 8005c20:	77fb      	strb	r3, [r7, #31]
 8005c22:	e04a      	b.n	8005cba <UART_SetConfig+0x346>
 8005c24:	2302      	movs	r3, #2
 8005c26:	77fb      	strb	r3, [r7, #31]
 8005c28:	e047      	b.n	8005cba <UART_SetConfig+0x346>
 8005c2a:	2304      	movs	r3, #4
 8005c2c:	77fb      	strb	r3, [r7, #31]
 8005c2e:	e044      	b.n	8005cba <UART_SetConfig+0x346>
 8005c30:	2308      	movs	r3, #8
 8005c32:	77fb      	strb	r3, [r7, #31]
 8005c34:	e041      	b.n	8005cba <UART_SetConfig+0x346>
 8005c36:	2310      	movs	r3, #16
 8005c38:	77fb      	strb	r3, [r7, #31]
 8005c3a:	e03e      	b.n	8005cba <UART_SetConfig+0x346>
 8005c3c:	efff69f3 	.word	0xefff69f3
 8005c40:	40011000 	.word	0x40011000
 8005c44:	40023800 	.word	0x40023800
 8005c48:	40004400 	.word	0x40004400
 8005c4c:	40004800 	.word	0x40004800
 8005c50:	40004c00 	.word	0x40004c00
 8005c54:	40005000 	.word	0x40005000
 8005c58:	40011400 	.word	0x40011400
 8005c5c:	40007800 	.word	0x40007800
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a71      	ldr	r2, [pc, #452]	; (8005e2c <UART_SetConfig+0x4b8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d125      	bne.n	8005cb6 <UART_SetConfig+0x342>
 8005c6a:	4b71      	ldr	r3, [pc, #452]	; (8005e30 <UART_SetConfig+0x4bc>)
 8005c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005c74:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c78:	d017      	beq.n	8005caa <UART_SetConfig+0x336>
 8005c7a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c7e:	d817      	bhi.n	8005cb0 <UART_SetConfig+0x33c>
 8005c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c84:	d00b      	beq.n	8005c9e <UART_SetConfig+0x32a>
 8005c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c8a:	d811      	bhi.n	8005cb0 <UART_SetConfig+0x33c>
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d003      	beq.n	8005c98 <UART_SetConfig+0x324>
 8005c90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c94:	d006      	beq.n	8005ca4 <UART_SetConfig+0x330>
 8005c96:	e00b      	b.n	8005cb0 <UART_SetConfig+0x33c>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	77fb      	strb	r3, [r7, #31]
 8005c9c:	e00d      	b.n	8005cba <UART_SetConfig+0x346>
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	77fb      	strb	r3, [r7, #31]
 8005ca2:	e00a      	b.n	8005cba <UART_SetConfig+0x346>
 8005ca4:	2304      	movs	r3, #4
 8005ca6:	77fb      	strb	r3, [r7, #31]
 8005ca8:	e007      	b.n	8005cba <UART_SetConfig+0x346>
 8005caa:	2308      	movs	r3, #8
 8005cac:	77fb      	strb	r3, [r7, #31]
 8005cae:	e004      	b.n	8005cba <UART_SetConfig+0x346>
 8005cb0:	2310      	movs	r3, #16
 8005cb2:	77fb      	strb	r3, [r7, #31]
 8005cb4:	e001      	b.n	8005cba <UART_SetConfig+0x346>
 8005cb6:	2310      	movs	r3, #16
 8005cb8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cc2:	d15b      	bne.n	8005d7c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005cc4:	7ffb      	ldrb	r3, [r7, #31]
 8005cc6:	2b08      	cmp	r3, #8
 8005cc8:	d827      	bhi.n	8005d1a <UART_SetConfig+0x3a6>
 8005cca:	a201      	add	r2, pc, #4	; (adr r2, 8005cd0 <UART_SetConfig+0x35c>)
 8005ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd0:	08005cf5 	.word	0x08005cf5
 8005cd4:	08005cfd 	.word	0x08005cfd
 8005cd8:	08005d05 	.word	0x08005d05
 8005cdc:	08005d1b 	.word	0x08005d1b
 8005ce0:	08005d0b 	.word	0x08005d0b
 8005ce4:	08005d1b 	.word	0x08005d1b
 8005ce8:	08005d1b 	.word	0x08005d1b
 8005cec:	08005d1b 	.word	0x08005d1b
 8005cf0:	08005d13 	.word	0x08005d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cf4:	f7fd fb68 	bl	80033c8 <HAL_RCC_GetPCLK1Freq>
 8005cf8:	61b8      	str	r0, [r7, #24]
        break;
 8005cfa:	e013      	b.n	8005d24 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cfc:	f7fd fb78 	bl	80033f0 <HAL_RCC_GetPCLK2Freq>
 8005d00:	61b8      	str	r0, [r7, #24]
        break;
 8005d02:	e00f      	b.n	8005d24 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d04:	4b4b      	ldr	r3, [pc, #300]	; (8005e34 <UART_SetConfig+0x4c0>)
 8005d06:	61bb      	str	r3, [r7, #24]
        break;
 8005d08:	e00c      	b.n	8005d24 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d0a:	f7fd fa6f 	bl	80031ec <HAL_RCC_GetSysClockFreq>
 8005d0e:	61b8      	str	r0, [r7, #24]
        break;
 8005d10:	e008      	b.n	8005d24 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d16:	61bb      	str	r3, [r7, #24]
        break;
 8005d18:	e004      	b.n	8005d24 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	77bb      	strb	r3, [r7, #30]
        break;
 8005d22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d074      	beq.n	8005e14 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	005a      	lsls	r2, r3, #1
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	085b      	lsrs	r3, r3, #1
 8005d34:	441a      	add	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	2b0f      	cmp	r3, #15
 8005d46:	d916      	bls.n	8005d76 <UART_SetConfig+0x402>
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d4e:	d212      	bcs.n	8005d76 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	f023 030f 	bic.w	r3, r3, #15
 8005d58:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	085b      	lsrs	r3, r3, #1
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	f003 0307 	and.w	r3, r3, #7
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	89fb      	ldrh	r3, [r7, #14]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	89fa      	ldrh	r2, [r7, #14]
 8005d72:	60da      	str	r2, [r3, #12]
 8005d74:	e04e      	b.n	8005e14 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	77bb      	strb	r3, [r7, #30]
 8005d7a:	e04b      	b.n	8005e14 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d7c:	7ffb      	ldrb	r3, [r7, #31]
 8005d7e:	2b08      	cmp	r3, #8
 8005d80:	d827      	bhi.n	8005dd2 <UART_SetConfig+0x45e>
 8005d82:	a201      	add	r2, pc, #4	; (adr r2, 8005d88 <UART_SetConfig+0x414>)
 8005d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d88:	08005dad 	.word	0x08005dad
 8005d8c:	08005db5 	.word	0x08005db5
 8005d90:	08005dbd 	.word	0x08005dbd
 8005d94:	08005dd3 	.word	0x08005dd3
 8005d98:	08005dc3 	.word	0x08005dc3
 8005d9c:	08005dd3 	.word	0x08005dd3
 8005da0:	08005dd3 	.word	0x08005dd3
 8005da4:	08005dd3 	.word	0x08005dd3
 8005da8:	08005dcb 	.word	0x08005dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dac:	f7fd fb0c 	bl	80033c8 <HAL_RCC_GetPCLK1Freq>
 8005db0:	61b8      	str	r0, [r7, #24]
        break;
 8005db2:	e013      	b.n	8005ddc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005db4:	f7fd fb1c 	bl	80033f0 <HAL_RCC_GetPCLK2Freq>
 8005db8:	61b8      	str	r0, [r7, #24]
        break;
 8005dba:	e00f      	b.n	8005ddc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dbc:	4b1d      	ldr	r3, [pc, #116]	; (8005e34 <UART_SetConfig+0x4c0>)
 8005dbe:	61bb      	str	r3, [r7, #24]
        break;
 8005dc0:	e00c      	b.n	8005ddc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dc2:	f7fd fa13 	bl	80031ec <HAL_RCC_GetSysClockFreq>
 8005dc6:	61b8      	str	r0, [r7, #24]
        break;
 8005dc8:	e008      	b.n	8005ddc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dce:	61bb      	str	r3, [r7, #24]
        break;
 8005dd0:	e004      	b.n	8005ddc <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	77bb      	strb	r3, [r7, #30]
        break;
 8005dda:	bf00      	nop
    }

    if (pclk != 0U)
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d018      	beq.n	8005e14 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	085a      	lsrs	r2, r3, #1
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	441a      	add	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	2b0f      	cmp	r3, #15
 8005dfc:	d908      	bls.n	8005e10 <UART_SetConfig+0x49c>
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e04:	d204      	bcs.n	8005e10 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	60da      	str	r2, [r3, #12]
 8005e0e:	e001      	b.n	8005e14 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005e20:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3720      	adds	r7, #32
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	40007c00 	.word	0x40007c00
 8005e30:	40023800 	.word	0x40023800
 8005e34:	00f42400 	.word	0x00f42400

08005e38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00a      	beq.n	8005e62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	f003 0304 	and.w	r3, r3, #4
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00a      	beq.n	8005ea6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eaa:	f003 0308 	and.w	r3, r3, #8
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00a      	beq.n	8005ec8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ecc:	f003 0310 	and.w	r3, r3, #16
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00a      	beq.n	8005eea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	f003 0320 	and.w	r3, r3, #32
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00a      	beq.n	8005f0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d01a      	beq.n	8005f4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f36:	d10a      	bne.n	8005f4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00a      	beq.n	8005f70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	605a      	str	r2, [r3, #4]
  }
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af02      	add	r7, sp, #8
 8005f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f8c:	f7fb f8fe 	bl	800118c <HAL_GetTick>
 8005f90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0308 	and.w	r3, r3, #8
 8005f9c:	2b08      	cmp	r3, #8
 8005f9e:	d10e      	bne.n	8005fbe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f82d 	bl	800600e <UART_WaitOnFlagUntilTimeout>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e023      	b.n	8006006 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0304 	and.w	r3, r3, #4
 8005fc8:	2b04      	cmp	r3, #4
 8005fca:	d10e      	bne.n	8005fea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f817 	bl	800600e <UART_WaitOnFlagUntilTimeout>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e00d      	b.n	8006006 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2220      	movs	r2, #32
 8005fee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b084      	sub	sp, #16
 8006012:	af00      	add	r7, sp, #0
 8006014:	60f8      	str	r0, [r7, #12]
 8006016:	60b9      	str	r1, [r7, #8]
 8006018:	603b      	str	r3, [r7, #0]
 800601a:	4613      	mov	r3, r2
 800601c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800601e:	e05e      	b.n	80060de <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006026:	d05a      	beq.n	80060de <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006028:	f7fb f8b0 	bl	800118c <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	429a      	cmp	r2, r3
 8006036:	d302      	bcc.n	800603e <UART_WaitOnFlagUntilTimeout+0x30>
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d11b      	bne.n	8006076 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800604c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	689a      	ldr	r2, [r3, #8]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 0201 	bic.w	r2, r2, #1
 800605c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2220      	movs	r2, #32
 8006062:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2220      	movs	r2, #32
 8006068:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e043      	b.n	80060fe <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0304 	and.w	r3, r3, #4
 8006080:	2b00      	cmp	r3, #0
 8006082:	d02c      	beq.n	80060de <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	69db      	ldr	r3, [r3, #28]
 800608a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800608e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006092:	d124      	bne.n	80060de <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800609c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80060ac:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689a      	ldr	r2, [r3, #8]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 0201 	bic.w	r2, r2, #1
 80060bc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2220      	movs	r2, #32
 80060c2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2220      	movs	r2, #32
 80060c8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2220      	movs	r2, #32
 80060ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e00f      	b.n	80060fe <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	69da      	ldr	r2, [r3, #28]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	4013      	ands	r3, r2
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	bf0c      	ite	eq
 80060ee:	2301      	moveq	r3, #1
 80060f0:	2300      	movne	r3, #0
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	461a      	mov	r2, r3
 80060f6:	79fb      	ldrb	r3, [r7, #7]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d091      	beq.n	8006020 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
	...

08006108 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8006108:	b084      	sub	sp, #16
 800610a:	b480      	push	{r7}
 800610c:	b085      	sub	sp, #20
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
 8006112:	f107 001c 	add.w	r0, r7, #28
 8006116:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800611a:	2300      	movs	r3, #0
 800611c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800611e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006120:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006122:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006126:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006128:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800612a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800612c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800612e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006132:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	4b07      	ldr	r3, [pc, #28]	; (800615c <SDMMC_Init+0x54>)
 8006140:	4013      	ands	r3, r2
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	431a      	orrs	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	b004      	add	sp, #16
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	ffff8100 	.word	0xffff8100

08006160 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800616e:	4618      	mov	r0, r3
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800617a:	b480      	push	{r7}
 800617c:	b083      	sub	sp, #12
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2203      	movs	r2, #3
 80061a8:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80061aa:	2002      	movs	r0, #2
 80061ac:	f7fa fffa 	bl	80011a4 <HAL_Delay>
  
  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80061ba:	b480      	push	{r7}
 80061bc:	b083      	sub	sp, #12
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0303 	and.w	r3, r3, #3
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
	...

080061d8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80061e2:	2300      	movs	r3, #0
 80061e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80061f6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80061fc:	431a      	orrs	r2, r3
                       Command->CPSM);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006202:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	4313      	orrs	r3, r2
 8006208:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	4b06      	ldr	r3, [pc, #24]	; (8006228 <SDMMC_SendCommand+0x50>)
 8006210:	4013      	ands	r3, r2
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	431a      	orrs	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3714      	adds	r7, #20
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	fffff000 	.word	0xfffff000

0800622c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	b2db      	uxtb	r3, r3
}
 800623a:	4618      	mov	r0, r3
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8006246:	b480      	push	{r7}
 8006248:	b085      	sub	sp, #20
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	3314      	adds	r3, #20
 8006254:	461a      	mov	r2, r3
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	4413      	add	r3, r2
 800625a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
}  
 8006260:	4618      	mov	r0, r3
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006276:	2300      	movs	r3, #0
 8006278:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006292:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006298:	431a      	orrs	r2, r3
                       Data->DPSM);
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800629e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062aa:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	431a      	orrs	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80062b6:	2300      	movs	r3, #0

}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b088      	sub	sp, #32
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80062d2:	2310      	movs	r3, #16
 80062d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80062d6:	2340      	movs	r3, #64	; 0x40
 80062d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80062da:	2300      	movs	r3, #0
 80062dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80062de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80062e4:	f107 0308 	add.w	r3, r7, #8
 80062e8:	4619      	mov	r1, r3
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7ff ff74 	bl	80061d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80062f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80062f4:	2110      	movs	r1, #16
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fa46 	bl	8006788 <SDMMC_GetCmdResp1>
 80062fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062fe:	69fb      	ldr	r3, [r7, #28]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3720      	adds	r7, #32
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b088      	sub	sp, #32
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006316:	2311      	movs	r3, #17
 8006318:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800631a:	2340      	movs	r3, #64	; 0x40
 800631c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800631e:	2300      	movs	r3, #0
 8006320:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006322:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006326:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006328:	f107 0308 	add.w	r3, r7, #8
 800632c:	4619      	mov	r1, r3
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7ff ff52 	bl	80061d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006334:	f241 3288 	movw	r2, #5000	; 0x1388
 8006338:	2111      	movs	r1, #17
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fa24 	bl	8006788 <SDMMC_GetCmdResp1>
 8006340:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006342:	69fb      	ldr	r3, [r7, #28]
}
 8006344:	4618      	mov	r0, r3
 8006346:	3720      	adds	r7, #32
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b088      	sub	sp, #32
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800635a:	2312      	movs	r3, #18
 800635c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800635e:	2340      	movs	r3, #64	; 0x40
 8006360:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006362:	2300      	movs	r3, #0
 8006364:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800636a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800636c:	f107 0308 	add.w	r3, r7, #8
 8006370:	4619      	mov	r1, r3
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7ff ff30 	bl	80061d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006378:	f241 3288 	movw	r2, #5000	; 0x1388
 800637c:	2112      	movs	r1, #18
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fa02 	bl	8006788 <SDMMC_GetCmdResp1>
 8006384:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006386:	69fb      	ldr	r3, [r7, #28]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3720      	adds	r7, #32
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b088      	sub	sp, #32
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800639e:	2318      	movs	r3, #24
 80063a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80063a2:	2340      	movs	r3, #64	; 0x40
 80063a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80063a6:	2300      	movs	r3, #0
 80063a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80063aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80063b0:	f107 0308 	add.w	r3, r7, #8
 80063b4:	4619      	mov	r1, r3
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f7ff ff0e 	bl	80061d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80063bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80063c0:	2118      	movs	r1, #24
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f9e0 	bl	8006788 <SDMMC_GetCmdResp1>
 80063c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063ca:	69fb      	ldr	r3, [r7, #28]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3720      	adds	r7, #32
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b088      	sub	sp, #32
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80063e2:	2319      	movs	r3, #25
 80063e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80063e6:	2340      	movs	r3, #64	; 0x40
 80063e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80063ea:	2300      	movs	r3, #0
 80063ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80063ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80063f4:	f107 0308 	add.w	r3, r7, #8
 80063f8:	4619      	mov	r1, r3
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7ff feec 	bl	80061d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006400:	f241 3288 	movw	r2, #5000	; 0x1388
 8006404:	2119      	movs	r1, #25
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 f9be 	bl	8006788 <SDMMC_GetCmdResp1>
 800640c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800640e:	69fb      	ldr	r3, [r7, #28]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3720      	adds	r7, #32
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b088      	sub	sp, #32
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006420:	2300      	movs	r3, #0
 8006422:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006424:	230c      	movs	r3, #12
 8006426:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006428:	2340      	movs	r3, #64	; 0x40
 800642a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800642c:	2300      	movs	r3, #0
 800642e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006430:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006434:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006436:	f107 0308 	add.w	r3, r7, #8
 800643a:	4619      	mov	r1, r3
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f7ff fecb 	bl	80061d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8006442:	4a05      	ldr	r2, [pc, #20]	; (8006458 <SDMMC_CmdStopTransfer+0x40>)
 8006444:	210c      	movs	r1, #12
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f99e 	bl	8006788 <SDMMC_GetCmdResp1>
 800644c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800644e:	69fb      	ldr	r3, [r7, #28]
}
 8006450:	4618      	mov	r0, r3
 8006452:	3720      	adds	r7, #32
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	05f5e100 	.word	0x05f5e100

0800645c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b08a      	sub	sp, #40	; 0x28
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800646c:	2307      	movs	r3, #7
 800646e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006470:	2340      	movs	r3, #64	; 0x40
 8006472:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006474:	2300      	movs	r3, #0
 8006476:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006478:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800647c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800647e:	f107 0310 	add.w	r3, r7, #16
 8006482:	4619      	mov	r1, r3
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f7ff fea7 	bl	80061d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800648a:	f241 3288 	movw	r2, #5000	; 0x1388
 800648e:	2107      	movs	r1, #7
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f000 f979 	bl	8006788 <SDMMC_GetCmdResp1>
 8006496:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800649a:	4618      	mov	r0, r3
 800649c:	3728      	adds	r7, #40	; 0x28
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b088      	sub	sp, #32
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80064aa:	2300      	movs	r3, #0
 80064ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80064ae:	2300      	movs	r3, #0
 80064b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80064b2:	2300      	movs	r3, #0
 80064b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80064b6:	2300      	movs	r3, #0
 80064b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80064ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80064c0:	f107 0308 	add.w	r3, r7, #8
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7ff fe86 	bl	80061d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 f92f 	bl	8006730 <SDMMC_GetCmdError>
 80064d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064d4:	69fb      	ldr	r3, [r7, #28]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3720      	adds	r7, #32
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b088      	sub	sp, #32
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80064e6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80064ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80064ec:	2308      	movs	r3, #8
 80064ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80064f0:	2340      	movs	r3, #64	; 0x40
 80064f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80064f4:	2300      	movs	r3, #0
 80064f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80064f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80064fe:	f107 0308 	add.w	r3, r7, #8
 8006502:	4619      	mov	r1, r3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f7ff fe67 	bl	80061d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fb26 	bl	8006b5c <SDMMC_GetCmdResp7>
 8006510:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006512:	69fb      	ldr	r3, [r7, #28]
}
 8006514:	4618      	mov	r0, r3
 8006516:	3720      	adds	r7, #32
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b088      	sub	sp, #32
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800652a:	2337      	movs	r3, #55	; 0x37
 800652c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800652e:	2340      	movs	r3, #64	; 0x40
 8006530:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006532:	2300      	movs	r3, #0
 8006534:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006536:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800653a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800653c:	f107 0308 	add.w	r3, r7, #8
 8006540:	4619      	mov	r1, r3
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f7ff fe48 	bl	80061d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8006548:	f241 3288 	movw	r2, #5000	; 0x1388
 800654c:	2137      	movs	r1, #55	; 0x37
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f91a 	bl	8006788 <SDMMC_GetCmdResp1>
 8006554:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006556:	69fb      	ldr	r3, [r7, #28]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3720      	adds	r7, #32
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b088      	sub	sp, #32
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	4b0d      	ldr	r3, [pc, #52]	; (80065a4 <SDMMC_CmdAppOperCommand+0x44>)
 800656e:	4313      	orrs	r3, r2
 8006570:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006572:	2329      	movs	r3, #41	; 0x29
 8006574:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006576:	2340      	movs	r3, #64	; 0x40
 8006578:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800657a:	2300      	movs	r3, #0
 800657c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800657e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006582:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006584:	f107 0308 	add.w	r3, r7, #8
 8006588:	4619      	mov	r1, r3
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f7ff fe24 	bl	80061d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fa2f 	bl	80069f4 <SDMMC_GetCmdResp3>
 8006596:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006598:	69fb      	ldr	r3, [r7, #28]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3720      	adds	r7, #32
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	80100000 	.word	0x80100000

080065a8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b088      	sub	sp, #32
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80065b6:	2306      	movs	r3, #6
 80065b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80065ba:	2340      	movs	r3, #64	; 0x40
 80065bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80065be:	2300      	movs	r3, #0
 80065c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80065c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80065c8:	f107 0308 	add.w	r3, r7, #8
 80065cc:	4619      	mov	r1, r3
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f7ff fe02 	bl	80061d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80065d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80065d8:	2106      	movs	r1, #6
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f8d4 	bl	8006788 <SDMMC_GetCmdResp1>
 80065e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80065e2:	69fb      	ldr	r3, [r7, #28]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3720      	adds	r7, #32
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b088      	sub	sp, #32
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80065f4:	2300      	movs	r3, #0
 80065f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80065f8:	2333      	movs	r3, #51	; 0x33
 80065fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80065fc:	2340      	movs	r3, #64	; 0x40
 80065fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006600:	2300      	movs	r3, #0
 8006602:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006604:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006608:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800660a:	f107 0308 	add.w	r3, r7, #8
 800660e:	4619      	mov	r1, r3
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7ff fde1 	bl	80061d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8006616:	f241 3288 	movw	r2, #5000	; 0x1388
 800661a:	2133      	movs	r1, #51	; 0x33
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f8b3 	bl	8006788 <SDMMC_GetCmdResp1>
 8006622:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006624:	69fb      	ldr	r3, [r7, #28]
}
 8006626:	4618      	mov	r0, r3
 8006628:	3720      	adds	r7, #32
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b088      	sub	sp, #32
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006636:	2300      	movs	r3, #0
 8006638:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800663a:	2302      	movs	r3, #2
 800663c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800663e:	23c0      	movs	r3, #192	; 0xc0
 8006640:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006642:	2300      	movs	r3, #0
 8006644:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800664a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800664c:	f107 0308 	add.w	r3, r7, #8
 8006650:	4619      	mov	r1, r3
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7ff fdc0 	bl	80061d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f983 	bl	8006964 <SDMMC_GetCmdResp2>
 800665e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006660:	69fb      	ldr	r3, [r7, #28]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3720      	adds	r7, #32
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b088      	sub	sp, #32
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006678:	2309      	movs	r3, #9
 800667a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800667c:	23c0      	movs	r3, #192	; 0xc0
 800667e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006680:	2300      	movs	r3, #0
 8006682:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006688:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800668a:	f107 0308 	add.w	r3, r7, #8
 800668e:	4619      	mov	r1, r3
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f7ff fda1 	bl	80061d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f964 	bl	8006964 <SDMMC_GetCmdResp2>
 800669c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800669e:	69fb      	ldr	r3, [r7, #28]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3720      	adds	r7, #32
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b088      	sub	sp, #32
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80066b6:	2303      	movs	r3, #3
 80066b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80066ba:	2340      	movs	r3, #64	; 0x40
 80066bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80066be:	2300      	movs	r3, #0
 80066c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80066c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80066c8:	f107 0308 	add.w	r3, r7, #8
 80066cc:	4619      	mov	r1, r3
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7ff fd82 	bl	80061d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80066d4:	683a      	ldr	r2, [r7, #0]
 80066d6:	2103      	movs	r1, #3
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f9c9 	bl	8006a70 <SDMMC_GetCmdResp6>
 80066de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80066e0:	69fb      	ldr	r3, [r7, #28]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3720      	adds	r7, #32
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b088      	sub	sp, #32
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
 80066f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80066f8:	230d      	movs	r3, #13
 80066fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80066fc:	2340      	movs	r3, #64	; 0x40
 80066fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006700:	2300      	movs	r3, #0
 8006702:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006708:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800670a:	f107 0308 	add.w	r3, r7, #8
 800670e:	4619      	mov	r1, r3
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f7ff fd61 	bl	80061d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8006716:	f241 3288 	movw	r2, #5000	; 0x1388
 800671a:	210d      	movs	r1, #13
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 f833 	bl	8006788 <SDMMC_GetCmdResp1>
 8006722:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006724:	69fb      	ldr	r3, [r7, #28]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3720      	adds	r7, #32
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
	...

08006730 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006738:	4b11      	ldr	r3, [pc, #68]	; (8006780 <SDMMC_GetCmdError+0x50>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a11      	ldr	r2, [pc, #68]	; (8006784 <SDMMC_GetCmdError+0x54>)
 800673e:	fba2 2303 	umull	r2, r3, r2, r3
 8006742:	0a5b      	lsrs	r3, r3, #9
 8006744:	f241 3288 	movw	r2, #5000	; 0x1388
 8006748:	fb02 f303 	mul.w	r3, r2, r3
 800674c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	1e5a      	subs	r2, r3, #1
 8006752:	60fa      	str	r2, [r7, #12]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d102      	bne.n	800675e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006758:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800675c:	e009      	b.n	8006772 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006766:	2b00      	cmp	r3, #0
 8006768:	d0f1      	beq.n	800674e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	22c5      	movs	r2, #197	; 0xc5
 800676e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3714      	adds	r7, #20
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	20000000 	.word	0x20000000
 8006784:	10624dd3 	.word	0x10624dd3

08006788 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b088      	sub	sp, #32
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	460b      	mov	r3, r1
 8006792:	607a      	str	r2, [r7, #4]
 8006794:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006796:	4b70      	ldr	r3, [pc, #448]	; (8006958 <SDMMC_GetCmdResp1+0x1d0>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a70      	ldr	r2, [pc, #448]	; (800695c <SDMMC_GetCmdResp1+0x1d4>)
 800679c:	fba2 2303 	umull	r2, r3, r2, r3
 80067a0:	0a5a      	lsrs	r2, r3, #9
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	fb02 f303 	mul.w	r3, r2, r3
 80067a8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	1e5a      	subs	r2, r3, #1
 80067ae:	61fa      	str	r2, [r7, #28]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d102      	bne.n	80067ba <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80067b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80067b8:	e0c9      	b.n	800694e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067be:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d0ef      	beq.n	80067aa <SDMMC_GetCmdResp1+0x22>
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1ea      	bne.n	80067aa <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d8:	f003 0304 	and.w	r3, r3, #4
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d004      	beq.n	80067ea <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2204      	movs	r2, #4
 80067e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80067e6:	2304      	movs	r3, #4
 80067e8:	e0b1      	b.n	800694e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d004      	beq.n	8006800 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2201      	movs	r2, #1
 80067fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e0a6      	b.n	800694e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	22c5      	movs	r2, #197	; 0xc5
 8006804:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f7ff fd10 	bl	800622c <SDMMC_GetCommandResponse>
 800680c:	4603      	mov	r3, r0
 800680e:	461a      	mov	r2, r3
 8006810:	7afb      	ldrb	r3, [r7, #11]
 8006812:	4293      	cmp	r3, r2
 8006814:	d001      	beq.n	800681a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006816:	2301      	movs	r3, #1
 8006818:	e099      	b.n	800694e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800681a:	2100      	movs	r1, #0
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f7ff fd12 	bl	8006246 <SDMMC_GetResponse>
 8006822:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	4b4e      	ldr	r3, [pc, #312]	; (8006960 <SDMMC_GetCmdResp1+0x1d8>)
 8006828:	4013      	ands	r3, r2
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800682e:	2300      	movs	r3, #0
 8006830:	e08d      	b.n	800694e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	2b00      	cmp	r3, #0
 8006836:	da02      	bge.n	800683e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006838:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800683c:	e087      	b.n	800694e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d001      	beq.n	800684c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006848:	2340      	movs	r3, #64	; 0x40
 800684a:	e080      	b.n	800694e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006856:	2380      	movs	r3, #128	; 0x80
 8006858:	e079      	b.n	800694e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d002      	beq.n	800686a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006864:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006868:	e071      	b.n	800694e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d002      	beq.n	800687a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006878:	e069      	b.n	800694e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d002      	beq.n	800688a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006888:	e061      	b.n	800694e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d002      	beq.n	800689a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006894:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006898:	e059      	b.n	800694e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d002      	beq.n	80068aa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80068a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068a8:	e051      	b.n	800694e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d002      	beq.n	80068ba <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80068b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80068b8:	e049      	b.n	800694e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d002      	beq.n	80068ca <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80068c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80068c8:	e041      	b.n	800694e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d002      	beq.n	80068da <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80068d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068d8:	e039      	b.n	800694e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d002      	beq.n	80068ea <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80068e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068e8:	e031      	b.n	800694e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d002      	beq.n	80068fa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80068f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80068f8:	e029      	b.n	800694e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d002      	beq.n	800690a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006904:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006908:	e021      	b.n	800694e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d002      	beq.n	800691a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006914:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006918:	e019      	b.n	800694e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006924:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006928:	e011      	b.n	800694e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006934:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006938:	e009      	b.n	800694e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f003 0308 	and.w	r3, r3, #8
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006944:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006948:	e001      	b.n	800694e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800694a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800694e:	4618      	mov	r0, r3
 8006950:	3720      	adds	r7, #32
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	20000000 	.word	0x20000000
 800695c:	10624dd3 	.word	0x10624dd3
 8006960:	fdffe008 	.word	0xfdffe008

08006964 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800696c:	4b1f      	ldr	r3, [pc, #124]	; (80069ec <SDMMC_GetCmdResp2+0x88>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a1f      	ldr	r2, [pc, #124]	; (80069f0 <SDMMC_GetCmdResp2+0x8c>)
 8006972:	fba2 2303 	umull	r2, r3, r2, r3
 8006976:	0a5b      	lsrs	r3, r3, #9
 8006978:	f241 3288 	movw	r2, #5000	; 0x1388
 800697c:	fb02 f303 	mul.w	r3, r2, r3
 8006980:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	1e5a      	subs	r2, r3, #1
 8006986:	60fa      	str	r2, [r7, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d102      	bne.n	8006992 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800698c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006990:	e026      	b.n	80069e0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006996:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d0ef      	beq.n	8006982 <SDMMC_GetCmdResp2+0x1e>
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1ea      	bne.n	8006982 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b0:	f003 0304 	and.w	r3, r3, #4
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d004      	beq.n	80069c2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2204      	movs	r2, #4
 80069bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80069be:	2304      	movs	r3, #4
 80069c0:	e00e      	b.n	80069e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d004      	beq.n	80069d8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2201      	movs	r2, #1
 80069d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e003      	b.n	80069e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	22c5      	movs	r2, #197	; 0xc5
 80069dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3714      	adds	r7, #20
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	20000000 	.word	0x20000000
 80069f0:	10624dd3 	.word	0x10624dd3

080069f4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80069fc:	4b1a      	ldr	r3, [pc, #104]	; (8006a68 <SDMMC_GetCmdResp3+0x74>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a1a      	ldr	r2, [pc, #104]	; (8006a6c <SDMMC_GetCmdResp3+0x78>)
 8006a02:	fba2 2303 	umull	r2, r3, r2, r3
 8006a06:	0a5b      	lsrs	r3, r3, #9
 8006a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a0c:	fb02 f303 	mul.w	r3, r2, r3
 8006a10:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	1e5a      	subs	r2, r3, #1
 8006a16:	60fa      	str	r2, [r7, #12]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d102      	bne.n	8006a22 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006a1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006a20:	e01b      	b.n	8006a5a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a26:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d0ef      	beq.n	8006a12 <SDMMC_GetCmdResp3+0x1e>
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1ea      	bne.n	8006a12 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a40:	f003 0304 	and.w	r3, r3, #4
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d004      	beq.n	8006a52 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2204      	movs	r2, #4
 8006a4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006a4e:	2304      	movs	r3, #4
 8006a50:	e003      	b.n	8006a5a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	22c5      	movs	r2, #197	; 0xc5
 8006a56:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3714      	adds	r7, #20
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	20000000 	.word	0x20000000
 8006a6c:	10624dd3 	.word	0x10624dd3

08006a70 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b088      	sub	sp, #32
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	607a      	str	r2, [r7, #4]
 8006a7c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006a7e:	4b35      	ldr	r3, [pc, #212]	; (8006b54 <SDMMC_GetCmdResp6+0xe4>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a35      	ldr	r2, [pc, #212]	; (8006b58 <SDMMC_GetCmdResp6+0xe8>)
 8006a84:	fba2 2303 	umull	r2, r3, r2, r3
 8006a88:	0a5b      	lsrs	r3, r3, #9
 8006a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a8e:	fb02 f303 	mul.w	r3, r2, r3
 8006a92:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	1e5a      	subs	r2, r3, #1
 8006a98:	61fa      	str	r2, [r7, #28]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d102      	bne.n	8006aa4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006a9e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006aa2:	e052      	b.n	8006b4a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d0ef      	beq.n	8006a94 <SDMMC_GetCmdResp6+0x24>
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1ea      	bne.n	8006a94 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac2:	f003 0304 	and.w	r3, r3, #4
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d004      	beq.n	8006ad4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2204      	movs	r2, #4
 8006ace:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006ad0:	2304      	movs	r3, #4
 8006ad2:	e03a      	b.n	8006b4a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d004      	beq.n	8006aea <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e02f      	b.n	8006b4a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f7ff fb9e 	bl	800622c <SDMMC_GetCommandResponse>
 8006af0:	4603      	mov	r3, r0
 8006af2:	461a      	mov	r2, r3
 8006af4:	7afb      	ldrb	r3, [r7, #11]
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d001      	beq.n	8006afe <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e025      	b.n	8006b4a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	22c5      	movs	r2, #197	; 0xc5
 8006b02:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006b04:	2100      	movs	r1, #0
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f7ff fb9d 	bl	8006246 <SDMMC_GetResponse>
 8006b0c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d106      	bne.n	8006b26 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	0c1b      	lsrs	r3, r3, #16
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006b22:	2300      	movs	r3, #0
 8006b24:	e011      	b.n	8006b4a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d002      	beq.n	8006b36 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006b30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006b34:	e009      	b.n	8006b4a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d002      	beq.n	8006b46 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b44:	e001      	b.n	8006b4a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006b46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3720      	adds	r7, #32
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	20000000 	.word	0x20000000
 8006b58:	10624dd3 	.word	0x10624dd3

08006b5c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006b64:	4b22      	ldr	r3, [pc, #136]	; (8006bf0 <SDMMC_GetCmdResp7+0x94>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a22      	ldr	r2, [pc, #136]	; (8006bf4 <SDMMC_GetCmdResp7+0x98>)
 8006b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b6e:	0a5b      	lsrs	r3, r3, #9
 8006b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b74:	fb02 f303 	mul.w	r3, r2, r3
 8006b78:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	1e5a      	subs	r2, r3, #1
 8006b7e:	60fa      	str	r2, [r7, #12]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d102      	bne.n	8006b8a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006b84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006b88:	e02c      	b.n	8006be4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b8e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d0ef      	beq.n	8006b7a <SDMMC_GetCmdResp7+0x1e>
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1ea      	bne.n	8006b7a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d004      	beq.n	8006bba <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2204      	movs	r2, #4
 8006bb4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006bb6:	2304      	movs	r3, #4
 8006bb8:	e014      	b.n	8006be4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d004      	beq.n	8006bd0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e009      	b.n	8006be4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d002      	beq.n	8006be2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2240      	movs	r2, #64	; 0x40
 8006be0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006be2:	2300      	movs	r3, #0
  
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3714      	adds	r7, #20
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	20000000 	.word	0x20000000
 8006bf4:	10624dd3 	.word	0x10624dd3

08006bf8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bf8:	b084      	sub	sp, #16
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
 8006c02:	f107 001c 	add.w	r0, r7, #28
 8006c06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d120      	bne.n	8006c52 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68da      	ldr	r2, [r3, #12]
 8006c20:	4b20      	ldr	r3, [pc, #128]	; (8006ca4 <USB_CoreInit+0xac>)
 8006c22:	4013      	ands	r3, r2
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d105      	bne.n	8006c46 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fa5a 	bl	8007100 <USB_CoreReset>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	73fb      	strb	r3, [r7, #15]
 8006c50:	e010      	b.n	8006c74 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fa4e 	bl	8007100 <USB_CoreReset>
 8006c64:	4603      	mov	r3, r0
 8006c66:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d10b      	bne.n	8006c92 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f043 0206 	orr.w	r2, r3, #6
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f043 0220 	orr.w	r2, r3, #32
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c9e:	b004      	add	sp, #16
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	ffbdffbf 	.word	0xffbdffbf

08006ca8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f023 0201 	bic.w	r2, r3, #1
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b082      	sub	sp, #8
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ce2:	78fb      	ldrb	r3, [r7, #3]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d106      	bne.n	8006cf6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	60da      	str	r2, [r3, #12]
 8006cf4:	e00b      	b.n	8006d0e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006cf6:	78fb      	ldrb	r3, [r7, #3]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d106      	bne.n	8006d0a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	60da      	str	r2, [r3, #12]
 8006d08:	e001      	b.n	8006d0e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e003      	b.n	8006d16 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006d0e:	2032      	movs	r0, #50	; 0x32
 8006d10:	f7fa fa48 	bl	80011a4 <HAL_Delay>

  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3708      	adds	r7, #8
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
	...

08006d20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d20:	b084      	sub	sp, #16
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b086      	sub	sp, #24
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
 8006d2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006d2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d32:	2300      	movs	r3, #0
 8006d34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	613b      	str	r3, [r7, #16]
 8006d3e:	e009      	b.n	8006d54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	3340      	adds	r3, #64	; 0x40
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4413      	add	r3, r2
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	3301      	adds	r3, #1
 8006d52:	613b      	str	r3, [r7, #16]
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	2b0e      	cmp	r3, #14
 8006d58:	d9f2      	bls.n	8006d40 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d11c      	bne.n	8006d9a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d6e:	f043 0302 	orr.w	r3, r3, #2
 8006d72:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d78:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	601a      	str	r2, [r3, #0]
 8006d98:	e005      	b.n	8006da6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006dac:	461a      	mov	r2, r3
 8006dae:	2300      	movs	r3, #0
 8006db0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006db8:	4619      	mov	r1, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	680b      	ldr	r3, [r1, #0]
 8006dc4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d10c      	bne.n	8006de6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d104      	bne.n	8006ddc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f959 	bl	800708c <USB_SetDevSpeed>
 8006dda:	e018      	b.n	8006e0e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006ddc:	2101      	movs	r1, #1
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f954 	bl	800708c <USB_SetDevSpeed>
 8006de4:	e013      	b.n	8006e0e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8006de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de8:	2b03      	cmp	r3, #3
 8006dea:	d10c      	bne.n	8006e06 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d104      	bne.n	8006dfc <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006df2:	2100      	movs	r1, #0
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 f949 	bl	800708c <USB_SetDevSpeed>
 8006dfa:	e008      	b.n	8006e0e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006dfc:	2101      	movs	r1, #1
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f944 	bl	800708c <USB_SetDevSpeed>
 8006e04:	e003      	b.n	8006e0e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e06:	2103      	movs	r1, #3
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f93f 	bl	800708c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e0e:	2110      	movs	r1, #16
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 f8f3 	bl	8006ffc <USB_FlushTxFifo>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f911 	bl	8007048 <USB_FlushRxFifo>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d001      	beq.n	8006e30 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e36:	461a      	mov	r2, r3
 8006e38:	2300      	movs	r3, #0
 8006e3a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e42:	461a      	mov	r2, r3
 8006e44:	2300      	movs	r3, #0
 8006e46:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e4e:	461a      	mov	r2, r3
 8006e50:	2300      	movs	r3, #0
 8006e52:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e54:	2300      	movs	r3, #0
 8006e56:	613b      	str	r3, [r7, #16]
 8006e58:	e043      	b.n	8006ee2 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	015a      	lsls	r2, r3, #5
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	4413      	add	r3, r2
 8006e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e70:	d118      	bne.n	8006ea4 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d10a      	bne.n	8006e8e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e84:	461a      	mov	r2, r3
 8006e86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e8a:	6013      	str	r3, [r2, #0]
 8006e8c:	e013      	b.n	8006eb6 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	015a      	lsls	r2, r3, #5
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	4413      	add	r3, r2
 8006e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ea0:	6013      	str	r3, [r2, #0]
 8006ea2:	e008      	b.n	8006eb6 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	015a      	lsls	r2, r3, #5
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	4413      	add	r3, r2
 8006eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	015a      	lsls	r2, r3, #5
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	4413      	add	r3, r2
 8006ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006eda:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	613b      	str	r3, [r7, #16]
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d3b7      	bcc.n	8006e5a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006eea:	2300      	movs	r3, #0
 8006eec:	613b      	str	r3, [r7, #16]
 8006eee:	e043      	b.n	8006f78 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	015a      	lsls	r2, r3, #5
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f06:	d118      	bne.n	8006f3a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10a      	bne.n	8006f24 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	015a      	lsls	r2, r3, #5
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f20:	6013      	str	r3, [r2, #0]
 8006f22:	e013      	b.n	8006f4c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f30:	461a      	mov	r2, r3
 8006f32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f36:	6013      	str	r3, [r2, #0]
 8006f38:	e008      	b.n	8006f4c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f46:	461a      	mov	r2, r3
 8006f48:	2300      	movs	r3, #0
 8006f4a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f58:	461a      	mov	r2, r3
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	015a      	lsls	r2, r3, #5
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	4413      	add	r3, r2
 8006f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	3301      	adds	r3, #1
 8006f76:	613b      	str	r3, [r7, #16]
 8006f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d3b7      	bcc.n	8006ef0 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f92:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006fa0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d105      	bne.n	8006fb4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	f043 0210 	orr.w	r2, r3, #16
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	699a      	ldr	r2, [r3, #24]
 8006fb8:	4b0e      	ldr	r3, [pc, #56]	; (8006ff4 <USB_DevInit+0x2d4>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d005      	beq.n	8006fd2 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	f043 0208 	orr.w	r2, r3, #8
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d105      	bne.n	8006fe4 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	699a      	ldr	r2, [r3, #24]
 8006fdc:	4b06      	ldr	r3, [pc, #24]	; (8006ff8 <USB_DevInit+0x2d8>)
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3718      	adds	r7, #24
 8006fea:	46bd      	mov	sp, r7
 8006fec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ff0:	b004      	add	sp, #16
 8006ff2:	4770      	bx	lr
 8006ff4:	803c3800 	.word	0x803c3800
 8006ff8:	40000004 	.word	0x40000004

08006ffc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007006:	2300      	movs	r3, #0
 8007008:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	019b      	lsls	r3, r3, #6
 800700e:	f043 0220 	orr.w	r2, r3, #32
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	3301      	adds	r3, #1
 800701a:	60fb      	str	r3, [r7, #12]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	4a09      	ldr	r2, [pc, #36]	; (8007044 <USB_FlushTxFifo+0x48>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d901      	bls.n	8007028 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007024:	2303      	movs	r3, #3
 8007026:	e006      	b.n	8007036 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	f003 0320 	and.w	r3, r3, #32
 8007030:	2b20      	cmp	r3, #32
 8007032:	d0f0      	beq.n	8007016 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	00030d40 	.word	0x00030d40

08007048 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007050:	2300      	movs	r3, #0
 8007052:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2210      	movs	r2, #16
 8007058:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	3301      	adds	r3, #1
 800705e:	60fb      	str	r3, [r7, #12]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	4a09      	ldr	r2, [pc, #36]	; (8007088 <USB_FlushRxFifo+0x40>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d901      	bls.n	800706c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e006      	b.n	800707a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	f003 0310 	and.w	r3, r3, #16
 8007074:	2b10      	cmp	r3, #16
 8007076:	d0f0      	beq.n	800705a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	00030d40 	.word	0x00030d40

0800708c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	460b      	mov	r3, r1
 8007096:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	78fb      	ldrb	r3, [r7, #3]
 80070a6:	68f9      	ldr	r1, [r7, #12]
 80070a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070ac:	4313      	orrs	r3, r2
 80070ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3714      	adds	r7, #20
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80070be:	b480      	push	{r7}
 80070c0:	b085      	sub	sp, #20
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80070d8:	f023 0303 	bic.w	r3, r3, #3
 80070dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070ec:	f043 0302 	orr.w	r3, r3, #2
 80070f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3714      	adds	r7, #20
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007108:	2300      	movs	r3, #0
 800710a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	3301      	adds	r3, #1
 8007110:	60fb      	str	r3, [r7, #12]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	4a13      	ldr	r2, [pc, #76]	; (8007164 <USB_CoreReset+0x64>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d901      	bls.n	800711e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e01b      	b.n	8007156 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	2b00      	cmp	r3, #0
 8007124:	daf2      	bge.n	800710c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007126:	2300      	movs	r3, #0
 8007128:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	f043 0201 	orr.w	r2, r3, #1
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	3301      	adds	r3, #1
 800713a:	60fb      	str	r3, [r7, #12]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4a09      	ldr	r2, [pc, #36]	; (8007164 <USB_CoreReset+0x64>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d901      	bls.n	8007148 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e006      	b.n	8007156 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	f003 0301 	and.w	r3, r3, #1
 8007150:	2b01      	cmp	r3, #1
 8007152:	d0f0      	beq.n	8007136 <USB_CoreReset+0x36>

  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	00030d40 	.word	0x00030d40

08007168 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800716c:	4904      	ldr	r1, [pc, #16]	; (8007180 <MX_FATFS_Init+0x18>)
 800716e:	4805      	ldr	r0, [pc, #20]	; (8007184 <MX_FATFS_Init+0x1c>)
 8007170:	f000 fa9c 	bl	80076ac <FATFS_LinkDriver>
 8007174:	4603      	mov	r3, r0
 8007176:	461a      	mov	r2, r3
 8007178:	4b03      	ldr	r3, [pc, #12]	; (8007188 <MX_FATFS_Init+0x20>)
 800717a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800717c:	bf00      	nop
 800717e:	bd80      	pop	{r7, pc}
 8007180:	20004fd0 	.word	0x20004fd0
 8007184:	0800abe4 	.word	0x0800abe4
 8007188:	20004fcc 	.word	0x20004fcc

0800718c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007196:	f000 f896 	bl	80072c6 <BSP_SD_IsDetected>
 800719a:	4603      	mov	r3, r0
 800719c:	2b01      	cmp	r3, #1
 800719e:	d001      	beq.n	80071a4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80071a0:	2302      	movs	r3, #2
 80071a2:	e012      	b.n	80071ca <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80071a4:	480b      	ldr	r0, [pc, #44]	; (80071d4 <BSP_SD_Init+0x48>)
 80071a6:	f7fc fd91 	bl	8003ccc <HAL_SD_Init>
 80071aa:	4603      	mov	r3, r0
 80071ac:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80071ae:	79fb      	ldrb	r3, [r7, #7]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d109      	bne.n	80071c8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80071b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80071b8:	4806      	ldr	r0, [pc, #24]	; (80071d4 <BSP_SD_Init+0x48>)
 80071ba:	f7fd fb55 	bl	8004868 <HAL_SD_ConfigWideBusOperation>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d001      	beq.n	80071c8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80071c8:	79fb      	ldrb	r3, [r7, #7]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3708      	adds	r7, #8
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	20000054 	.word	0x20000054

080071d8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	68f9      	ldr	r1, [r7, #12]
 80071ee:	4806      	ldr	r0, [pc, #24]	; (8007208 <BSP_SD_ReadBlocks_DMA+0x30>)
 80071f0:	f7fc fe22 	bl	8003e38 <HAL_SD_ReadBlocks_DMA>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d001      	beq.n	80071fe <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80071fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007200:	4618      	mov	r0, r3
 8007202:	3718      	adds	r7, #24
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	20000054 	.word	0x20000054

0800720c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007218:	2300      	movs	r3, #0
 800721a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	68f9      	ldr	r1, [r7, #12]
 8007222:	4806      	ldr	r0, [pc, #24]	; (800723c <BSP_SD_WriteBlocks_DMA+0x30>)
 8007224:	f7fc feea 	bl	8003ffc <HAL_SD_WriteBlocks_DMA>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d001      	beq.n	8007232 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007232:	7dfb      	ldrb	r3, [r7, #23]
}
 8007234:	4618      	mov	r0, r3
 8007236:	3718      	adds	r7, #24
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	20000054 	.word	0x20000054

08007240 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007244:	4805      	ldr	r0, [pc, #20]	; (800725c <BSP_SD_GetCardState+0x1c>)
 8007246:	f7fd fba9 	bl	800499c <HAL_SD_GetCardState>
 800724a:	4603      	mov	r3, r0
 800724c:	2b04      	cmp	r3, #4
 800724e:	bf14      	ite	ne
 8007250:	2301      	movne	r3, #1
 8007252:	2300      	moveq	r3, #0
 8007254:	b2db      	uxtb	r3, r3
}
 8007256:	4618      	mov	r0, r3
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	20000054 	.word	0x20000054

08007260 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8007268:	6879      	ldr	r1, [r7, #4]
 800726a:	4803      	ldr	r0, [pc, #12]	; (8007278 <BSP_SD_GetCardInfo+0x18>)
 800726c:	f7fd fad0 	bl	8004810 <HAL_SD_GetCardInfo>
}
 8007270:	bf00      	nop
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	20000054 	.word	0x20000054

0800727c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007284:	f000 f818 	bl	80072b8 <BSP_SD_AbortCallback>
}
 8007288:	bf00      	nop
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007298:	f000 f998 	bl	80075cc <BSP_SD_WriteCpltCallback>
}
 800729c:	bf00      	nop
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80072ac:	f000 f9a0 	bl	80075f0 <BSP_SD_ReadCpltCallback>
}
 80072b0:	bf00      	nop
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80072b8:	b480      	push	{r7}
 80072ba:	af00      	add	r7, sp, #0

}
 80072bc:	bf00      	nop
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b083      	sub	sp, #12
 80072ca:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80072cc:	2301      	movs	r3, #1
 80072ce:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80072d0:	79fb      	ldrb	r3, [r7, #7]
 80072d2:	b2db      	uxtb	r3, r3
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 80072e8:	f000 fa82 	bl	80077f0 <osKernelGetTickCount>
 80072ec:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 80072ee:	e006      	b.n	80072fe <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80072f0:	f7ff ffa6 	bl	8007240 <BSP_SD_GetCardState>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d101      	bne.n	80072fe <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80072fa:	2300      	movs	r3, #0
 80072fc:	e009      	b.n	8007312 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 80072fe:	f000 fa77 	bl	80077f0 <osKernelGetTickCount>
 8007302:	4602      	mov	r2, r0
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	429a      	cmp	r2, r3
 800730c:	d8f0      	bhi.n	80072f0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800730e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007312:	4618      	mov	r0, r3
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
	...

0800731c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	4603      	mov	r3, r0
 8007324:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007326:	4b0b      	ldr	r3, [pc, #44]	; (8007354 <SD_CheckStatus+0x38>)
 8007328:	2201      	movs	r2, #1
 800732a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800732c:	f7ff ff88 	bl	8007240 <BSP_SD_GetCardState>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d107      	bne.n	8007346 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007336:	4b07      	ldr	r3, [pc, #28]	; (8007354 <SD_CheckStatus+0x38>)
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	b2db      	uxtb	r3, r3
 800733c:	f023 0301 	bic.w	r3, r3, #1
 8007340:	b2da      	uxtb	r2, r3
 8007342:	4b04      	ldr	r3, [pc, #16]	; (8007354 <SD_CheckStatus+0x38>)
 8007344:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007346:	4b03      	ldr	r3, [pc, #12]	; (8007354 <SD_CheckStatus+0x38>)
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	b2db      	uxtb	r3, r3
}
 800734c:	4618      	mov	r0, r3
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	20000009 	.word	0x20000009

08007358 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	4603      	mov	r3, r0
 8007360:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8007362:	4b1c      	ldr	r3, [pc, #112]	; (80073d4 <SD_initialize+0x7c>)
 8007364:	2201      	movs	r2, #1
 8007366:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8007368:	f000 f9ea 	bl	8007740 <osKernelGetState>
 800736c:	4603      	mov	r3, r0
 800736e:	2b02      	cmp	r3, #2
 8007370:	d129      	bne.n	80073c6 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8007372:	f7ff ff0b 	bl	800718c <BSP_SD_Init>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d107      	bne.n	800738c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800737c:	79fb      	ldrb	r3, [r7, #7]
 800737e:	4618      	mov	r0, r3
 8007380:	f7ff ffcc 	bl	800731c <SD_CheckStatus>
 8007384:	4603      	mov	r3, r0
 8007386:	461a      	mov	r2, r3
 8007388:	4b12      	ldr	r3, [pc, #72]	; (80073d4 <SD_initialize+0x7c>)
 800738a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800738c:	4b11      	ldr	r3, [pc, #68]	; (80073d4 <SD_initialize+0x7c>)
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	b2db      	uxtb	r3, r3
 8007392:	2b01      	cmp	r3, #1
 8007394:	d017      	beq.n	80073c6 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8007396:	4b10      	ldr	r3, [pc, #64]	; (80073d8 <SD_initialize+0x80>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d107      	bne.n	80073ae <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800739e:	2200      	movs	r2, #0
 80073a0:	2102      	movs	r1, #2
 80073a2:	200a      	movs	r0, #10
 80073a4:	f000 fbfa 	bl	8007b9c <osMessageQueueNew>
 80073a8:	4603      	mov	r3, r0
 80073aa:	4a0b      	ldr	r2, [pc, #44]	; (80073d8 <SD_initialize+0x80>)
 80073ac:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 80073ae:	4b0a      	ldr	r3, [pc, #40]	; (80073d8 <SD_initialize+0x80>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d107      	bne.n	80073c6 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 80073b6:	4b07      	ldr	r3, [pc, #28]	; (80073d4 <SD_initialize+0x7c>)
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	f043 0301 	orr.w	r3, r3, #1
 80073c0:	b2da      	uxtb	r2, r3
 80073c2:	4b04      	ldr	r3, [pc, #16]	; (80073d4 <SD_initialize+0x7c>)
 80073c4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80073c6:	4b03      	ldr	r3, [pc, #12]	; (80073d4 <SD_initialize+0x7c>)
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	b2db      	uxtb	r3, r3
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	20000009 	.word	0x20000009
 80073d8:	20000664 	.word	0x20000664

080073dc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	4603      	mov	r3, r0
 80073e4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80073e6:	79fb      	ldrb	r3, [r7, #7]
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7ff ff97 	bl	800731c <SD_CheckStatus>
 80073ee:	4603      	mov	r3, r0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b088      	sub	sp, #32
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60b9      	str	r1, [r7, #8]
 8007400:	607a      	str	r2, [r7, #4]
 8007402:	603b      	str	r3, [r7, #0]
 8007404:	4603      	mov	r3, r0
 8007406:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800740c:	f247 5030 	movw	r0, #30000	; 0x7530
 8007410:	f7ff ff66 	bl	80072e0 <SD_CheckStatusWithTimeout>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	da01      	bge.n	800741e <SD_read+0x26>
  {
    return res;
 800741a:	7ffb      	ldrb	r3, [r7, #31]
 800741c:	e02f      	b.n	800747e <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	6879      	ldr	r1, [r7, #4]
 8007422:	68b8      	ldr	r0, [r7, #8]
 8007424:	f7ff fed8 	bl	80071d8 <BSP_SD_ReadBlocks_DMA>
 8007428:	4603      	mov	r3, r0
 800742a:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800742c:	7fbb      	ldrb	r3, [r7, #30]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d124      	bne.n	800747c <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8007432:	4b15      	ldr	r3, [pc, #84]	; (8007488 <SD_read+0x90>)
 8007434:	6818      	ldr	r0, [r3, #0]
 8007436:	f107 0112 	add.w	r1, r7, #18
 800743a:	f247 5330 	movw	r3, #30000	; 0x7530
 800743e:	2200      	movs	r2, #0
 8007440:	f000 fca6 	bl	8007d90 <osMessageQueueGet>
 8007444:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d117      	bne.n	800747c <SD_read+0x84>
 800744c:	8a7b      	ldrh	r3, [r7, #18]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d114      	bne.n	800747c <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8007452:	f000 f9cd 	bl	80077f0 <osKernelGetTickCount>
 8007456:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8007458:	e007      	b.n	800746a <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800745a:	f7ff fef1 	bl	8007240 <BSP_SD_GetCardState>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d102      	bne.n	800746a <SD_read+0x72>
              {
                res = RES_OK;
 8007464:	2300      	movs	r3, #0
 8007466:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8007468:	e008      	b.n	800747c <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800746a:	f000 f9c1 	bl	80077f0 <osKernelGetTickCount>
 800746e:	4602      	mov	r2, r0
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	f247 522f 	movw	r2, #29999	; 0x752f
 8007478:	4293      	cmp	r3, r2
 800747a:	d9ee      	bls.n	800745a <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800747c:	7ffb      	ldrb	r3, [r7, #31]
}
 800747e:	4618      	mov	r0, r3
 8007480:	3720      	adds	r7, #32
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	20000664 	.word	0x20000664

0800748c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b088      	sub	sp, #32
 8007490:	af00      	add	r7, sp, #0
 8007492:	60b9      	str	r1, [r7, #8]
 8007494:	607a      	str	r2, [r7, #4]
 8007496:	603b      	str	r3, [r7, #0]
 8007498:	4603      	mov	r3, r0
 800749a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80074a0:	f247 5030 	movw	r0, #30000	; 0x7530
 80074a4:	f7ff ff1c 	bl	80072e0 <SD_CheckStatusWithTimeout>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	da01      	bge.n	80074b2 <SD_write+0x26>
  {
    return res;
 80074ae:	7ffb      	ldrb	r3, [r7, #31]
 80074b0:	e02d      	b.n	800750e <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80074b2:	683a      	ldr	r2, [r7, #0]
 80074b4:	6879      	ldr	r1, [r7, #4]
 80074b6:	68b8      	ldr	r0, [r7, #8]
 80074b8:	f7ff fea8 	bl	800720c <BSP_SD_WriteBlocks_DMA>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d124      	bne.n	800750c <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80074c2:	4b15      	ldr	r3, [pc, #84]	; (8007518 <SD_write+0x8c>)
 80074c4:	6818      	ldr	r0, [r3, #0]
 80074c6:	f107 0112 	add.w	r1, r7, #18
 80074ca:	f247 5330 	movw	r3, #30000	; 0x7530
 80074ce:	2200      	movs	r2, #0
 80074d0:	f000 fc5e 	bl	8007d90 <osMessageQueueGet>
 80074d4:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d117      	bne.n	800750c <SD_write+0x80>
 80074dc:	8a7b      	ldrh	r3, [r7, #18]
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d114      	bne.n	800750c <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 80074e2:	f000 f985 	bl	80077f0 <osKernelGetTickCount>
 80074e6:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80074e8:	e007      	b.n	80074fa <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80074ea:	f7ff fea9 	bl	8007240 <BSP_SD_GetCardState>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d102      	bne.n	80074fa <SD_write+0x6e>
          {
            res = RES_OK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	77fb      	strb	r3, [r7, #31]
            break;
 80074f8:	e008      	b.n	800750c <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80074fa:	f000 f979 	bl	80077f0 <osKernelGetTickCount>
 80074fe:	4602      	mov	r2, r0
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	1ad3      	subs	r3, r2, r3
 8007504:	f247 522f 	movw	r2, #29999	; 0x752f
 8007508:	4293      	cmp	r3, r2
 800750a:	d9ee      	bls.n	80074ea <SD_write+0x5e>
    }

  }
#endif

  return res;
 800750c:	7ffb      	ldrb	r3, [r7, #31]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3720      	adds	r7, #32
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	20000664 	.word	0x20000664

0800751c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b08c      	sub	sp, #48	; 0x30
 8007520:	af00      	add	r7, sp, #0
 8007522:	4603      	mov	r3, r0
 8007524:	603a      	str	r2, [r7, #0]
 8007526:	71fb      	strb	r3, [r7, #7]
 8007528:	460b      	mov	r3, r1
 800752a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007532:	4b25      	ldr	r3, [pc, #148]	; (80075c8 <SD_ioctl+0xac>)
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	b2db      	uxtb	r3, r3
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	2b00      	cmp	r3, #0
 800753e:	d001      	beq.n	8007544 <SD_ioctl+0x28>
 8007540:	2303      	movs	r3, #3
 8007542:	e03c      	b.n	80075be <SD_ioctl+0xa2>

  switch (cmd)
 8007544:	79bb      	ldrb	r3, [r7, #6]
 8007546:	2b03      	cmp	r3, #3
 8007548:	d834      	bhi.n	80075b4 <SD_ioctl+0x98>
 800754a:	a201      	add	r2, pc, #4	; (adr r2, 8007550 <SD_ioctl+0x34>)
 800754c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007550:	08007561 	.word	0x08007561
 8007554:	08007569 	.word	0x08007569
 8007558:	08007581 	.word	0x08007581
 800755c:	0800759b 	.word	0x0800759b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007560:	2300      	movs	r3, #0
 8007562:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007566:	e028      	b.n	80075ba <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007568:	f107 030c 	add.w	r3, r7, #12
 800756c:	4618      	mov	r0, r3
 800756e:	f7ff fe77 	bl	8007260 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007578:	2300      	movs	r3, #0
 800757a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800757e:	e01c      	b.n	80075ba <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007580:	f107 030c 	add.w	r3, r7, #12
 8007584:	4618      	mov	r0, r3
 8007586:	f7ff fe6b 	bl	8007260 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800758a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758c:	b29a      	uxth	r2, r3
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007598:	e00f      	b.n	80075ba <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800759a:	f107 030c 	add.w	r3, r7, #12
 800759e:	4618      	mov	r0, r3
 80075a0:	f7ff fe5e 	bl	8007260 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80075a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a6:	0a5a      	lsrs	r2, r3, #9
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80075ac:	2300      	movs	r3, #0
 80075ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80075b2:	e002      	b.n	80075ba <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80075b4:	2304      	movs	r3, #4
 80075b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80075ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3730      	adds	r7, #48	; 0x30
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	20000009 	.word	0x20000009

080075cc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 80075d2:	2302      	movs	r3, #2
 80075d4:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80075d6:	4b05      	ldr	r3, [pc, #20]	; (80075ec <BSP_SD_WriteCpltCallback+0x20>)
 80075d8:	6818      	ldr	r0, [r3, #0]
 80075da:	1db9      	adds	r1, r7, #6
 80075dc:	2300      	movs	r3, #0
 80075de:	2200      	movs	r2, #0
 80075e0:	f000 fb62 	bl	8007ca8 <osMessageQueuePut>
#endif
}
 80075e4:	bf00      	nop
 80075e6:	3708      	adds	r7, #8
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	20000664 	.word	0x20000664

080075f0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 80075f6:	2301      	movs	r3, #1
 80075f8:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80075fa:	4b05      	ldr	r3, [pc, #20]	; (8007610 <BSP_SD_ReadCpltCallback+0x20>)
 80075fc:	6818      	ldr	r0, [r3, #0]
 80075fe:	1db9      	adds	r1, r7, #6
 8007600:	2300      	movs	r3, #0
 8007602:	2200      	movs	r2, #0
 8007604:	f000 fb50 	bl	8007ca8 <osMessageQueuePut>
#endif
}
 8007608:	bf00      	nop
 800760a:	3708      	adds	r7, #8
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	20000664 	.word	0x20000664

08007614 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007614:	b480      	push	{r7}
 8007616:	b087      	sub	sp, #28
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	4613      	mov	r3, r2
 8007620:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007622:	2301      	movs	r3, #1
 8007624:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007626:	2300      	movs	r3, #0
 8007628:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800762a:	4b1f      	ldr	r3, [pc, #124]	; (80076a8 <FATFS_LinkDriverEx+0x94>)
 800762c:	7a5b      	ldrb	r3, [r3, #9]
 800762e:	b2db      	uxtb	r3, r3
 8007630:	2b00      	cmp	r3, #0
 8007632:	d131      	bne.n	8007698 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007634:	4b1c      	ldr	r3, [pc, #112]	; (80076a8 <FATFS_LinkDriverEx+0x94>)
 8007636:	7a5b      	ldrb	r3, [r3, #9]
 8007638:	b2db      	uxtb	r3, r3
 800763a:	461a      	mov	r2, r3
 800763c:	4b1a      	ldr	r3, [pc, #104]	; (80076a8 <FATFS_LinkDriverEx+0x94>)
 800763e:	2100      	movs	r1, #0
 8007640:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007642:	4b19      	ldr	r3, [pc, #100]	; (80076a8 <FATFS_LinkDriverEx+0x94>)
 8007644:	7a5b      	ldrb	r3, [r3, #9]
 8007646:	b2db      	uxtb	r3, r3
 8007648:	4a17      	ldr	r2, [pc, #92]	; (80076a8 <FATFS_LinkDriverEx+0x94>)
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	4413      	add	r3, r2
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007652:	4b15      	ldr	r3, [pc, #84]	; (80076a8 <FATFS_LinkDriverEx+0x94>)
 8007654:	7a5b      	ldrb	r3, [r3, #9]
 8007656:	b2db      	uxtb	r3, r3
 8007658:	461a      	mov	r2, r3
 800765a:	4b13      	ldr	r3, [pc, #76]	; (80076a8 <FATFS_LinkDriverEx+0x94>)
 800765c:	4413      	add	r3, r2
 800765e:	79fa      	ldrb	r2, [r7, #7]
 8007660:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007662:	4b11      	ldr	r3, [pc, #68]	; (80076a8 <FATFS_LinkDriverEx+0x94>)
 8007664:	7a5b      	ldrb	r3, [r3, #9]
 8007666:	b2db      	uxtb	r3, r3
 8007668:	1c5a      	adds	r2, r3, #1
 800766a:	b2d1      	uxtb	r1, r2
 800766c:	4a0e      	ldr	r2, [pc, #56]	; (80076a8 <FATFS_LinkDriverEx+0x94>)
 800766e:	7251      	strb	r1, [r2, #9]
 8007670:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007672:	7dbb      	ldrb	r3, [r7, #22]
 8007674:	3330      	adds	r3, #48	; 0x30
 8007676:	b2da      	uxtb	r2, r3
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	3301      	adds	r3, #1
 8007680:	223a      	movs	r2, #58	; 0x3a
 8007682:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	3302      	adds	r3, #2
 8007688:	222f      	movs	r2, #47	; 0x2f
 800768a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	3303      	adds	r3, #3
 8007690:	2200      	movs	r2, #0
 8007692:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007694:	2300      	movs	r3, #0
 8007696:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007698:	7dfb      	ldrb	r3, [r7, #23]
}
 800769a:	4618      	mov	r0, r3
 800769c:	371c      	adds	r7, #28
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	20000668 	.word	0x20000668

080076ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80076b6:	2200      	movs	r2, #0
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7ff ffaa 	bl	8007614 <FATFS_LinkDriverEx>
 80076c0:	4603      	mov	r3, r0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80076ca:	b480      	push	{r7}
 80076cc:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80076ce:	bf00      	nop
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076de:	f3ef 8305 	mrs	r3, IPSR
 80076e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80076e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10f      	bne.n	800770a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076ea:	f3ef 8310 	mrs	r3, PRIMASK
 80076ee:	607b      	str	r3, [r7, #4]
  return(result);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d105      	bne.n	8007702 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80076f6:	f3ef 8311 	mrs	r3, BASEPRI
 80076fa:	603b      	str	r3, [r7, #0]
  return(result);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d007      	beq.n	8007712 <osKernelInitialize+0x3a>
 8007702:	4b0e      	ldr	r3, [pc, #56]	; (800773c <osKernelInitialize+0x64>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2b02      	cmp	r3, #2
 8007708:	d103      	bne.n	8007712 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800770a:	f06f 0305 	mvn.w	r3, #5
 800770e:	60fb      	str	r3, [r7, #12]
 8007710:	e00c      	b.n	800772c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007712:	4b0a      	ldr	r3, [pc, #40]	; (800773c <osKernelInitialize+0x64>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d105      	bne.n	8007726 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800771a:	4b08      	ldr	r3, [pc, #32]	; (800773c <osKernelInitialize+0x64>)
 800771c:	2201      	movs	r2, #1
 800771e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007720:	2300      	movs	r3, #0
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	e002      	b.n	800772c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007726:	f04f 33ff 	mov.w	r3, #4294967295
 800772a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800772c:	68fb      	ldr	r3, [r7, #12]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3714      	adds	r7, #20
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	20000674 	.word	0x20000674

08007740 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8007746:	f002 f89f 	bl	8009888 <xTaskGetSchedulerState>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d004      	beq.n	800775a <osKernelGetState+0x1a>
 8007750:	2b02      	cmp	r3, #2
 8007752:	d105      	bne.n	8007760 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8007754:	2302      	movs	r3, #2
 8007756:	607b      	str	r3, [r7, #4]
      break;
 8007758:	e00c      	b.n	8007774 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800775a:	2303      	movs	r3, #3
 800775c:	607b      	str	r3, [r7, #4]
      break;
 800775e:	e009      	b.n	8007774 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8007760:	4b07      	ldr	r3, [pc, #28]	; (8007780 <osKernelGetState+0x40>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d102      	bne.n	800776e <osKernelGetState+0x2e>
        state = osKernelReady;
 8007768:	2301      	movs	r3, #1
 800776a:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800776c:	e001      	b.n	8007772 <osKernelGetState+0x32>
        state = osKernelInactive;
 800776e:	2300      	movs	r3, #0
 8007770:	607b      	str	r3, [r7, #4]
      break;
 8007772:	bf00      	nop
  }

  return (state);
 8007774:	687b      	ldr	r3, [r7, #4]
}
 8007776:	4618      	mov	r0, r3
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	20000674 	.word	0x20000674

08007784 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800778a:	f3ef 8305 	mrs	r3, IPSR
 800778e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007790:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007792:	2b00      	cmp	r3, #0
 8007794:	d10f      	bne.n	80077b6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007796:	f3ef 8310 	mrs	r3, PRIMASK
 800779a:	607b      	str	r3, [r7, #4]
  return(result);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d105      	bne.n	80077ae <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80077a2:	f3ef 8311 	mrs	r3, BASEPRI
 80077a6:	603b      	str	r3, [r7, #0]
  return(result);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d007      	beq.n	80077be <osKernelStart+0x3a>
 80077ae:	4b0f      	ldr	r3, [pc, #60]	; (80077ec <osKernelStart+0x68>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d103      	bne.n	80077be <osKernelStart+0x3a>
    stat = osErrorISR;
 80077b6:	f06f 0305 	mvn.w	r3, #5
 80077ba:	60fb      	str	r3, [r7, #12]
 80077bc:	e010      	b.n	80077e0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80077be:	4b0b      	ldr	r3, [pc, #44]	; (80077ec <osKernelStart+0x68>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d109      	bne.n	80077da <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80077c6:	f7ff ff80 	bl	80076ca <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80077ca:	4b08      	ldr	r3, [pc, #32]	; (80077ec <osKernelStart+0x68>)
 80077cc:	2202      	movs	r2, #2
 80077ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80077d0:	f001 fbea 	bl	8008fa8 <vTaskStartScheduler>
      stat = osOK;
 80077d4:	2300      	movs	r3, #0
 80077d6:	60fb      	str	r3, [r7, #12]
 80077d8:	e002      	b.n	80077e0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80077da:	f04f 33ff 	mov.w	r3, #4294967295
 80077de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80077e0:	68fb      	ldr	r3, [r7, #12]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	20000674 	.word	0x20000674

080077f0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077f6:	f3ef 8305 	mrs	r3, IPSR
 80077fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80077fc:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d10f      	bne.n	8007822 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007802:	f3ef 8310 	mrs	r3, PRIMASK
 8007806:	607b      	str	r3, [r7, #4]
  return(result);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d105      	bne.n	800781a <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800780e:	f3ef 8311 	mrs	r3, BASEPRI
 8007812:	603b      	str	r3, [r7, #0]
  return(result);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d007      	beq.n	800782a <osKernelGetTickCount+0x3a>
 800781a:	4b08      	ldr	r3, [pc, #32]	; (800783c <osKernelGetTickCount+0x4c>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2b02      	cmp	r3, #2
 8007820:	d103      	bne.n	800782a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8007822:	f001 fce9 	bl	80091f8 <xTaskGetTickCountFromISR>
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	e002      	b.n	8007830 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800782a:	f001 fcd5 	bl	80091d8 <xTaskGetTickCount>
 800782e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8007830:	68fb      	ldr	r3, [r7, #12]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	20000674 	.word	0x20000674

08007840 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007840:	b580      	push	{r7, lr}
 8007842:	b090      	sub	sp, #64	; 0x40
 8007844:	af04      	add	r7, sp, #16
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800784c:	2300      	movs	r3, #0
 800784e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007850:	f3ef 8305 	mrs	r3, IPSR
 8007854:	61fb      	str	r3, [r7, #28]
  return(result);
 8007856:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007858:	2b00      	cmp	r3, #0
 800785a:	f040 808f 	bne.w	800797c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800785e:	f3ef 8310 	mrs	r3, PRIMASK
 8007862:	61bb      	str	r3, [r7, #24]
  return(result);
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d105      	bne.n	8007876 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800786a:	f3ef 8311 	mrs	r3, BASEPRI
 800786e:	617b      	str	r3, [r7, #20]
  return(result);
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d003      	beq.n	800787e <osThreadNew+0x3e>
 8007876:	4b44      	ldr	r3, [pc, #272]	; (8007988 <osThreadNew+0x148>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2b02      	cmp	r3, #2
 800787c:	d07e      	beq.n	800797c <osThreadNew+0x13c>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d07b      	beq.n	800797c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007884:	2380      	movs	r3, #128	; 0x80
 8007886:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007888:	2318      	movs	r3, #24
 800788a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800788c:	2300      	movs	r3, #0
 800788e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007890:	f04f 33ff 	mov.w	r3, #4294967295
 8007894:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d045      	beq.n	8007928 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d002      	beq.n	80078aa <osThreadNew+0x6a>
        name = attr->name;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	699b      	ldr	r3, [r3, #24]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d002      	beq.n	80078b8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80078b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d008      	beq.n	80078d0 <osThreadNew+0x90>
 80078be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c0:	2b38      	cmp	r3, #56	; 0x38
 80078c2:	d805      	bhi.n	80078d0 <osThreadNew+0x90>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	f003 0301 	and.w	r3, r3, #1
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d001      	beq.n	80078d4 <osThreadNew+0x94>
        return (NULL);
 80078d0:	2300      	movs	r3, #0
 80078d2:	e054      	b.n	800797e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d003      	beq.n	80078e4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	089b      	lsrs	r3, r3, #2
 80078e2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00e      	beq.n	800790a <osThreadNew+0xca>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	2b5b      	cmp	r3, #91	; 0x5b
 80078f2:	d90a      	bls.n	800790a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d006      	beq.n	800790a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	695b      	ldr	r3, [r3, #20]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d002      	beq.n	800790a <osThreadNew+0xca>
        mem = 1;
 8007904:	2301      	movs	r3, #1
 8007906:	623b      	str	r3, [r7, #32]
 8007908:	e010      	b.n	800792c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d10c      	bne.n	800792c <osThreadNew+0xec>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d108      	bne.n	800792c <osThreadNew+0xec>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d104      	bne.n	800792c <osThreadNew+0xec>
          mem = 0;
 8007922:	2300      	movs	r3, #0
 8007924:	623b      	str	r3, [r7, #32]
 8007926:	e001      	b.n	800792c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007928:	2300      	movs	r3, #0
 800792a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	2b01      	cmp	r3, #1
 8007930:	d110      	bne.n	8007954 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800793a:	9202      	str	r2, [sp, #8]
 800793c:	9301      	str	r3, [sp, #4]
 800793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007946:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f001 f94d 	bl	8008be8 <xTaskCreateStatic>
 800794e:	4603      	mov	r3, r0
 8007950:	613b      	str	r3, [r7, #16]
 8007952:	e013      	b.n	800797c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007954:	6a3b      	ldr	r3, [r7, #32]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d110      	bne.n	800797c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800795a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795c:	b29a      	uxth	r2, r3
 800795e:	f107 0310 	add.w	r3, r7, #16
 8007962:	9301      	str	r3, [sp, #4]
 8007964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f001 f99e 	bl	8008cae <xTaskCreate>
 8007972:	4603      	mov	r3, r0
 8007974:	2b01      	cmp	r3, #1
 8007976:	d001      	beq.n	800797c <osThreadNew+0x13c>
          hTask = NULL;
 8007978:	2300      	movs	r3, #0
 800797a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800797c:	693b      	ldr	r3, [r7, #16]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3730      	adds	r7, #48	; 0x30
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	20000674 	.word	0x20000674

0800798c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800798c:	b580      	push	{r7, lr}
 800798e:	b086      	sub	sp, #24
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007994:	f3ef 8305 	mrs	r3, IPSR
 8007998:	613b      	str	r3, [r7, #16]
  return(result);
 800799a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10f      	bne.n	80079c0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079a0:	f3ef 8310 	mrs	r3, PRIMASK
 80079a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d105      	bne.n	80079b8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80079ac:	f3ef 8311 	mrs	r3, BASEPRI
 80079b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d007      	beq.n	80079c8 <osDelay+0x3c>
 80079b8:	4b0a      	ldr	r3, [pc, #40]	; (80079e4 <osDelay+0x58>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d103      	bne.n	80079c8 <osDelay+0x3c>
    stat = osErrorISR;
 80079c0:	f06f 0305 	mvn.w	r3, #5
 80079c4:	617b      	str	r3, [r7, #20]
 80079c6:	e007      	b.n	80079d8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80079c8:	2300      	movs	r3, #0
 80079ca:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d002      	beq.n	80079d8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f001 fab2 	bl	8008f3c <vTaskDelay>
    }
  }

  return (stat);
 80079d8:	697b      	ldr	r3, [r7, #20]
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3718      	adds	r7, #24
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	20000674 	.word	0x20000674

080079e8 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f002 fc29 	bl	800a248 <pvTimerGetTimerID>
 80079f6:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d005      	beq.n	8007a0a <TimerCallback+0x22>
    callb->func (callb->arg);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	6852      	ldr	r2, [r2, #4]
 8007a06:	4610      	mov	r0, r2
 8007a08:	4798      	blx	r3
  }
}
 8007a0a:	bf00      	nop
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
	...

08007a14 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b08e      	sub	sp, #56	; 0x38
 8007a18:	af02      	add	r7, sp, #8
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	607a      	str	r2, [r7, #4]
 8007a1e:	603b      	str	r3, [r7, #0]
 8007a20:	460b      	mov	r3, r1
 8007a22:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8007a24:	2300      	movs	r3, #0
 8007a26:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a28:	f3ef 8305 	mrs	r3, IPSR
 8007a2c:	61bb      	str	r3, [r7, #24]
  return(result);
 8007a2e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d16a      	bne.n	8007b0a <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a34:	f3ef 8310 	mrs	r3, PRIMASK
 8007a38:	617b      	str	r3, [r7, #20]
  return(result);
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d105      	bne.n	8007a4c <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a40:	f3ef 8311 	mrs	r3, BASEPRI
 8007a44:	613b      	str	r3, [r7, #16]
  return(result);
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d003      	beq.n	8007a54 <osTimerNew+0x40>
 8007a4c:	4b31      	ldr	r3, [pc, #196]	; (8007b14 <osTimerNew+0x100>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d05a      	beq.n	8007b0a <osTimerNew+0xf6>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d057      	beq.n	8007b0a <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8007a5a:	2008      	movs	r0, #8
 8007a5c:	f002 fe52 	bl	800a704 <pvPortMalloc>
 8007a60:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d050      	beq.n	8007b0a <osTimerNew+0xf6>
      callb->func = func;
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8007a74:	7afb      	ldrb	r3, [r7, #11]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d102      	bne.n	8007a80 <osTimerNew+0x6c>
        reload = pdFALSE;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a7e:	e001      	b.n	8007a84 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8007a80:	2301      	movs	r3, #1
 8007a82:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8007a84:	f04f 33ff 	mov.w	r3, #4294967295
 8007a88:	623b      	str	r3, [r7, #32]
      name = NULL;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d01c      	beq.n	8007ace <osTimerNew+0xba>
        if (attr->name != NULL) {
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d002      	beq.n	8007aa2 <osTimerNew+0x8e>
          name = attr->name;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d006      	beq.n	8007ab8 <osTimerNew+0xa4>
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	2b2b      	cmp	r3, #43	; 0x2b
 8007ab0:	d902      	bls.n	8007ab8 <osTimerNew+0xa4>
          mem = 1;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	623b      	str	r3, [r7, #32]
 8007ab6:	e00c      	b.n	8007ad2 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d108      	bne.n	8007ad2 <osTimerNew+0xbe>
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d104      	bne.n	8007ad2 <osTimerNew+0xbe>
            mem = 0;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	623b      	str	r3, [r7, #32]
 8007acc:	e001      	b.n	8007ad2 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8007ad2:	6a3b      	ldr	r3, [r7, #32]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d10c      	bne.n	8007af2 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	9301      	str	r3, [sp, #4]
 8007ade:	4b0e      	ldr	r3, [pc, #56]	; (8007b18 <osTimerNew+0x104>)
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ae6:	2101      	movs	r1, #1
 8007ae8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007aea:	f002 f81c 	bl	8009b26 <xTimerCreateStatic>
 8007aee:	62b8      	str	r0, [r7, #40]	; 0x28
 8007af0:	e00b      	b.n	8007b0a <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8007af2:	6a3b      	ldr	r3, [r7, #32]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d108      	bne.n	8007b0a <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8007af8:	4b07      	ldr	r3, [pc, #28]	; (8007b18 <osTimerNew+0x104>)
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b00:	2101      	movs	r1, #1
 8007b02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b04:	f001 ffee 	bl	8009ae4 <xTimerCreate>
 8007b08:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8007b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3730      	adds	r7, #48	; 0x30
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	20000674 	.word	0x20000674
 8007b18:	080079e9 	.word	0x080079e9

08007b1c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b08a      	sub	sp, #40	; 0x28
 8007b20:	af02      	add	r7, sp, #8
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b2a:	f3ef 8305 	mrs	r3, IPSR
 8007b2e:	617b      	str	r3, [r7, #20]
  return(result);
 8007b30:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10f      	bne.n	8007b56 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b36:	f3ef 8310 	mrs	r3, PRIMASK
 8007b3a:	613b      	str	r3, [r7, #16]
  return(result);
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d105      	bne.n	8007b4e <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007b42:	f3ef 8311 	mrs	r3, BASEPRI
 8007b46:	60fb      	str	r3, [r7, #12]
  return(result);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d007      	beq.n	8007b5e <osTimerStart+0x42>
 8007b4e:	4b12      	ldr	r3, [pc, #72]	; (8007b98 <osTimerStart+0x7c>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	d103      	bne.n	8007b5e <osTimerStart+0x42>
    stat = osErrorISR;
 8007b56:	f06f 0305 	mvn.w	r3, #5
 8007b5a:	61fb      	str	r3, [r7, #28]
 8007b5c:	e017      	b.n	8007b8e <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d103      	bne.n	8007b6c <osTimerStart+0x50>
    stat = osErrorParameter;
 8007b64:	f06f 0303 	mvn.w	r3, #3
 8007b68:	61fb      	str	r3, [r7, #28]
 8007b6a:	e010      	b.n	8007b8e <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	9300      	str	r3, [sp, #0]
 8007b70:	2300      	movs	r3, #0
 8007b72:	683a      	ldr	r2, [r7, #0]
 8007b74:	2104      	movs	r1, #4
 8007b76:	69b8      	ldr	r0, [r7, #24]
 8007b78:	f002 f854 	bl	8009c24 <xTimerGenericCommand>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d102      	bne.n	8007b88 <osTimerStart+0x6c>
      stat = osOK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	61fb      	str	r3, [r7, #28]
 8007b86:	e002      	b.n	8007b8e <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8007b88:	f06f 0302 	mvn.w	r3, #2
 8007b8c:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8007b8e:	69fb      	ldr	r3, [r7, #28]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3720      	adds	r7, #32
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	20000674 	.word	0x20000674

08007b9c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b08c      	sub	sp, #48	; 0x30
 8007ba0:	af02      	add	r7, sp, #8
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bac:	f3ef 8305 	mrs	r3, IPSR
 8007bb0:	61bb      	str	r3, [r7, #24]
  return(result);
 8007bb2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d16f      	bne.n	8007c98 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bb8:	f3ef 8310 	mrs	r3, PRIMASK
 8007bbc:	617b      	str	r3, [r7, #20]
  return(result);
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d105      	bne.n	8007bd0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007bc4:	f3ef 8311 	mrs	r3, BASEPRI
 8007bc8:	613b      	str	r3, [r7, #16]
  return(result);
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d003      	beq.n	8007bd8 <osMessageQueueNew+0x3c>
 8007bd0:	4b34      	ldr	r3, [pc, #208]	; (8007ca4 <osMessageQueueNew+0x108>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d05f      	beq.n	8007c98 <osMessageQueueNew+0xfc>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d05c      	beq.n	8007c98 <osMessageQueueNew+0xfc>
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d059      	beq.n	8007c98 <osMessageQueueNew+0xfc>
    mem = -1;
 8007be4:	f04f 33ff 	mov.w	r3, #4294967295
 8007be8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d029      	beq.n	8007c44 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d012      	beq.n	8007c1e <osMessageQueueNew+0x82>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	2b4f      	cmp	r3, #79	; 0x4f
 8007bfe:	d90e      	bls.n	8007c1e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00a      	beq.n	8007c1e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	695a      	ldr	r2, [r3, #20]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	68b9      	ldr	r1, [r7, #8]
 8007c10:	fb01 f303 	mul.w	r3, r1, r3
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d302      	bcc.n	8007c1e <osMessageQueueNew+0x82>
        mem = 1;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	623b      	str	r3, [r7, #32]
 8007c1c:	e014      	b.n	8007c48 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d110      	bne.n	8007c48 <osMessageQueueNew+0xac>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10c      	bne.n	8007c48 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d108      	bne.n	8007c48 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	695b      	ldr	r3, [r3, #20]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d104      	bne.n	8007c48 <osMessageQueueNew+0xac>
          mem = 0;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	623b      	str	r3, [r7, #32]
 8007c42:	e001      	b.n	8007c48 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8007c44:	2300      	movs	r3, #0
 8007c46:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007c48:	6a3b      	ldr	r3, [r7, #32]
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d10b      	bne.n	8007c66 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	691a      	ldr	r2, [r3, #16]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	2100      	movs	r1, #0
 8007c58:	9100      	str	r1, [sp, #0]
 8007c5a:	68b9      	ldr	r1, [r7, #8]
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f000 fa5b 	bl	8008118 <xQueueGenericCreateStatic>
 8007c62:	6278      	str	r0, [r7, #36]	; 0x24
 8007c64:	e008      	b.n	8007c78 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8007c66:	6a3b      	ldr	r3, [r7, #32]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d105      	bne.n	8007c78 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	68b9      	ldr	r1, [r7, #8]
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f000 fad3 	bl	800821c <xQueueGenericCreate>
 8007c76:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00c      	beq.n	8007c98 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d003      	beq.n	8007c8c <osMessageQueueNew+0xf0>
        name = attr->name;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	61fb      	str	r3, [r7, #28]
 8007c8a:	e001      	b.n	8007c90 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8007c90:	69f9      	ldr	r1, [r7, #28]
 8007c92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c94:	f000 ff4a 	bl	8008b2c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3728      	adds	r7, #40	; 0x28
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	20000674 	.word	0x20000674

08007ca8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b08a      	sub	sp, #40	; 0x28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	603b      	str	r3, [r7, #0]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cc0:	f3ef 8305 	mrs	r3, IPSR
 8007cc4:	61fb      	str	r3, [r7, #28]
  return(result);
 8007cc6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d10f      	bne.n	8007cec <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ccc:	f3ef 8310 	mrs	r3, PRIMASK
 8007cd0:	61bb      	str	r3, [r7, #24]
  return(result);
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d105      	bne.n	8007ce4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007cd8:	f3ef 8311 	mrs	r3, BASEPRI
 8007cdc:	617b      	str	r3, [r7, #20]
  return(result);
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d02c      	beq.n	8007d3e <osMessageQueuePut+0x96>
 8007ce4:	4b28      	ldr	r3, [pc, #160]	; (8007d88 <osMessageQueuePut+0xe0>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d128      	bne.n	8007d3e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007cec:	6a3b      	ldr	r3, [r7, #32]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d005      	beq.n	8007cfe <osMessageQueuePut+0x56>
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d002      	beq.n	8007cfe <osMessageQueuePut+0x56>
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d003      	beq.n	8007d06 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8007cfe:	f06f 0303 	mvn.w	r3, #3
 8007d02:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007d04:	e039      	b.n	8007d7a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8007d06:	2300      	movs	r3, #0
 8007d08:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007d0a:	f107 0210 	add.w	r2, r7, #16
 8007d0e:	2300      	movs	r3, #0
 8007d10:	68b9      	ldr	r1, [r7, #8]
 8007d12:	6a38      	ldr	r0, [r7, #32]
 8007d14:	f000 fbee 	bl	80084f4 <xQueueGenericSendFromISR>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d003      	beq.n	8007d26 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8007d1e:	f06f 0302 	mvn.w	r3, #2
 8007d22:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007d24:	e029      	b.n	8007d7a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d026      	beq.n	8007d7a <osMessageQueuePut+0xd2>
 8007d2c:	4b17      	ldr	r3, [pc, #92]	; (8007d8c <osMessageQueuePut+0xe4>)
 8007d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d32:	601a      	str	r2, [r3, #0]
 8007d34:	f3bf 8f4f 	dsb	sy
 8007d38:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007d3c:	e01d      	b.n	8007d7a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007d3e:	6a3b      	ldr	r3, [r7, #32]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d002      	beq.n	8007d4a <osMessageQueuePut+0xa2>
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d103      	bne.n	8007d52 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8007d4a:	f06f 0303 	mvn.w	r3, #3
 8007d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8007d50:	e014      	b.n	8007d7c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007d52:	2300      	movs	r3, #0
 8007d54:	683a      	ldr	r2, [r7, #0]
 8007d56:	68b9      	ldr	r1, [r7, #8]
 8007d58:	6a38      	ldr	r0, [r7, #32]
 8007d5a:	f000 fac5 	bl	80082e8 <xQueueGenericSend>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d00b      	beq.n	8007d7c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d003      	beq.n	8007d72 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8007d6a:	f06f 0301 	mvn.w	r3, #1
 8007d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8007d70:	e004      	b.n	8007d7c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8007d72:	f06f 0302 	mvn.w	r3, #2
 8007d76:	627b      	str	r3, [r7, #36]	; 0x24
 8007d78:	e000      	b.n	8007d7c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007d7a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3728      	adds	r7, #40	; 0x28
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	20000674 	.word	0x20000674
 8007d8c:	e000ed04 	.word	0xe000ed04

08007d90 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b08a      	sub	sp, #40	; 0x28
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
 8007d9c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007da2:	2300      	movs	r3, #0
 8007da4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007da6:	f3ef 8305 	mrs	r3, IPSR
 8007daa:	61fb      	str	r3, [r7, #28]
  return(result);
 8007dac:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d10f      	bne.n	8007dd2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007db2:	f3ef 8310 	mrs	r3, PRIMASK
 8007db6:	61bb      	str	r3, [r7, #24]
  return(result);
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d105      	bne.n	8007dca <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007dbe:	f3ef 8311 	mrs	r3, BASEPRI
 8007dc2:	617b      	str	r3, [r7, #20]
  return(result);
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d02c      	beq.n	8007e24 <osMessageQueueGet+0x94>
 8007dca:	4b28      	ldr	r3, [pc, #160]	; (8007e6c <osMessageQueueGet+0xdc>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d128      	bne.n	8007e24 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007dd2:	6a3b      	ldr	r3, [r7, #32]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d005      	beq.n	8007de4 <osMessageQueueGet+0x54>
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d002      	beq.n	8007de4 <osMessageQueueGet+0x54>
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d003      	beq.n	8007dec <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8007de4:	f06f 0303 	mvn.w	r3, #3
 8007de8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007dea:	e038      	b.n	8007e5e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8007dec:	2300      	movs	r3, #0
 8007dee:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007df0:	f107 0310 	add.w	r3, r7, #16
 8007df4:	461a      	mov	r2, r3
 8007df6:	68b9      	ldr	r1, [r7, #8]
 8007df8:	6a38      	ldr	r0, [r7, #32]
 8007dfa:	f000 fd01 	bl	8008800 <xQueueReceiveFromISR>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d003      	beq.n	8007e0c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8007e04:	f06f 0302 	mvn.w	r3, #2
 8007e08:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007e0a:	e028      	b.n	8007e5e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d025      	beq.n	8007e5e <osMessageQueueGet+0xce>
 8007e12:	4b17      	ldr	r3, [pc, #92]	; (8007e70 <osMessageQueueGet+0xe0>)
 8007e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e18:	601a      	str	r2, [r3, #0]
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007e22:	e01c      	b.n	8007e5e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007e24:	6a3b      	ldr	r3, [r7, #32]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d002      	beq.n	8007e30 <osMessageQueueGet+0xa0>
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d103      	bne.n	8007e38 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8007e30:	f06f 0303 	mvn.w	r3, #3
 8007e34:	627b      	str	r3, [r7, #36]	; 0x24
 8007e36:	e013      	b.n	8007e60 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007e38:	683a      	ldr	r2, [r7, #0]
 8007e3a:	68b9      	ldr	r1, [r7, #8]
 8007e3c:	6a38      	ldr	r0, [r7, #32]
 8007e3e:	f000 fbf9 	bl	8008634 <xQueueReceive>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d00b      	beq.n	8007e60 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d003      	beq.n	8007e56 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8007e4e:	f06f 0301 	mvn.w	r3, #1
 8007e52:	627b      	str	r3, [r7, #36]	; 0x24
 8007e54:	e004      	b.n	8007e60 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8007e56:	f06f 0302 	mvn.w	r3, #2
 8007e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e5c:	e000      	b.n	8007e60 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007e5e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3728      	adds	r7, #40	; 0x28
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	20000674 	.word	0x20000674
 8007e70:	e000ed04 	.word	0xe000ed04

08007e74 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	4a07      	ldr	r2, [pc, #28]	; (8007ea0 <vApplicationGetIdleTaskMemory+0x2c>)
 8007e84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	4a06      	ldr	r2, [pc, #24]	; (8007ea4 <vApplicationGetIdleTaskMemory+0x30>)
 8007e8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2280      	movs	r2, #128	; 0x80
 8007e90:	601a      	str	r2, [r3, #0]
}
 8007e92:	bf00      	nop
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	20000678 	.word	0x20000678
 8007ea4:	200006d4 	.word	0x200006d4

08007ea8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	4a07      	ldr	r2, [pc, #28]	; (8007ed4 <vApplicationGetTimerTaskMemory+0x2c>)
 8007eb8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	4a06      	ldr	r2, [pc, #24]	; (8007ed8 <vApplicationGetTimerTaskMemory+0x30>)
 8007ebe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ec6:	601a      	str	r2, [r3, #0]
}
 8007ec8:	bf00      	nop
 8007eca:	3714      	adds	r7, #20
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr
 8007ed4:	200008d4 	.word	0x200008d4
 8007ed8:	20000930 	.word	0x20000930

08007edc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f103 0208 	add.w	r2, r3, #8
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f103 0208 	add.w	r2, r3, #8
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f103 0208 	add.w	r2, r3, #8
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f2a:	bf00      	nop
 8007f2c:	370c      	adds	r7, #12
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr

08007f36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f36:	b480      	push	{r7}
 8007f38:	b085      	sub	sp, #20
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
 8007f3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	689a      	ldr	r2, [r3, #8]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	683a      	ldr	r2, [r7, #0]
 8007f5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	683a      	ldr	r2, [r7, #0]
 8007f60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	1c5a      	adds	r2, r3, #1
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	601a      	str	r2, [r3, #0]
}
 8007f72:	bf00      	nop
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b085      	sub	sp, #20
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
 8007f86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f94:	d103      	bne.n	8007f9e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	60fb      	str	r3, [r7, #12]
 8007f9c:	e00c      	b.n	8007fb8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	3308      	adds	r3, #8
 8007fa2:	60fb      	str	r3, [r7, #12]
 8007fa4:	e002      	b.n	8007fac <vListInsert+0x2e>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	60fb      	str	r3, [r7, #12]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d2f6      	bcs.n	8007fa6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	683a      	ldr	r2, [r7, #0]
 8007fc6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	683a      	ldr	r2, [r7, #0]
 8007fd2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	1c5a      	adds	r2, r3, #1
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	601a      	str	r2, [r3, #0]
}
 8007fe4:	bf00      	nop
 8007fe6:	3714      	adds	r7, #20
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	6892      	ldr	r2, [r2, #8]
 8008006:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	6852      	ldr	r2, [r2, #4]
 8008010:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	429a      	cmp	r2, r3
 800801a:	d103      	bne.n	8008024 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	689a      	ldr	r2, [r3, #8]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	1e5a      	subs	r2, r3, #1
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
}
 8008038:	4618      	mov	r0, r3
 800803a:	3714      	adds	r7, #20
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10c      	bne.n	8008072 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805c:	b672      	cpsid	i
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	b662      	cpsie	i
 800806c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800806e:	bf00      	nop
 8008070:	e7fe      	b.n	8008070 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8008072:	f002 fa1b 	bl	800a4ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800807e:	68f9      	ldr	r1, [r7, #12]
 8008080:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008082:	fb01 f303 	mul.w	r3, r1, r3
 8008086:	441a      	add	r2, r3
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080a2:	3b01      	subs	r3, #1
 80080a4:	68f9      	ldr	r1, [r7, #12]
 80080a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80080a8:	fb01 f303 	mul.w	r3, r1, r3
 80080ac:	441a      	add	r2, r3
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	22ff      	movs	r2, #255	; 0xff
 80080b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	22ff      	movs	r2, #255	; 0xff
 80080be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d114      	bne.n	80080f2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	691b      	ldr	r3, [r3, #16]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d01a      	beq.n	8008106 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	3310      	adds	r3, #16
 80080d4:	4618      	mov	r0, r3
 80080d6:	f001 fa11 	bl	80094fc <xTaskRemoveFromEventList>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d012      	beq.n	8008106 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80080e0:	4b0c      	ldr	r3, [pc, #48]	; (8008114 <xQueueGenericReset+0xd0>)
 80080e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080e6:	601a      	str	r2, [r3, #0]
 80080e8:	f3bf 8f4f 	dsb	sy
 80080ec:	f3bf 8f6f 	isb	sy
 80080f0:	e009      	b.n	8008106 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	3310      	adds	r3, #16
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7ff fef0 	bl	8007edc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	3324      	adds	r3, #36	; 0x24
 8008100:	4618      	mov	r0, r3
 8008102:	f7ff feeb 	bl	8007edc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008106:	f002 fa05 	bl	800a514 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800810a:	2301      	movs	r3, #1
}
 800810c:	4618      	mov	r0, r3
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	e000ed04 	.word	0xe000ed04

08008118 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008118:	b580      	push	{r7, lr}
 800811a:	b08e      	sub	sp, #56	; 0x38
 800811c:	af02      	add	r7, sp, #8
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
 8008124:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10c      	bne.n	8008146 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800812c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008130:	b672      	cpsid	i
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	b662      	cpsie	i
 8008140:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008142:	bf00      	nop
 8008144:	e7fe      	b.n	8008144 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d10c      	bne.n	8008166 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800814c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008150:	b672      	cpsid	i
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	b662      	cpsie	i
 8008160:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008162:	bf00      	nop
 8008164:	e7fe      	b.n	8008164 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d002      	beq.n	8008172 <xQueueGenericCreateStatic+0x5a>
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d001      	beq.n	8008176 <xQueueGenericCreateStatic+0x5e>
 8008172:	2301      	movs	r3, #1
 8008174:	e000      	b.n	8008178 <xQueueGenericCreateStatic+0x60>
 8008176:	2300      	movs	r3, #0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d10c      	bne.n	8008196 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800817c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008180:	b672      	cpsid	i
 8008182:	f383 8811 	msr	BASEPRI, r3
 8008186:	f3bf 8f6f 	isb	sy
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	b662      	cpsie	i
 8008190:	623b      	str	r3, [r7, #32]
}
 8008192:	bf00      	nop
 8008194:	e7fe      	b.n	8008194 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d102      	bne.n	80081a2 <xQueueGenericCreateStatic+0x8a>
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d101      	bne.n	80081a6 <xQueueGenericCreateStatic+0x8e>
 80081a2:	2301      	movs	r3, #1
 80081a4:	e000      	b.n	80081a8 <xQueueGenericCreateStatic+0x90>
 80081a6:	2300      	movs	r3, #0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10c      	bne.n	80081c6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80081ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b0:	b672      	cpsid	i
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	b662      	cpsie	i
 80081c0:	61fb      	str	r3, [r7, #28]
}
 80081c2:	bf00      	nop
 80081c4:	e7fe      	b.n	80081c4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80081c6:	2350      	movs	r3, #80	; 0x50
 80081c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	2b50      	cmp	r3, #80	; 0x50
 80081ce:	d00c      	beq.n	80081ea <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80081d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d4:	b672      	cpsid	i
 80081d6:	f383 8811 	msr	BASEPRI, r3
 80081da:	f3bf 8f6f 	isb	sy
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	b662      	cpsie	i
 80081e4:	61bb      	str	r3, [r7, #24]
}
 80081e6:	bf00      	nop
 80081e8:	e7fe      	b.n	80081e8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80081ea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80081f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00d      	beq.n	8008212 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80081f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f8:	2201      	movs	r2, #1
 80081fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80081fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	4613      	mov	r3, r2
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	68b9      	ldr	r1, [r7, #8]
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f000 f847 	bl	80082a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008214:	4618      	mov	r0, r3
 8008216:	3730      	adds	r7, #48	; 0x30
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800821c:	b580      	push	{r7, lr}
 800821e:	b08a      	sub	sp, #40	; 0x28
 8008220:	af02      	add	r7, sp, #8
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	4613      	mov	r3, r2
 8008228:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d10c      	bne.n	800824a <xQueueGenericCreate+0x2e>
	__asm volatile
 8008230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008234:	b672      	cpsid	i
 8008236:	f383 8811 	msr	BASEPRI, r3
 800823a:	f3bf 8f6f 	isb	sy
 800823e:	f3bf 8f4f 	dsb	sy
 8008242:	b662      	cpsie	i
 8008244:	613b      	str	r3, [r7, #16]
}
 8008246:	bf00      	nop
 8008248:	e7fe      	b.n	8008248 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d102      	bne.n	8008256 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008250:	2300      	movs	r3, #0
 8008252:	61fb      	str	r3, [r7, #28]
 8008254:	e004      	b.n	8008260 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	fb02 f303 	mul.w	r3, r2, r3
 800825e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	3350      	adds	r3, #80	; 0x50
 8008264:	4618      	mov	r0, r3
 8008266:	f002 fa4d 	bl	800a704 <pvPortMalloc>
 800826a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d011      	beq.n	8008296 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	3350      	adds	r3, #80	; 0x50
 800827a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008284:	79fa      	ldrb	r2, [r7, #7]
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	4613      	mov	r3, r2
 800828c:	697a      	ldr	r2, [r7, #20]
 800828e:	68b9      	ldr	r1, [r7, #8]
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f000 f805 	bl	80082a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008296:	69bb      	ldr	r3, [r7, #24]
	}
 8008298:	4618      	mov	r0, r3
 800829a:	3720      	adds	r7, #32
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
 80082ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d103      	bne.n	80082bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	69ba      	ldr	r2, [r7, #24]
 80082b8:	601a      	str	r2, [r3, #0]
 80082ba:	e002      	b.n	80082c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80082c8:	69bb      	ldr	r3, [r7, #24]
 80082ca:	68ba      	ldr	r2, [r7, #8]
 80082cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80082ce:	2101      	movs	r1, #1
 80082d0:	69b8      	ldr	r0, [r7, #24]
 80082d2:	f7ff feb7 	bl	8008044 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	78fa      	ldrb	r2, [r7, #3]
 80082da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80082de:	bf00      	nop
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
	...

080082e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b08e      	sub	sp, #56	; 0x38
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
 80082f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80082f6:	2300      	movs	r3, #0
 80082f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80082fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008300:	2b00      	cmp	r3, #0
 8008302:	d10c      	bne.n	800831e <xQueueGenericSend+0x36>
	__asm volatile
 8008304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008308:	b672      	cpsid	i
 800830a:	f383 8811 	msr	BASEPRI, r3
 800830e:	f3bf 8f6f 	isb	sy
 8008312:	f3bf 8f4f 	dsb	sy
 8008316:	b662      	cpsie	i
 8008318:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800831a:	bf00      	nop
 800831c:	e7fe      	b.n	800831c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d103      	bne.n	800832c <xQueueGenericSend+0x44>
 8008324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008328:	2b00      	cmp	r3, #0
 800832a:	d101      	bne.n	8008330 <xQueueGenericSend+0x48>
 800832c:	2301      	movs	r3, #1
 800832e:	e000      	b.n	8008332 <xQueueGenericSend+0x4a>
 8008330:	2300      	movs	r3, #0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d10c      	bne.n	8008350 <xQueueGenericSend+0x68>
	__asm volatile
 8008336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833a:	b672      	cpsid	i
 800833c:	f383 8811 	msr	BASEPRI, r3
 8008340:	f3bf 8f6f 	isb	sy
 8008344:	f3bf 8f4f 	dsb	sy
 8008348:	b662      	cpsie	i
 800834a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800834c:	bf00      	nop
 800834e:	e7fe      	b.n	800834e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	2b02      	cmp	r3, #2
 8008354:	d103      	bne.n	800835e <xQueueGenericSend+0x76>
 8008356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800835a:	2b01      	cmp	r3, #1
 800835c:	d101      	bne.n	8008362 <xQueueGenericSend+0x7a>
 800835e:	2301      	movs	r3, #1
 8008360:	e000      	b.n	8008364 <xQueueGenericSend+0x7c>
 8008362:	2300      	movs	r3, #0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10c      	bne.n	8008382 <xQueueGenericSend+0x9a>
	__asm volatile
 8008368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836c:	b672      	cpsid	i
 800836e:	f383 8811 	msr	BASEPRI, r3
 8008372:	f3bf 8f6f 	isb	sy
 8008376:	f3bf 8f4f 	dsb	sy
 800837a:	b662      	cpsie	i
 800837c:	623b      	str	r3, [r7, #32]
}
 800837e:	bf00      	nop
 8008380:	e7fe      	b.n	8008380 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008382:	f001 fa81 	bl	8009888 <xTaskGetSchedulerState>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d102      	bne.n	8008392 <xQueueGenericSend+0xaa>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d101      	bne.n	8008396 <xQueueGenericSend+0xae>
 8008392:	2301      	movs	r3, #1
 8008394:	e000      	b.n	8008398 <xQueueGenericSend+0xb0>
 8008396:	2300      	movs	r3, #0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d10c      	bne.n	80083b6 <xQueueGenericSend+0xce>
	__asm volatile
 800839c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a0:	b672      	cpsid	i
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	b662      	cpsie	i
 80083b0:	61fb      	str	r3, [r7, #28]
}
 80083b2:	bf00      	nop
 80083b4:	e7fe      	b.n	80083b4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80083b6:	f002 f879 	bl	800a4ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d302      	bcc.n	80083cc <xQueueGenericSend+0xe4>
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d129      	bne.n	8008420 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083cc:	683a      	ldr	r2, [r7, #0]
 80083ce:	68b9      	ldr	r1, [r7, #8]
 80083d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083d2:	f000 fa9b 	bl	800890c <prvCopyDataToQueue>
 80083d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d010      	beq.n	8008402 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e2:	3324      	adds	r3, #36	; 0x24
 80083e4:	4618      	mov	r0, r3
 80083e6:	f001 f889 	bl	80094fc <xTaskRemoveFromEventList>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d013      	beq.n	8008418 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80083f0:	4b3f      	ldr	r3, [pc, #252]	; (80084f0 <xQueueGenericSend+0x208>)
 80083f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083f6:	601a      	str	r2, [r3, #0]
 80083f8:	f3bf 8f4f 	dsb	sy
 80083fc:	f3bf 8f6f 	isb	sy
 8008400:	e00a      	b.n	8008418 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008404:	2b00      	cmp	r3, #0
 8008406:	d007      	beq.n	8008418 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008408:	4b39      	ldr	r3, [pc, #228]	; (80084f0 <xQueueGenericSend+0x208>)
 800840a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800840e:	601a      	str	r2, [r3, #0]
 8008410:	f3bf 8f4f 	dsb	sy
 8008414:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008418:	f002 f87c 	bl	800a514 <vPortExitCritical>
				return pdPASS;
 800841c:	2301      	movs	r3, #1
 800841e:	e063      	b.n	80084e8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d103      	bne.n	800842e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008426:	f002 f875 	bl	800a514 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800842a:	2300      	movs	r3, #0
 800842c:	e05c      	b.n	80084e8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800842e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008430:	2b00      	cmp	r3, #0
 8008432:	d106      	bne.n	8008442 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008434:	f107 0314 	add.w	r3, r7, #20
 8008438:	4618      	mov	r0, r3
 800843a:	f001 f8c5 	bl	80095c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800843e:	2301      	movs	r3, #1
 8008440:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008442:	f002 f867 	bl	800a514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008446:	f000 fe19 	bl	800907c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800844a:	f002 f82f 	bl	800a4ac <vPortEnterCritical>
 800844e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008450:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008454:	b25b      	sxtb	r3, r3
 8008456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800845a:	d103      	bne.n	8008464 <xQueueGenericSend+0x17c>
 800845c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845e:	2200      	movs	r2, #0
 8008460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008466:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800846a:	b25b      	sxtb	r3, r3
 800846c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008470:	d103      	bne.n	800847a <xQueueGenericSend+0x192>
 8008472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008474:	2200      	movs	r2, #0
 8008476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800847a:	f002 f84b 	bl	800a514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800847e:	1d3a      	adds	r2, r7, #4
 8008480:	f107 0314 	add.w	r3, r7, #20
 8008484:	4611      	mov	r1, r2
 8008486:	4618      	mov	r0, r3
 8008488:	f001 f8b4 	bl	80095f4 <xTaskCheckForTimeOut>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d124      	bne.n	80084dc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008492:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008494:	f000 fb32 	bl	8008afc <prvIsQueueFull>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d018      	beq.n	80084d0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800849e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a0:	3310      	adds	r3, #16
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	4611      	mov	r1, r2
 80084a6:	4618      	mov	r0, r3
 80084a8:	f000 ffd4 	bl	8009454 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80084ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084ae:	f000 fabd 	bl	8008a2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80084b2:	f000 fdf1 	bl	8009098 <xTaskResumeAll>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f47f af7c 	bne.w	80083b6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80084be:	4b0c      	ldr	r3, [pc, #48]	; (80084f0 <xQueueGenericSend+0x208>)
 80084c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084c4:	601a      	str	r2, [r3, #0]
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	f3bf 8f6f 	isb	sy
 80084ce:	e772      	b.n	80083b6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80084d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084d2:	f000 faab 	bl	8008a2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084d6:	f000 fddf 	bl	8009098 <xTaskResumeAll>
 80084da:	e76c      	b.n	80083b6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80084dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084de:	f000 faa5 	bl	8008a2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084e2:	f000 fdd9 	bl	8009098 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80084e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3738      	adds	r7, #56	; 0x38
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	e000ed04 	.word	0xe000ed04

080084f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b08e      	sub	sp, #56	; 0x38
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
 8008500:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008508:	2b00      	cmp	r3, #0
 800850a:	d10c      	bne.n	8008526 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800850c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008510:	b672      	cpsid	i
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	b662      	cpsie	i
 8008520:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008522:	bf00      	nop
 8008524:	e7fe      	b.n	8008524 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d103      	bne.n	8008534 <xQueueGenericSendFromISR+0x40>
 800852c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <xQueueGenericSendFromISR+0x44>
 8008534:	2301      	movs	r3, #1
 8008536:	e000      	b.n	800853a <xQueueGenericSendFromISR+0x46>
 8008538:	2300      	movs	r3, #0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d10c      	bne.n	8008558 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008542:	b672      	cpsid	i
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	b662      	cpsie	i
 8008552:	623b      	str	r3, [r7, #32]
}
 8008554:	bf00      	nop
 8008556:	e7fe      	b.n	8008556 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	2b02      	cmp	r3, #2
 800855c:	d103      	bne.n	8008566 <xQueueGenericSendFromISR+0x72>
 800855e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008562:	2b01      	cmp	r3, #1
 8008564:	d101      	bne.n	800856a <xQueueGenericSendFromISR+0x76>
 8008566:	2301      	movs	r3, #1
 8008568:	e000      	b.n	800856c <xQueueGenericSendFromISR+0x78>
 800856a:	2300      	movs	r3, #0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10c      	bne.n	800858a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8008570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008574:	b672      	cpsid	i
 8008576:	f383 8811 	msr	BASEPRI, r3
 800857a:	f3bf 8f6f 	isb	sy
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	b662      	cpsie	i
 8008584:	61fb      	str	r3, [r7, #28]
}
 8008586:	bf00      	nop
 8008588:	e7fe      	b.n	8008588 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800858a:	f002 f877 	bl	800a67c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800858e:	f3ef 8211 	mrs	r2, BASEPRI
 8008592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008596:	b672      	cpsid	i
 8008598:	f383 8811 	msr	BASEPRI, r3
 800859c:	f3bf 8f6f 	isb	sy
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	b662      	cpsie	i
 80085a6:	61ba      	str	r2, [r7, #24]
 80085a8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80085aa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80085ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d302      	bcc.n	80085c0 <xQueueGenericSendFromISR+0xcc>
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d12c      	bne.n	800861a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80085c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	68b9      	ldr	r1, [r7, #8]
 80085ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085d0:	f000 f99c 	bl	800890c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80085d4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80085d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085dc:	d112      	bne.n	8008604 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d016      	beq.n	8008614 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e8:	3324      	adds	r3, #36	; 0x24
 80085ea:	4618      	mov	r0, r3
 80085ec:	f000 ff86 	bl	80094fc <xTaskRemoveFromEventList>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00e      	beq.n	8008614 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00b      	beq.n	8008614 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	601a      	str	r2, [r3, #0]
 8008602:	e007      	b.n	8008614 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008604:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008608:	3301      	adds	r3, #1
 800860a:	b2db      	uxtb	r3, r3
 800860c:	b25a      	sxtb	r2, r3
 800860e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008614:	2301      	movs	r3, #1
 8008616:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008618:	e001      	b.n	800861e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800861a:	2300      	movs	r3, #0
 800861c:	637b      	str	r3, [r7, #52]	; 0x34
 800861e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008620:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008628:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800862a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800862c:	4618      	mov	r0, r3
 800862e:	3738      	adds	r7, #56	; 0x38
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b08c      	sub	sp, #48	; 0x30
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008640:	2300      	movs	r3, #0
 8008642:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864a:	2b00      	cmp	r3, #0
 800864c:	d10c      	bne.n	8008668 <xQueueReceive+0x34>
	__asm volatile
 800864e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008652:	b672      	cpsid	i
 8008654:	f383 8811 	msr	BASEPRI, r3
 8008658:	f3bf 8f6f 	isb	sy
 800865c:	f3bf 8f4f 	dsb	sy
 8008660:	b662      	cpsie	i
 8008662:	623b      	str	r3, [r7, #32]
}
 8008664:	bf00      	nop
 8008666:	e7fe      	b.n	8008666 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d103      	bne.n	8008676 <xQueueReceive+0x42>
 800866e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008672:	2b00      	cmp	r3, #0
 8008674:	d101      	bne.n	800867a <xQueueReceive+0x46>
 8008676:	2301      	movs	r3, #1
 8008678:	e000      	b.n	800867c <xQueueReceive+0x48>
 800867a:	2300      	movs	r3, #0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10c      	bne.n	800869a <xQueueReceive+0x66>
	__asm volatile
 8008680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008684:	b672      	cpsid	i
 8008686:	f383 8811 	msr	BASEPRI, r3
 800868a:	f3bf 8f6f 	isb	sy
 800868e:	f3bf 8f4f 	dsb	sy
 8008692:	b662      	cpsie	i
 8008694:	61fb      	str	r3, [r7, #28]
}
 8008696:	bf00      	nop
 8008698:	e7fe      	b.n	8008698 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800869a:	f001 f8f5 	bl	8009888 <xTaskGetSchedulerState>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d102      	bne.n	80086aa <xQueueReceive+0x76>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d101      	bne.n	80086ae <xQueueReceive+0x7a>
 80086aa:	2301      	movs	r3, #1
 80086ac:	e000      	b.n	80086b0 <xQueueReceive+0x7c>
 80086ae:	2300      	movs	r3, #0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d10c      	bne.n	80086ce <xQueueReceive+0x9a>
	__asm volatile
 80086b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b8:	b672      	cpsid	i
 80086ba:	f383 8811 	msr	BASEPRI, r3
 80086be:	f3bf 8f6f 	isb	sy
 80086c2:	f3bf 8f4f 	dsb	sy
 80086c6:	b662      	cpsie	i
 80086c8:	61bb      	str	r3, [r7, #24]
}
 80086ca:	bf00      	nop
 80086cc:	e7fe      	b.n	80086cc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80086ce:	f001 feed 	bl	800a4ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d01f      	beq.n	800871e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80086de:	68b9      	ldr	r1, [r7, #8]
 80086e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086e2:	f000 f97d 	bl	80089e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80086e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e8:	1e5a      	subs	r2, r3, #1
 80086ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00f      	beq.n	8008716 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f8:	3310      	adds	r3, #16
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 fefe 	bl	80094fc <xTaskRemoveFromEventList>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d007      	beq.n	8008716 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008706:	4b3d      	ldr	r3, [pc, #244]	; (80087fc <xQueueReceive+0x1c8>)
 8008708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800870c:	601a      	str	r2, [r3, #0]
 800870e:	f3bf 8f4f 	dsb	sy
 8008712:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008716:	f001 fefd 	bl	800a514 <vPortExitCritical>
				return pdPASS;
 800871a:	2301      	movs	r3, #1
 800871c:	e069      	b.n	80087f2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d103      	bne.n	800872c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008724:	f001 fef6 	bl	800a514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008728:	2300      	movs	r3, #0
 800872a:	e062      	b.n	80087f2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800872c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872e:	2b00      	cmp	r3, #0
 8008730:	d106      	bne.n	8008740 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008732:	f107 0310 	add.w	r3, r7, #16
 8008736:	4618      	mov	r0, r3
 8008738:	f000 ff46 	bl	80095c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800873c:	2301      	movs	r3, #1
 800873e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008740:	f001 fee8 	bl	800a514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008744:	f000 fc9a 	bl	800907c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008748:	f001 feb0 	bl	800a4ac <vPortEnterCritical>
 800874c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008752:	b25b      	sxtb	r3, r3
 8008754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008758:	d103      	bne.n	8008762 <xQueueReceive+0x12e>
 800875a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875c:	2200      	movs	r2, #0
 800875e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008764:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008768:	b25b      	sxtb	r3, r3
 800876a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800876e:	d103      	bne.n	8008778 <xQueueReceive+0x144>
 8008770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008772:	2200      	movs	r2, #0
 8008774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008778:	f001 fecc 	bl	800a514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800877c:	1d3a      	adds	r2, r7, #4
 800877e:	f107 0310 	add.w	r3, r7, #16
 8008782:	4611      	mov	r1, r2
 8008784:	4618      	mov	r0, r3
 8008786:	f000 ff35 	bl	80095f4 <xTaskCheckForTimeOut>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d123      	bne.n	80087d8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008792:	f000 f99d 	bl	8008ad0 <prvIsQueueEmpty>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d017      	beq.n	80087cc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800879c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879e:	3324      	adds	r3, #36	; 0x24
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	4611      	mov	r1, r2
 80087a4:	4618      	mov	r0, r3
 80087a6:	f000 fe55 	bl	8009454 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80087aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087ac:	f000 f93e 	bl	8008a2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80087b0:	f000 fc72 	bl	8009098 <xTaskResumeAll>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d189      	bne.n	80086ce <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80087ba:	4b10      	ldr	r3, [pc, #64]	; (80087fc <xQueueReceive+0x1c8>)
 80087bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087c0:	601a      	str	r2, [r3, #0]
 80087c2:	f3bf 8f4f 	dsb	sy
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	e780      	b.n	80086ce <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80087cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087ce:	f000 f92d 	bl	8008a2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087d2:	f000 fc61 	bl	8009098 <xTaskResumeAll>
 80087d6:	e77a      	b.n	80086ce <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80087d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087da:	f000 f927 	bl	8008a2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087de:	f000 fc5b 	bl	8009098 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087e4:	f000 f974 	bl	8008ad0 <prvIsQueueEmpty>
 80087e8:	4603      	mov	r3, r0
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f43f af6f 	beq.w	80086ce <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80087f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3730      	adds	r7, #48	; 0x30
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	e000ed04 	.word	0xe000ed04

08008800 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b08e      	sub	sp, #56	; 0x38
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008812:	2b00      	cmp	r3, #0
 8008814:	d10c      	bne.n	8008830 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8008816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881a:	b672      	cpsid	i
 800881c:	f383 8811 	msr	BASEPRI, r3
 8008820:	f3bf 8f6f 	isb	sy
 8008824:	f3bf 8f4f 	dsb	sy
 8008828:	b662      	cpsie	i
 800882a:	623b      	str	r3, [r7, #32]
}
 800882c:	bf00      	nop
 800882e:	e7fe      	b.n	800882e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d103      	bne.n	800883e <xQueueReceiveFromISR+0x3e>
 8008836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883a:	2b00      	cmp	r3, #0
 800883c:	d101      	bne.n	8008842 <xQueueReceiveFromISR+0x42>
 800883e:	2301      	movs	r3, #1
 8008840:	e000      	b.n	8008844 <xQueueReceiveFromISR+0x44>
 8008842:	2300      	movs	r3, #0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10c      	bne.n	8008862 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8008848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884c:	b672      	cpsid	i
 800884e:	f383 8811 	msr	BASEPRI, r3
 8008852:	f3bf 8f6f 	isb	sy
 8008856:	f3bf 8f4f 	dsb	sy
 800885a:	b662      	cpsie	i
 800885c:	61fb      	str	r3, [r7, #28]
}
 800885e:	bf00      	nop
 8008860:	e7fe      	b.n	8008860 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008862:	f001 ff0b 	bl	800a67c <vPortValidateInterruptPriority>
	__asm volatile
 8008866:	f3ef 8211 	mrs	r2, BASEPRI
 800886a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886e:	b672      	cpsid	i
 8008870:	f383 8811 	msr	BASEPRI, r3
 8008874:	f3bf 8f6f 	isb	sy
 8008878:	f3bf 8f4f 	dsb	sy
 800887c:	b662      	cpsie	i
 800887e:	61ba      	str	r2, [r7, #24]
 8008880:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008882:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008884:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800888a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800888c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888e:	2b00      	cmp	r3, #0
 8008890:	d02f      	beq.n	80088f2 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008894:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800889c:	68b9      	ldr	r1, [r7, #8]
 800889e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088a0:	f000 f89e 	bl	80089e0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80088a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a6:	1e5a      	subs	r2, r3, #1
 80088a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088aa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80088ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80088b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b4:	d112      	bne.n	80088dc <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d016      	beq.n	80088ec <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c0:	3310      	adds	r3, #16
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 fe1a 	bl	80094fc <xTaskRemoveFromEventList>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00e      	beq.n	80088ec <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00b      	beq.n	80088ec <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	601a      	str	r2, [r3, #0]
 80088da:	e007      	b.n	80088ec <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80088dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088e0:	3301      	adds	r3, #1
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	b25a      	sxtb	r2, r3
 80088e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80088ec:	2301      	movs	r3, #1
 80088ee:	637b      	str	r3, [r7, #52]	; 0x34
 80088f0:	e001      	b.n	80088f6 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80088f2:	2300      	movs	r3, #0
 80088f4:	637b      	str	r3, [r7, #52]	; 0x34
 80088f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	f383 8811 	msr	BASEPRI, r3
}
 8008900:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008904:	4618      	mov	r0, r3
 8008906:	3738      	adds	r7, #56	; 0x38
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b086      	sub	sp, #24
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008918:	2300      	movs	r3, #0
 800891a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008920:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008926:	2b00      	cmp	r3, #0
 8008928:	d10d      	bne.n	8008946 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d14d      	bne.n	80089ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	4618      	mov	r0, r3
 8008938:	f000 ffc4 	bl	80098c4 <xTaskPriorityDisinherit>
 800893c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2200      	movs	r2, #0
 8008942:	609a      	str	r2, [r3, #8]
 8008944:	e043      	b.n	80089ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d119      	bne.n	8008980 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6858      	ldr	r0, [r3, #4]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008954:	461a      	mov	r2, r3
 8008956:	68b9      	ldr	r1, [r7, #8]
 8008958:	f002 f8dc 	bl	800ab14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	685a      	ldr	r2, [r3, #4]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008964:	441a      	add	r2, r3
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	685a      	ldr	r2, [r3, #4]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	429a      	cmp	r2, r3
 8008974:	d32b      	bcc.n	80089ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	605a      	str	r2, [r3, #4]
 800897e:	e026      	b.n	80089ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	68d8      	ldr	r0, [r3, #12]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008988:	461a      	mov	r2, r3
 800898a:	68b9      	ldr	r1, [r7, #8]
 800898c:	f002 f8c2 	bl	800ab14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	68da      	ldr	r2, [r3, #12]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008998:	425b      	negs	r3, r3
 800899a:	441a      	add	r2, r3
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	68da      	ldr	r2, [r3, #12]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d207      	bcs.n	80089bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	689a      	ldr	r2, [r3, #8]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b4:	425b      	negs	r3, r3
 80089b6:	441a      	add	r2, r3
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d105      	bne.n	80089ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d002      	beq.n	80089ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	3b01      	subs	r3, #1
 80089cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	1c5a      	adds	r2, r3, #1
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80089d6:	697b      	ldr	r3, [r7, #20]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3718      	adds	r7, #24
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d018      	beq.n	8008a24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	68da      	ldr	r2, [r3, #12]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fa:	441a      	add	r2, r3
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	68da      	ldr	r2, [r3, #12]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d303      	bcc.n	8008a14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	68d9      	ldr	r1, [r3, #12]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	6838      	ldr	r0, [r7, #0]
 8008a20:	f002 f878 	bl	800ab14 <memcpy>
	}
}
 8008a24:	bf00      	nop
 8008a26:	3708      	adds	r7, #8
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008a34:	f001 fd3a 	bl	800a4ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a40:	e011      	b.n	8008a66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d012      	beq.n	8008a70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	3324      	adds	r3, #36	; 0x24
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f000 fd54 	bl	80094fc <xTaskRemoveFromEventList>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d001      	beq.n	8008a5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008a5a:	f000 fe31 	bl	80096c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008a5e:	7bfb      	ldrb	r3, [r7, #15]
 8008a60:	3b01      	subs	r3, #1
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	dce9      	bgt.n	8008a42 <prvUnlockQueue+0x16>
 8008a6e:	e000      	b.n	8008a72 <prvUnlockQueue+0x46>
					break;
 8008a70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	22ff      	movs	r2, #255	; 0xff
 8008a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008a7a:	f001 fd4b 	bl	800a514 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008a7e:	f001 fd15 	bl	800a4ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a8a:	e011      	b.n	8008ab0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	691b      	ldr	r3, [r3, #16]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d012      	beq.n	8008aba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	3310      	adds	r3, #16
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f000 fd2f 	bl	80094fc <xTaskRemoveFromEventList>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d001      	beq.n	8008aa8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008aa4:	f000 fe0c 	bl	80096c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008aa8:	7bbb      	ldrb	r3, [r7, #14]
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ab0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	dce9      	bgt.n	8008a8c <prvUnlockQueue+0x60>
 8008ab8:	e000      	b.n	8008abc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008aba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	22ff      	movs	r2, #255	; 0xff
 8008ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008ac4:	f001 fd26 	bl	800a514 <vPortExitCritical>
}
 8008ac8:	bf00      	nop
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ad8:	f001 fce8 	bl	800a4ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d102      	bne.n	8008aea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	60fb      	str	r3, [r7, #12]
 8008ae8:	e001      	b.n	8008aee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008aea:	2300      	movs	r3, #0
 8008aec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008aee:	f001 fd11 	bl	800a514 <vPortExitCritical>

	return xReturn;
 8008af2:	68fb      	ldr	r3, [r7, #12]
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3710      	adds	r7, #16
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b04:	f001 fcd2 	bl	800a4ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d102      	bne.n	8008b1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008b14:	2301      	movs	r3, #1
 8008b16:	60fb      	str	r3, [r7, #12]
 8008b18:	e001      	b.n	8008b1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b1e:	f001 fcf9 	bl	800a514 <vPortExitCritical>

	return xReturn;
 8008b22:	68fb      	ldr	r3, [r7, #12]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b36:	2300      	movs	r3, #0
 8008b38:	60fb      	str	r3, [r7, #12]
 8008b3a:	e014      	b.n	8008b66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008b3c:	4a0f      	ldr	r2, [pc, #60]	; (8008b7c <vQueueAddToRegistry+0x50>)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10b      	bne.n	8008b60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008b48:	490c      	ldr	r1, [pc, #48]	; (8008b7c <vQueueAddToRegistry+0x50>)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	683a      	ldr	r2, [r7, #0]
 8008b4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008b52:	4a0a      	ldr	r2, [pc, #40]	; (8008b7c <vQueueAddToRegistry+0x50>)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	00db      	lsls	r3, r3, #3
 8008b58:	4413      	add	r3, r2
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008b5e:	e006      	b.n	8008b6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	3301      	adds	r3, #1
 8008b64:	60fb      	str	r3, [r7, #12]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2b07      	cmp	r3, #7
 8008b6a:	d9e7      	bls.n	8008b3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008b6c:	bf00      	nop
 8008b6e:	bf00      	nop
 8008b70:	3714      	adds	r7, #20
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	20005438 	.word	0x20005438

08008b80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008b90:	f001 fc8c 	bl	800a4ac <vPortEnterCritical>
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b9a:	b25b      	sxtb	r3, r3
 8008b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba0:	d103      	bne.n	8008baa <vQueueWaitForMessageRestricted+0x2a>
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bb0:	b25b      	sxtb	r3, r3
 8008bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb6:	d103      	bne.n	8008bc0 <vQueueWaitForMessageRestricted+0x40>
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bc0:	f001 fca8 	bl	800a514 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d106      	bne.n	8008bda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	3324      	adds	r3, #36	; 0x24
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	68b9      	ldr	r1, [r7, #8]
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f000 fc63 	bl	80094a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008bda:	6978      	ldr	r0, [r7, #20]
 8008bdc:	f7ff ff26 	bl	8008a2c <prvUnlockQueue>
	}
 8008be0:	bf00      	nop
 8008be2:	3718      	adds	r7, #24
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b08e      	sub	sp, #56	; 0x38
 8008bec:	af04      	add	r7, sp, #16
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	607a      	str	r2, [r7, #4]
 8008bf4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d10c      	bne.n	8008c16 <xTaskCreateStatic+0x2e>
	__asm volatile
 8008bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c00:	b672      	cpsid	i
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	b662      	cpsie	i
 8008c10:	623b      	str	r3, [r7, #32]
}
 8008c12:	bf00      	nop
 8008c14:	e7fe      	b.n	8008c14 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d10c      	bne.n	8008c36 <xTaskCreateStatic+0x4e>
	__asm volatile
 8008c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c20:	b672      	cpsid	i
 8008c22:	f383 8811 	msr	BASEPRI, r3
 8008c26:	f3bf 8f6f 	isb	sy
 8008c2a:	f3bf 8f4f 	dsb	sy
 8008c2e:	b662      	cpsie	i
 8008c30:	61fb      	str	r3, [r7, #28]
}
 8008c32:	bf00      	nop
 8008c34:	e7fe      	b.n	8008c34 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008c36:	235c      	movs	r3, #92	; 0x5c
 8008c38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	2b5c      	cmp	r3, #92	; 0x5c
 8008c3e:	d00c      	beq.n	8008c5a <xTaskCreateStatic+0x72>
	__asm volatile
 8008c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c44:	b672      	cpsid	i
 8008c46:	f383 8811 	msr	BASEPRI, r3
 8008c4a:	f3bf 8f6f 	isb	sy
 8008c4e:	f3bf 8f4f 	dsb	sy
 8008c52:	b662      	cpsie	i
 8008c54:	61bb      	str	r3, [r7, #24]
}
 8008c56:	bf00      	nop
 8008c58:	e7fe      	b.n	8008c58 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008c5a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d01e      	beq.n	8008ca0 <xTaskCreateStatic+0xb8>
 8008c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d01b      	beq.n	8008ca0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c74:	2202      	movs	r2, #2
 8008c76:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	9303      	str	r3, [sp, #12]
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c80:	9302      	str	r3, [sp, #8]
 8008c82:	f107 0314 	add.w	r3, r7, #20
 8008c86:	9301      	str	r3, [sp, #4]
 8008c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8a:	9300      	str	r3, [sp, #0]
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	68b9      	ldr	r1, [r7, #8]
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f000 f850 	bl	8008d38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c9a:	f000 f8df 	bl	8008e5c <prvAddNewTaskToReadyList>
 8008c9e:	e001      	b.n	8008ca4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008ca4:	697b      	ldr	r3, [r7, #20]
	}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3728      	adds	r7, #40	; 0x28
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b08c      	sub	sp, #48	; 0x30
 8008cb2:	af04      	add	r7, sp, #16
 8008cb4:	60f8      	str	r0, [r7, #12]
 8008cb6:	60b9      	str	r1, [r7, #8]
 8008cb8:	603b      	str	r3, [r7, #0]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008cbe:	88fb      	ldrh	r3, [r7, #6]
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f001 fd1e 	bl	800a704 <pvPortMalloc>
 8008cc8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d00e      	beq.n	8008cee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008cd0:	205c      	movs	r0, #92	; 0x5c
 8008cd2:	f001 fd17 	bl	800a704 <pvPortMalloc>
 8008cd6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d003      	beq.n	8008ce6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008cde:	69fb      	ldr	r3, [r7, #28]
 8008ce0:	697a      	ldr	r2, [r7, #20]
 8008ce2:	631a      	str	r2, [r3, #48]	; 0x30
 8008ce4:	e005      	b.n	8008cf2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008ce6:	6978      	ldr	r0, [r7, #20]
 8008ce8:	f001 fdd6 	bl	800a898 <vPortFree>
 8008cec:	e001      	b.n	8008cf2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d017      	beq.n	8008d28 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008d00:	88fa      	ldrh	r2, [r7, #6]
 8008d02:	2300      	movs	r3, #0
 8008d04:	9303      	str	r3, [sp, #12]
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	9302      	str	r3, [sp, #8]
 8008d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0c:	9301      	str	r3, [sp, #4]
 8008d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d10:	9300      	str	r3, [sp, #0]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	68b9      	ldr	r1, [r7, #8]
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f000 f80e 	bl	8008d38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d1c:	69f8      	ldr	r0, [r7, #28]
 8008d1e:	f000 f89d 	bl	8008e5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008d22:	2301      	movs	r3, #1
 8008d24:	61bb      	str	r3, [r7, #24]
 8008d26:	e002      	b.n	8008d2e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d28:	f04f 33ff 	mov.w	r3, #4294967295
 8008d2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008d2e:	69bb      	ldr	r3, [r7, #24]
	}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3720      	adds	r7, #32
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b088      	sub	sp, #32
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
 8008d44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	461a      	mov	r2, r3
 8008d50:	21a5      	movs	r1, #165	; 0xa5
 8008d52:	f001 feed 	bl	800ab30 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d5a:	6879      	ldr	r1, [r7, #4]
 8008d5c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008d60:	440b      	add	r3, r1
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	4413      	add	r3, r2
 8008d66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	f023 0307 	bic.w	r3, r3, #7
 8008d6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	f003 0307 	and.w	r3, r3, #7
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00c      	beq.n	8008d94 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7e:	b672      	cpsid	i
 8008d80:	f383 8811 	msr	BASEPRI, r3
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	b662      	cpsie	i
 8008d8e:	617b      	str	r3, [r7, #20]
}
 8008d90:	bf00      	nop
 8008d92:	e7fe      	b.n	8008d92 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d01f      	beq.n	8008dda <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	61fb      	str	r3, [r7, #28]
 8008d9e:	e012      	b.n	8008dc6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008da0:	68ba      	ldr	r2, [r7, #8]
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	4413      	add	r3, r2
 8008da6:	7819      	ldrb	r1, [r3, #0]
 8008da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	4413      	add	r3, r2
 8008dae:	3334      	adds	r3, #52	; 0x34
 8008db0:	460a      	mov	r2, r1
 8008db2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008db4:	68ba      	ldr	r2, [r7, #8]
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	4413      	add	r3, r2
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d006      	beq.n	8008dce <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	61fb      	str	r3, [r7, #28]
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	2b0f      	cmp	r3, #15
 8008dca:	d9e9      	bls.n	8008da0 <prvInitialiseNewTask+0x68>
 8008dcc:	e000      	b.n	8008dd0 <prvInitialiseNewTask+0x98>
			{
				break;
 8008dce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008dd8:	e003      	b.n	8008de2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de4:	2b37      	cmp	r3, #55	; 0x37
 8008de6:	d901      	bls.n	8008dec <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008de8:	2337      	movs	r3, #55	; 0x37
 8008dea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008df0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008df6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e00:	3304      	adds	r3, #4
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7ff f88a 	bl	8007f1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0a:	3318      	adds	r3, #24
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7ff f885 	bl	8007f1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e26:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e30:	2200      	movs	r2, #0
 8008e32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e36:	683a      	ldr	r2, [r7, #0]
 8008e38:	68f9      	ldr	r1, [r7, #12]
 8008e3a:	69b8      	ldr	r0, [r7, #24]
 8008e3c:	f001 fa26 	bl	800a28c <pxPortInitialiseStack>
 8008e40:	4602      	mov	r2, r0
 8008e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e44:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d002      	beq.n	8008e52 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e52:	bf00      	nop
 8008e54:	3720      	adds	r7, #32
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
	...

08008e5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e64:	f001 fb22 	bl	800a4ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e68:	4b2d      	ldr	r3, [pc, #180]	; (8008f20 <prvAddNewTaskToReadyList+0xc4>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	4a2c      	ldr	r2, [pc, #176]	; (8008f20 <prvAddNewTaskToReadyList+0xc4>)
 8008e70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e72:	4b2c      	ldr	r3, [pc, #176]	; (8008f24 <prvAddNewTaskToReadyList+0xc8>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d109      	bne.n	8008e8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e7a:	4a2a      	ldr	r2, [pc, #168]	; (8008f24 <prvAddNewTaskToReadyList+0xc8>)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e80:	4b27      	ldr	r3, [pc, #156]	; (8008f20 <prvAddNewTaskToReadyList+0xc4>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d110      	bne.n	8008eaa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e88:	f000 fc3e 	bl	8009708 <prvInitialiseTaskLists>
 8008e8c:	e00d      	b.n	8008eaa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e8e:	4b26      	ldr	r3, [pc, #152]	; (8008f28 <prvAddNewTaskToReadyList+0xcc>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d109      	bne.n	8008eaa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e96:	4b23      	ldr	r3, [pc, #140]	; (8008f24 <prvAddNewTaskToReadyList+0xc8>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d802      	bhi.n	8008eaa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008ea4:	4a1f      	ldr	r2, [pc, #124]	; (8008f24 <prvAddNewTaskToReadyList+0xc8>)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008eaa:	4b20      	ldr	r3, [pc, #128]	; (8008f2c <prvAddNewTaskToReadyList+0xd0>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	4a1e      	ldr	r2, [pc, #120]	; (8008f2c <prvAddNewTaskToReadyList+0xd0>)
 8008eb2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008eb4:	4b1d      	ldr	r3, [pc, #116]	; (8008f2c <prvAddNewTaskToReadyList+0xd0>)
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ec0:	4b1b      	ldr	r3, [pc, #108]	; (8008f30 <prvAddNewTaskToReadyList+0xd4>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d903      	bls.n	8008ed0 <prvAddNewTaskToReadyList+0x74>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ecc:	4a18      	ldr	r2, [pc, #96]	; (8008f30 <prvAddNewTaskToReadyList+0xd4>)
 8008ece:	6013      	str	r3, [r2, #0]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	4413      	add	r3, r2
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	4a15      	ldr	r2, [pc, #84]	; (8008f34 <prvAddNewTaskToReadyList+0xd8>)
 8008ede:	441a      	add	r2, r3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	3304      	adds	r3, #4
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	4610      	mov	r0, r2
 8008ee8:	f7ff f825 	bl	8007f36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008eec:	f001 fb12 	bl	800a514 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008ef0:	4b0d      	ldr	r3, [pc, #52]	; (8008f28 <prvAddNewTaskToReadyList+0xcc>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00e      	beq.n	8008f16 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008ef8:	4b0a      	ldr	r3, [pc, #40]	; (8008f24 <prvAddNewTaskToReadyList+0xc8>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d207      	bcs.n	8008f16 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f06:	4b0c      	ldr	r3, [pc, #48]	; (8008f38 <prvAddNewTaskToReadyList+0xdc>)
 8008f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f0c:	601a      	str	r2, [r3, #0]
 8008f0e:	f3bf 8f4f 	dsb	sy
 8008f12:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f16:	bf00      	nop
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	20001204 	.word	0x20001204
 8008f24:	20000d30 	.word	0x20000d30
 8008f28:	20001210 	.word	0x20001210
 8008f2c:	20001220 	.word	0x20001220
 8008f30:	2000120c 	.word	0x2000120c
 8008f34:	20000d34 	.word	0x20000d34
 8008f38:	e000ed04 	.word	0xe000ed04

08008f3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008f44:	2300      	movs	r3, #0
 8008f46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d019      	beq.n	8008f82 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008f4e:	4b14      	ldr	r3, [pc, #80]	; (8008fa0 <vTaskDelay+0x64>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00c      	beq.n	8008f70 <vTaskDelay+0x34>
	__asm volatile
 8008f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5a:	b672      	cpsid	i
 8008f5c:	f383 8811 	msr	BASEPRI, r3
 8008f60:	f3bf 8f6f 	isb	sy
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	b662      	cpsie	i
 8008f6a:	60bb      	str	r3, [r7, #8]
}
 8008f6c:	bf00      	nop
 8008f6e:	e7fe      	b.n	8008f6e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008f70:	f000 f884 	bl	800907c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f74:	2100      	movs	r1, #0
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 fd16 	bl	80099a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008f7c:	f000 f88c 	bl	8009098 <xTaskResumeAll>
 8008f80:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d107      	bne.n	8008f98 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008f88:	4b06      	ldr	r3, [pc, #24]	; (8008fa4 <vTaskDelay+0x68>)
 8008f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f8e:	601a      	str	r2, [r3, #0]
 8008f90:	f3bf 8f4f 	dsb	sy
 8008f94:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f98:	bf00      	nop
 8008f9a:	3710      	adds	r7, #16
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	2000122c 	.word	0x2000122c
 8008fa4:	e000ed04 	.word	0xe000ed04

08008fa8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b08a      	sub	sp, #40	; 0x28
 8008fac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008fb6:	463a      	mov	r2, r7
 8008fb8:	1d39      	adds	r1, r7, #4
 8008fba:	f107 0308 	add.w	r3, r7, #8
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7fe ff58 	bl	8007e74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008fc4:	6839      	ldr	r1, [r7, #0]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	9202      	str	r2, [sp, #8]
 8008fcc:	9301      	str	r3, [sp, #4]
 8008fce:	2300      	movs	r3, #0
 8008fd0:	9300      	str	r3, [sp, #0]
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	460a      	mov	r2, r1
 8008fd6:	4923      	ldr	r1, [pc, #140]	; (8009064 <vTaskStartScheduler+0xbc>)
 8008fd8:	4823      	ldr	r0, [pc, #140]	; (8009068 <vTaskStartScheduler+0xc0>)
 8008fda:	f7ff fe05 	bl	8008be8 <xTaskCreateStatic>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	4a22      	ldr	r2, [pc, #136]	; (800906c <vTaskStartScheduler+0xc4>)
 8008fe2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008fe4:	4b21      	ldr	r3, [pc, #132]	; (800906c <vTaskStartScheduler+0xc4>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d002      	beq.n	8008ff2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008fec:	2301      	movs	r3, #1
 8008fee:	617b      	str	r3, [r7, #20]
 8008ff0:	e001      	b.n	8008ff6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d102      	bne.n	8009002 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008ffc:	f000 fd28 	bl	8009a50 <xTimerCreateTimerTask>
 8009000:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	2b01      	cmp	r3, #1
 8009006:	d118      	bne.n	800903a <vTaskStartScheduler+0x92>
	__asm volatile
 8009008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900c:	b672      	cpsid	i
 800900e:	f383 8811 	msr	BASEPRI, r3
 8009012:	f3bf 8f6f 	isb	sy
 8009016:	f3bf 8f4f 	dsb	sy
 800901a:	b662      	cpsie	i
 800901c:	613b      	str	r3, [r7, #16]
}
 800901e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009020:	4b13      	ldr	r3, [pc, #76]	; (8009070 <vTaskStartScheduler+0xc8>)
 8009022:	f04f 32ff 	mov.w	r2, #4294967295
 8009026:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009028:	4b12      	ldr	r3, [pc, #72]	; (8009074 <vTaskStartScheduler+0xcc>)
 800902a:	2201      	movs	r2, #1
 800902c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800902e:	4b12      	ldr	r3, [pc, #72]	; (8009078 <vTaskStartScheduler+0xd0>)
 8009030:	2200      	movs	r2, #0
 8009032:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009034:	f001 f9bc 	bl	800a3b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009038:	e010      	b.n	800905c <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009040:	d10c      	bne.n	800905c <vTaskStartScheduler+0xb4>
	__asm volatile
 8009042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009046:	b672      	cpsid	i
 8009048:	f383 8811 	msr	BASEPRI, r3
 800904c:	f3bf 8f6f 	isb	sy
 8009050:	f3bf 8f4f 	dsb	sy
 8009054:	b662      	cpsie	i
 8009056:	60fb      	str	r3, [r7, #12]
}
 8009058:	bf00      	nop
 800905a:	e7fe      	b.n	800905a <vTaskStartScheduler+0xb2>
}
 800905c:	bf00      	nop
 800905e:	3718      	adds	r7, #24
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	0800ab78 	.word	0x0800ab78
 8009068:	080096d9 	.word	0x080096d9
 800906c:	20001228 	.word	0x20001228
 8009070:	20001224 	.word	0x20001224
 8009074:	20001210 	.word	0x20001210
 8009078:	20001208 	.word	0x20001208

0800907c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800907c:	b480      	push	{r7}
 800907e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009080:	4b04      	ldr	r3, [pc, #16]	; (8009094 <vTaskSuspendAll+0x18>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	3301      	adds	r3, #1
 8009086:	4a03      	ldr	r2, [pc, #12]	; (8009094 <vTaskSuspendAll+0x18>)
 8009088:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800908a:	bf00      	nop
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr
 8009094:	2000122c 	.word	0x2000122c

08009098 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800909e:	2300      	movs	r3, #0
 80090a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80090a2:	2300      	movs	r3, #0
 80090a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80090a6:	4b43      	ldr	r3, [pc, #268]	; (80091b4 <xTaskResumeAll+0x11c>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d10c      	bne.n	80090c8 <xTaskResumeAll+0x30>
	__asm volatile
 80090ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b2:	b672      	cpsid	i
 80090b4:	f383 8811 	msr	BASEPRI, r3
 80090b8:	f3bf 8f6f 	isb	sy
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	b662      	cpsie	i
 80090c2:	603b      	str	r3, [r7, #0]
}
 80090c4:	bf00      	nop
 80090c6:	e7fe      	b.n	80090c6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80090c8:	f001 f9f0 	bl	800a4ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80090cc:	4b39      	ldr	r3, [pc, #228]	; (80091b4 <xTaskResumeAll+0x11c>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	3b01      	subs	r3, #1
 80090d2:	4a38      	ldr	r2, [pc, #224]	; (80091b4 <xTaskResumeAll+0x11c>)
 80090d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090d6:	4b37      	ldr	r3, [pc, #220]	; (80091b4 <xTaskResumeAll+0x11c>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d162      	bne.n	80091a4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80090de:	4b36      	ldr	r3, [pc, #216]	; (80091b8 <xTaskResumeAll+0x120>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d05e      	beq.n	80091a4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090e6:	e02f      	b.n	8009148 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090e8:	4b34      	ldr	r3, [pc, #208]	; (80091bc <xTaskResumeAll+0x124>)
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	3318      	adds	r3, #24
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fe ff7b 	bl	8007ff0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	3304      	adds	r3, #4
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fe ff76 	bl	8007ff0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009108:	4b2d      	ldr	r3, [pc, #180]	; (80091c0 <xTaskResumeAll+0x128>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	429a      	cmp	r2, r3
 800910e:	d903      	bls.n	8009118 <xTaskResumeAll+0x80>
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009114:	4a2a      	ldr	r2, [pc, #168]	; (80091c0 <xTaskResumeAll+0x128>)
 8009116:	6013      	str	r3, [r2, #0]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800911c:	4613      	mov	r3, r2
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	4413      	add	r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4a27      	ldr	r2, [pc, #156]	; (80091c4 <xTaskResumeAll+0x12c>)
 8009126:	441a      	add	r2, r3
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	3304      	adds	r3, #4
 800912c:	4619      	mov	r1, r3
 800912e:	4610      	mov	r0, r2
 8009130:	f7fe ff01 	bl	8007f36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009138:	4b23      	ldr	r3, [pc, #140]	; (80091c8 <xTaskResumeAll+0x130>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800913e:	429a      	cmp	r2, r3
 8009140:	d302      	bcc.n	8009148 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8009142:	4b22      	ldr	r3, [pc, #136]	; (80091cc <xTaskResumeAll+0x134>)
 8009144:	2201      	movs	r2, #1
 8009146:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009148:	4b1c      	ldr	r3, [pc, #112]	; (80091bc <xTaskResumeAll+0x124>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d1cb      	bne.n	80090e8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d001      	beq.n	800915a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009156:	f000 fb77 	bl	8009848 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800915a:	4b1d      	ldr	r3, [pc, #116]	; (80091d0 <xTaskResumeAll+0x138>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d010      	beq.n	8009188 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009166:	f000 f859 	bl	800921c <xTaskIncrementTick>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d002      	beq.n	8009176 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8009170:	4b16      	ldr	r3, [pc, #88]	; (80091cc <xTaskResumeAll+0x134>)
 8009172:	2201      	movs	r2, #1
 8009174:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	3b01      	subs	r3, #1
 800917a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1f1      	bne.n	8009166 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8009182:	4b13      	ldr	r3, [pc, #76]	; (80091d0 <xTaskResumeAll+0x138>)
 8009184:	2200      	movs	r2, #0
 8009186:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009188:	4b10      	ldr	r3, [pc, #64]	; (80091cc <xTaskResumeAll+0x134>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d009      	beq.n	80091a4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009190:	2301      	movs	r3, #1
 8009192:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009194:	4b0f      	ldr	r3, [pc, #60]	; (80091d4 <xTaskResumeAll+0x13c>)
 8009196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800919a:	601a      	str	r2, [r3, #0]
 800919c:	f3bf 8f4f 	dsb	sy
 80091a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80091a4:	f001 f9b6 	bl	800a514 <vPortExitCritical>

	return xAlreadyYielded;
 80091a8:	68bb      	ldr	r3, [r7, #8]
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	2000122c 	.word	0x2000122c
 80091b8:	20001204 	.word	0x20001204
 80091bc:	200011c4 	.word	0x200011c4
 80091c0:	2000120c 	.word	0x2000120c
 80091c4:	20000d34 	.word	0x20000d34
 80091c8:	20000d30 	.word	0x20000d30
 80091cc:	20001218 	.word	0x20001218
 80091d0:	20001214 	.word	0x20001214
 80091d4:	e000ed04 	.word	0xe000ed04

080091d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80091de:	4b05      	ldr	r3, [pc, #20]	; (80091f4 <xTaskGetTickCount+0x1c>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80091e4:	687b      	ldr	r3, [r7, #4]
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	370c      	adds	r7, #12
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	20001208 	.word	0x20001208

080091f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80091fe:	f001 fa3d 	bl	800a67c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009202:	2300      	movs	r3, #0
 8009204:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009206:	4b04      	ldr	r3, [pc, #16]	; (8009218 <xTaskGetTickCountFromISR+0x20>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800920c:	683b      	ldr	r3, [r7, #0]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3708      	adds	r7, #8
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	20001208 	.word	0x20001208

0800921c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b086      	sub	sp, #24
 8009220:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009222:	2300      	movs	r3, #0
 8009224:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009226:	4b50      	ldr	r3, [pc, #320]	; (8009368 <xTaskIncrementTick+0x14c>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	f040 808b 	bne.w	8009346 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009230:	4b4e      	ldr	r3, [pc, #312]	; (800936c <xTaskIncrementTick+0x150>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	3301      	adds	r3, #1
 8009236:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009238:	4a4c      	ldr	r2, [pc, #304]	; (800936c <xTaskIncrementTick+0x150>)
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d122      	bne.n	800928a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8009244:	4b4a      	ldr	r3, [pc, #296]	; (8009370 <xTaskIncrementTick+0x154>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00c      	beq.n	8009268 <xTaskIncrementTick+0x4c>
	__asm volatile
 800924e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009252:	b672      	cpsid	i
 8009254:	f383 8811 	msr	BASEPRI, r3
 8009258:	f3bf 8f6f 	isb	sy
 800925c:	f3bf 8f4f 	dsb	sy
 8009260:	b662      	cpsie	i
 8009262:	603b      	str	r3, [r7, #0]
}
 8009264:	bf00      	nop
 8009266:	e7fe      	b.n	8009266 <xTaskIncrementTick+0x4a>
 8009268:	4b41      	ldr	r3, [pc, #260]	; (8009370 <xTaskIncrementTick+0x154>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	60fb      	str	r3, [r7, #12]
 800926e:	4b41      	ldr	r3, [pc, #260]	; (8009374 <xTaskIncrementTick+0x158>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a3f      	ldr	r2, [pc, #252]	; (8009370 <xTaskIncrementTick+0x154>)
 8009274:	6013      	str	r3, [r2, #0]
 8009276:	4a3f      	ldr	r2, [pc, #252]	; (8009374 <xTaskIncrementTick+0x158>)
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6013      	str	r3, [r2, #0]
 800927c:	4b3e      	ldr	r3, [pc, #248]	; (8009378 <xTaskIncrementTick+0x15c>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	3301      	adds	r3, #1
 8009282:	4a3d      	ldr	r2, [pc, #244]	; (8009378 <xTaskIncrementTick+0x15c>)
 8009284:	6013      	str	r3, [r2, #0]
 8009286:	f000 fadf 	bl	8009848 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800928a:	4b3c      	ldr	r3, [pc, #240]	; (800937c <xTaskIncrementTick+0x160>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	693a      	ldr	r2, [r7, #16]
 8009290:	429a      	cmp	r2, r3
 8009292:	d349      	bcc.n	8009328 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009294:	4b36      	ldr	r3, [pc, #216]	; (8009370 <xTaskIncrementTick+0x154>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d104      	bne.n	80092a8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800929e:	4b37      	ldr	r3, [pc, #220]	; (800937c <xTaskIncrementTick+0x160>)
 80092a0:	f04f 32ff 	mov.w	r2, #4294967295
 80092a4:	601a      	str	r2, [r3, #0]
					break;
 80092a6:	e03f      	b.n	8009328 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092a8:	4b31      	ldr	r3, [pc, #196]	; (8009370 <xTaskIncrementTick+0x154>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80092b8:	693a      	ldr	r2, [r7, #16]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d203      	bcs.n	80092c8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80092c0:	4a2e      	ldr	r2, [pc, #184]	; (800937c <xTaskIncrementTick+0x160>)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80092c6:	e02f      	b.n	8009328 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	3304      	adds	r3, #4
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7fe fe8f 	bl	8007ff0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d004      	beq.n	80092e4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	3318      	adds	r3, #24
 80092de:	4618      	mov	r0, r3
 80092e0:	f7fe fe86 	bl	8007ff0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e8:	4b25      	ldr	r3, [pc, #148]	; (8009380 <xTaskIncrementTick+0x164>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d903      	bls.n	80092f8 <xTaskIncrementTick+0xdc>
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f4:	4a22      	ldr	r2, [pc, #136]	; (8009380 <xTaskIncrementTick+0x164>)
 80092f6:	6013      	str	r3, [r2, #0]
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092fc:	4613      	mov	r3, r2
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	4413      	add	r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	4a1f      	ldr	r2, [pc, #124]	; (8009384 <xTaskIncrementTick+0x168>)
 8009306:	441a      	add	r2, r3
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	3304      	adds	r3, #4
 800930c:	4619      	mov	r1, r3
 800930e:	4610      	mov	r0, r2
 8009310:	f7fe fe11 	bl	8007f36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009318:	4b1b      	ldr	r3, [pc, #108]	; (8009388 <xTaskIncrementTick+0x16c>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800931e:	429a      	cmp	r2, r3
 8009320:	d3b8      	bcc.n	8009294 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8009322:	2301      	movs	r3, #1
 8009324:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009326:	e7b5      	b.n	8009294 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009328:	4b17      	ldr	r3, [pc, #92]	; (8009388 <xTaskIncrementTick+0x16c>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800932e:	4915      	ldr	r1, [pc, #84]	; (8009384 <xTaskIncrementTick+0x168>)
 8009330:	4613      	mov	r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	4413      	add	r3, r2
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	440b      	add	r3, r1
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2b01      	cmp	r3, #1
 800933e:	d907      	bls.n	8009350 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8009340:	2301      	movs	r3, #1
 8009342:	617b      	str	r3, [r7, #20]
 8009344:	e004      	b.n	8009350 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009346:	4b11      	ldr	r3, [pc, #68]	; (800938c <xTaskIncrementTick+0x170>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	3301      	adds	r3, #1
 800934c:	4a0f      	ldr	r2, [pc, #60]	; (800938c <xTaskIncrementTick+0x170>)
 800934e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009350:	4b0f      	ldr	r3, [pc, #60]	; (8009390 <xTaskIncrementTick+0x174>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d001      	beq.n	800935c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8009358:	2301      	movs	r3, #1
 800935a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800935c:	697b      	ldr	r3, [r7, #20]
}
 800935e:	4618      	mov	r0, r3
 8009360:	3718      	adds	r7, #24
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
 8009366:	bf00      	nop
 8009368:	2000122c 	.word	0x2000122c
 800936c:	20001208 	.word	0x20001208
 8009370:	200011bc 	.word	0x200011bc
 8009374:	200011c0 	.word	0x200011c0
 8009378:	2000121c 	.word	0x2000121c
 800937c:	20001224 	.word	0x20001224
 8009380:	2000120c 	.word	0x2000120c
 8009384:	20000d34 	.word	0x20000d34
 8009388:	20000d30 	.word	0x20000d30
 800938c:	20001214 	.word	0x20001214
 8009390:	20001218 	.word	0x20001218

08009394 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800939a:	4b29      	ldr	r3, [pc, #164]	; (8009440 <vTaskSwitchContext+0xac>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d003      	beq.n	80093aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80093a2:	4b28      	ldr	r3, [pc, #160]	; (8009444 <vTaskSwitchContext+0xb0>)
 80093a4:	2201      	movs	r2, #1
 80093a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80093a8:	e043      	b.n	8009432 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 80093aa:	4b26      	ldr	r3, [pc, #152]	; (8009444 <vTaskSwitchContext+0xb0>)
 80093ac:	2200      	movs	r2, #0
 80093ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093b0:	4b25      	ldr	r3, [pc, #148]	; (8009448 <vTaskSwitchContext+0xb4>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	60fb      	str	r3, [r7, #12]
 80093b6:	e012      	b.n	80093de <vTaskSwitchContext+0x4a>
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d10c      	bne.n	80093d8 <vTaskSwitchContext+0x44>
	__asm volatile
 80093be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c2:	b672      	cpsid	i
 80093c4:	f383 8811 	msr	BASEPRI, r3
 80093c8:	f3bf 8f6f 	isb	sy
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	b662      	cpsie	i
 80093d2:	607b      	str	r3, [r7, #4]
}
 80093d4:	bf00      	nop
 80093d6:	e7fe      	b.n	80093d6 <vTaskSwitchContext+0x42>
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	3b01      	subs	r3, #1
 80093dc:	60fb      	str	r3, [r7, #12]
 80093de:	491b      	ldr	r1, [pc, #108]	; (800944c <vTaskSwitchContext+0xb8>)
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	4613      	mov	r3, r2
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	4413      	add	r3, r2
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	440b      	add	r3, r1
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d0e2      	beq.n	80093b8 <vTaskSwitchContext+0x24>
 80093f2:	68fa      	ldr	r2, [r7, #12]
 80093f4:	4613      	mov	r3, r2
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	4413      	add	r3, r2
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	4a13      	ldr	r2, [pc, #76]	; (800944c <vTaskSwitchContext+0xb8>)
 80093fe:	4413      	add	r3, r2
 8009400:	60bb      	str	r3, [r7, #8]
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	685a      	ldr	r2, [r3, #4]
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	605a      	str	r2, [r3, #4]
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	685a      	ldr	r2, [r3, #4]
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	3308      	adds	r3, #8
 8009414:	429a      	cmp	r2, r3
 8009416:	d104      	bne.n	8009422 <vTaskSwitchContext+0x8e>
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	685a      	ldr	r2, [r3, #4]
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	605a      	str	r2, [r3, #4]
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	4a09      	ldr	r2, [pc, #36]	; (8009450 <vTaskSwitchContext+0xbc>)
 800942a:	6013      	str	r3, [r2, #0]
 800942c:	4a06      	ldr	r2, [pc, #24]	; (8009448 <vTaskSwitchContext+0xb4>)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6013      	str	r3, [r2, #0]
}
 8009432:	bf00      	nop
 8009434:	3714      	adds	r7, #20
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr
 800943e:	bf00      	nop
 8009440:	2000122c 	.word	0x2000122c
 8009444:	20001218 	.word	0x20001218
 8009448:	2000120c 	.word	0x2000120c
 800944c:	20000d34 	.word	0x20000d34
 8009450:	20000d30 	.word	0x20000d30

08009454 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d10c      	bne.n	800947e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8009464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009468:	b672      	cpsid	i
 800946a:	f383 8811 	msr	BASEPRI, r3
 800946e:	f3bf 8f6f 	isb	sy
 8009472:	f3bf 8f4f 	dsb	sy
 8009476:	b662      	cpsie	i
 8009478:	60fb      	str	r3, [r7, #12]
}
 800947a:	bf00      	nop
 800947c:	e7fe      	b.n	800947c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800947e:	4b07      	ldr	r3, [pc, #28]	; (800949c <vTaskPlaceOnEventList+0x48>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	3318      	adds	r3, #24
 8009484:	4619      	mov	r1, r3
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f7fe fd79 	bl	8007f7e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800948c:	2101      	movs	r1, #1
 800948e:	6838      	ldr	r0, [r7, #0]
 8009490:	f000 fa8a 	bl	80099a8 <prvAddCurrentTaskToDelayedList>
}
 8009494:	bf00      	nop
 8009496:	3710      	adds	r7, #16
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}
 800949c:	20000d30 	.word	0x20000d30

080094a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b086      	sub	sp, #24
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d10c      	bne.n	80094cc <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80094b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b6:	b672      	cpsid	i
 80094b8:	f383 8811 	msr	BASEPRI, r3
 80094bc:	f3bf 8f6f 	isb	sy
 80094c0:	f3bf 8f4f 	dsb	sy
 80094c4:	b662      	cpsie	i
 80094c6:	617b      	str	r3, [r7, #20]
}
 80094c8:	bf00      	nop
 80094ca:	e7fe      	b.n	80094ca <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80094cc:	4b0a      	ldr	r3, [pc, #40]	; (80094f8 <vTaskPlaceOnEventListRestricted+0x58>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	3318      	adds	r3, #24
 80094d2:	4619      	mov	r1, r3
 80094d4:	68f8      	ldr	r0, [r7, #12]
 80094d6:	f7fe fd2e 	bl	8007f36 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d002      	beq.n	80094e6 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80094e0:	f04f 33ff 	mov.w	r3, #4294967295
 80094e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80094e6:	6879      	ldr	r1, [r7, #4]
 80094e8:	68b8      	ldr	r0, [r7, #8]
 80094ea:	f000 fa5d 	bl	80099a8 <prvAddCurrentTaskToDelayedList>
	}
 80094ee:	bf00      	nop
 80094f0:	3718      	adds	r7, #24
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	20000d30 	.word	0x20000d30

080094fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b086      	sub	sp, #24
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d10c      	bne.n	800952c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8009512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009516:	b672      	cpsid	i
 8009518:	f383 8811 	msr	BASEPRI, r3
 800951c:	f3bf 8f6f 	isb	sy
 8009520:	f3bf 8f4f 	dsb	sy
 8009524:	b662      	cpsie	i
 8009526:	60fb      	str	r3, [r7, #12]
}
 8009528:	bf00      	nop
 800952a:	e7fe      	b.n	800952a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	3318      	adds	r3, #24
 8009530:	4618      	mov	r0, r3
 8009532:	f7fe fd5d 	bl	8007ff0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009536:	4b1e      	ldr	r3, [pc, #120]	; (80095b0 <xTaskRemoveFromEventList+0xb4>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d11d      	bne.n	800957a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	3304      	adds	r3, #4
 8009542:	4618      	mov	r0, r3
 8009544:	f7fe fd54 	bl	8007ff0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800954c:	4b19      	ldr	r3, [pc, #100]	; (80095b4 <xTaskRemoveFromEventList+0xb8>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	429a      	cmp	r2, r3
 8009552:	d903      	bls.n	800955c <xTaskRemoveFromEventList+0x60>
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009558:	4a16      	ldr	r2, [pc, #88]	; (80095b4 <xTaskRemoveFromEventList+0xb8>)
 800955a:	6013      	str	r3, [r2, #0]
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009560:	4613      	mov	r3, r2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	4413      	add	r3, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	4a13      	ldr	r2, [pc, #76]	; (80095b8 <xTaskRemoveFromEventList+0xbc>)
 800956a:	441a      	add	r2, r3
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	3304      	adds	r3, #4
 8009570:	4619      	mov	r1, r3
 8009572:	4610      	mov	r0, r2
 8009574:	f7fe fcdf 	bl	8007f36 <vListInsertEnd>
 8009578:	e005      	b.n	8009586 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	3318      	adds	r3, #24
 800957e:	4619      	mov	r1, r3
 8009580:	480e      	ldr	r0, [pc, #56]	; (80095bc <xTaskRemoveFromEventList+0xc0>)
 8009582:	f7fe fcd8 	bl	8007f36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800958a:	4b0d      	ldr	r3, [pc, #52]	; (80095c0 <xTaskRemoveFromEventList+0xc4>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009590:	429a      	cmp	r2, r3
 8009592:	d905      	bls.n	80095a0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009594:	2301      	movs	r3, #1
 8009596:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009598:	4b0a      	ldr	r3, [pc, #40]	; (80095c4 <xTaskRemoveFromEventList+0xc8>)
 800959a:	2201      	movs	r2, #1
 800959c:	601a      	str	r2, [r3, #0]
 800959e:	e001      	b.n	80095a4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80095a0:	2300      	movs	r3, #0
 80095a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80095a4:	697b      	ldr	r3, [r7, #20]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3718      	adds	r7, #24
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	2000122c 	.word	0x2000122c
 80095b4:	2000120c 	.word	0x2000120c
 80095b8:	20000d34 	.word	0x20000d34
 80095bc:	200011c4 	.word	0x200011c4
 80095c0:	20000d30 	.word	0x20000d30
 80095c4:	20001218 	.word	0x20001218

080095c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80095d0:	4b06      	ldr	r3, [pc, #24]	; (80095ec <vTaskInternalSetTimeOutState+0x24>)
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80095d8:	4b05      	ldr	r3, [pc, #20]	; (80095f0 <vTaskInternalSetTimeOutState+0x28>)
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	605a      	str	r2, [r3, #4]
}
 80095e0:	bf00      	nop
 80095e2:	370c      	adds	r7, #12
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr
 80095ec:	2000121c 	.word	0x2000121c
 80095f0:	20001208 	.word	0x20001208

080095f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b088      	sub	sp, #32
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d10c      	bne.n	800961e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8009604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009608:	b672      	cpsid	i
 800960a:	f383 8811 	msr	BASEPRI, r3
 800960e:	f3bf 8f6f 	isb	sy
 8009612:	f3bf 8f4f 	dsb	sy
 8009616:	b662      	cpsie	i
 8009618:	613b      	str	r3, [r7, #16]
}
 800961a:	bf00      	nop
 800961c:	e7fe      	b.n	800961c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d10c      	bne.n	800963e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8009624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009628:	b672      	cpsid	i
 800962a:	f383 8811 	msr	BASEPRI, r3
 800962e:	f3bf 8f6f 	isb	sy
 8009632:	f3bf 8f4f 	dsb	sy
 8009636:	b662      	cpsie	i
 8009638:	60fb      	str	r3, [r7, #12]
}
 800963a:	bf00      	nop
 800963c:	e7fe      	b.n	800963c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800963e:	f000 ff35 	bl	800a4ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009642:	4b1d      	ldr	r3, [pc, #116]	; (80096b8 <xTaskCheckForTimeOut+0xc4>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	69ba      	ldr	r2, [r7, #24]
 800964e:	1ad3      	subs	r3, r2, r3
 8009650:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800965a:	d102      	bne.n	8009662 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800965c:	2300      	movs	r3, #0
 800965e:	61fb      	str	r3, [r7, #28]
 8009660:	e023      	b.n	80096aa <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	4b15      	ldr	r3, [pc, #84]	; (80096bc <xTaskCheckForTimeOut+0xc8>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	429a      	cmp	r2, r3
 800966c:	d007      	beq.n	800967e <xTaskCheckForTimeOut+0x8a>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	69ba      	ldr	r2, [r7, #24]
 8009674:	429a      	cmp	r2, r3
 8009676:	d302      	bcc.n	800967e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009678:	2301      	movs	r3, #1
 800967a:	61fb      	str	r3, [r7, #28]
 800967c:	e015      	b.n	80096aa <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	697a      	ldr	r2, [r7, #20]
 8009684:	429a      	cmp	r2, r3
 8009686:	d20b      	bcs.n	80096a0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	1ad2      	subs	r2, r2, r3
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f7ff ff97 	bl	80095c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800969a:	2300      	movs	r3, #0
 800969c:	61fb      	str	r3, [r7, #28]
 800969e:	e004      	b.n	80096aa <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	2200      	movs	r2, #0
 80096a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80096a6:	2301      	movs	r3, #1
 80096a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80096aa:	f000 ff33 	bl	800a514 <vPortExitCritical>

	return xReturn;
 80096ae:	69fb      	ldr	r3, [r7, #28]
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3720      	adds	r7, #32
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	20001208 	.word	0x20001208
 80096bc:	2000121c 	.word	0x2000121c

080096c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80096c0:	b480      	push	{r7}
 80096c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80096c4:	4b03      	ldr	r3, [pc, #12]	; (80096d4 <vTaskMissedYield+0x14>)
 80096c6:	2201      	movs	r2, #1
 80096c8:	601a      	str	r2, [r3, #0]
}
 80096ca:	bf00      	nop
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr
 80096d4:	20001218 	.word	0x20001218

080096d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80096e0:	f000 f852 	bl	8009788 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80096e4:	4b06      	ldr	r3, [pc, #24]	; (8009700 <prvIdleTask+0x28>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d9f9      	bls.n	80096e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80096ec:	4b05      	ldr	r3, [pc, #20]	; (8009704 <prvIdleTask+0x2c>)
 80096ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096f2:	601a      	str	r2, [r3, #0]
 80096f4:	f3bf 8f4f 	dsb	sy
 80096f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80096fc:	e7f0      	b.n	80096e0 <prvIdleTask+0x8>
 80096fe:	bf00      	nop
 8009700:	20000d34 	.word	0x20000d34
 8009704:	e000ed04 	.word	0xe000ed04

08009708 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800970e:	2300      	movs	r3, #0
 8009710:	607b      	str	r3, [r7, #4]
 8009712:	e00c      	b.n	800972e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	4613      	mov	r3, r2
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	4413      	add	r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	4a12      	ldr	r2, [pc, #72]	; (8009768 <prvInitialiseTaskLists+0x60>)
 8009720:	4413      	add	r3, r2
 8009722:	4618      	mov	r0, r3
 8009724:	f7fe fbda 	bl	8007edc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	3301      	adds	r3, #1
 800972c:	607b      	str	r3, [r7, #4]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2b37      	cmp	r3, #55	; 0x37
 8009732:	d9ef      	bls.n	8009714 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009734:	480d      	ldr	r0, [pc, #52]	; (800976c <prvInitialiseTaskLists+0x64>)
 8009736:	f7fe fbd1 	bl	8007edc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800973a:	480d      	ldr	r0, [pc, #52]	; (8009770 <prvInitialiseTaskLists+0x68>)
 800973c:	f7fe fbce 	bl	8007edc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009740:	480c      	ldr	r0, [pc, #48]	; (8009774 <prvInitialiseTaskLists+0x6c>)
 8009742:	f7fe fbcb 	bl	8007edc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009746:	480c      	ldr	r0, [pc, #48]	; (8009778 <prvInitialiseTaskLists+0x70>)
 8009748:	f7fe fbc8 	bl	8007edc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800974c:	480b      	ldr	r0, [pc, #44]	; (800977c <prvInitialiseTaskLists+0x74>)
 800974e:	f7fe fbc5 	bl	8007edc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009752:	4b0b      	ldr	r3, [pc, #44]	; (8009780 <prvInitialiseTaskLists+0x78>)
 8009754:	4a05      	ldr	r2, [pc, #20]	; (800976c <prvInitialiseTaskLists+0x64>)
 8009756:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009758:	4b0a      	ldr	r3, [pc, #40]	; (8009784 <prvInitialiseTaskLists+0x7c>)
 800975a:	4a05      	ldr	r2, [pc, #20]	; (8009770 <prvInitialiseTaskLists+0x68>)
 800975c:	601a      	str	r2, [r3, #0]
}
 800975e:	bf00      	nop
 8009760:	3708      	adds	r7, #8
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	20000d34 	.word	0x20000d34
 800976c:	20001194 	.word	0x20001194
 8009770:	200011a8 	.word	0x200011a8
 8009774:	200011c4 	.word	0x200011c4
 8009778:	200011d8 	.word	0x200011d8
 800977c:	200011f0 	.word	0x200011f0
 8009780:	200011bc 	.word	0x200011bc
 8009784:	200011c0 	.word	0x200011c0

08009788 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800978e:	e019      	b.n	80097c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009790:	f000 fe8c 	bl	800a4ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009794:	4b10      	ldr	r3, [pc, #64]	; (80097d8 <prvCheckTasksWaitingTermination+0x50>)
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	3304      	adds	r3, #4
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7fe fc25 	bl	8007ff0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80097a6:	4b0d      	ldr	r3, [pc, #52]	; (80097dc <prvCheckTasksWaitingTermination+0x54>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	3b01      	subs	r3, #1
 80097ac:	4a0b      	ldr	r2, [pc, #44]	; (80097dc <prvCheckTasksWaitingTermination+0x54>)
 80097ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80097b0:	4b0b      	ldr	r3, [pc, #44]	; (80097e0 <prvCheckTasksWaitingTermination+0x58>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	3b01      	subs	r3, #1
 80097b6:	4a0a      	ldr	r2, [pc, #40]	; (80097e0 <prvCheckTasksWaitingTermination+0x58>)
 80097b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80097ba:	f000 feab 	bl	800a514 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 f810 	bl	80097e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097c4:	4b06      	ldr	r3, [pc, #24]	; (80097e0 <prvCheckTasksWaitingTermination+0x58>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d1e1      	bne.n	8009790 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80097cc:	bf00      	nop
 80097ce:	bf00      	nop
 80097d0:	3708      	adds	r7, #8
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	200011d8 	.word	0x200011d8
 80097dc:	20001204 	.word	0x20001204
 80097e0:	200011ec 	.word	0x200011ec

080097e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d108      	bne.n	8009808 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097fa:	4618      	mov	r0, r3
 80097fc:	f001 f84c 	bl	800a898 <vPortFree>
				vPortFree( pxTCB );
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f001 f849 	bl	800a898 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009806:	e01a      	b.n	800983e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800980e:	2b01      	cmp	r3, #1
 8009810:	d103      	bne.n	800981a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f001 f840 	bl	800a898 <vPortFree>
	}
 8009818:	e011      	b.n	800983e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009820:	2b02      	cmp	r3, #2
 8009822:	d00c      	beq.n	800983e <prvDeleteTCB+0x5a>
	__asm volatile
 8009824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009828:	b672      	cpsid	i
 800982a:	f383 8811 	msr	BASEPRI, r3
 800982e:	f3bf 8f6f 	isb	sy
 8009832:	f3bf 8f4f 	dsb	sy
 8009836:	b662      	cpsie	i
 8009838:	60fb      	str	r3, [r7, #12]
}
 800983a:	bf00      	nop
 800983c:	e7fe      	b.n	800983c <prvDeleteTCB+0x58>
	}
 800983e:	bf00      	nop
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
	...

08009848 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800984e:	4b0c      	ldr	r3, [pc, #48]	; (8009880 <prvResetNextTaskUnblockTime+0x38>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d104      	bne.n	8009862 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009858:	4b0a      	ldr	r3, [pc, #40]	; (8009884 <prvResetNextTaskUnblockTime+0x3c>)
 800985a:	f04f 32ff 	mov.w	r2, #4294967295
 800985e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009860:	e008      	b.n	8009874 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009862:	4b07      	ldr	r3, [pc, #28]	; (8009880 <prvResetNextTaskUnblockTime+0x38>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	68db      	ldr	r3, [r3, #12]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	4a04      	ldr	r2, [pc, #16]	; (8009884 <prvResetNextTaskUnblockTime+0x3c>)
 8009872:	6013      	str	r3, [r2, #0]
}
 8009874:	bf00      	nop
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr
 8009880:	200011bc 	.word	0x200011bc
 8009884:	20001224 	.word	0x20001224

08009888 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800988e:	4b0b      	ldr	r3, [pc, #44]	; (80098bc <xTaskGetSchedulerState+0x34>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d102      	bne.n	800989c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009896:	2301      	movs	r3, #1
 8009898:	607b      	str	r3, [r7, #4]
 800989a:	e008      	b.n	80098ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800989c:	4b08      	ldr	r3, [pc, #32]	; (80098c0 <xTaskGetSchedulerState+0x38>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d102      	bne.n	80098aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80098a4:	2302      	movs	r3, #2
 80098a6:	607b      	str	r3, [r7, #4]
 80098a8:	e001      	b.n	80098ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80098aa:	2300      	movs	r3, #0
 80098ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80098ae:	687b      	ldr	r3, [r7, #4]
	}
 80098b0:	4618      	mov	r0, r3
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr
 80098bc:	20001210 	.word	0x20001210
 80098c0:	2000122c 	.word	0x2000122c

080098c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b086      	sub	sp, #24
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80098d0:	2300      	movs	r3, #0
 80098d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d05a      	beq.n	8009990 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80098da:	4b30      	ldr	r3, [pc, #192]	; (800999c <xTaskPriorityDisinherit+0xd8>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	693a      	ldr	r2, [r7, #16]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d00c      	beq.n	80098fe <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80098e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e8:	b672      	cpsid	i
 80098ea:	f383 8811 	msr	BASEPRI, r3
 80098ee:	f3bf 8f6f 	isb	sy
 80098f2:	f3bf 8f4f 	dsb	sy
 80098f6:	b662      	cpsie	i
 80098f8:	60fb      	str	r3, [r7, #12]
}
 80098fa:	bf00      	nop
 80098fc:	e7fe      	b.n	80098fc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009902:	2b00      	cmp	r3, #0
 8009904:	d10c      	bne.n	8009920 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8009906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990a:	b672      	cpsid	i
 800990c:	f383 8811 	msr	BASEPRI, r3
 8009910:	f3bf 8f6f 	isb	sy
 8009914:	f3bf 8f4f 	dsb	sy
 8009918:	b662      	cpsie	i
 800991a:	60bb      	str	r3, [r7, #8]
}
 800991c:	bf00      	nop
 800991e:	e7fe      	b.n	800991e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009924:	1e5a      	subs	r2, r3, #1
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009932:	429a      	cmp	r2, r3
 8009934:	d02c      	beq.n	8009990 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800993a:	2b00      	cmp	r3, #0
 800993c:	d128      	bne.n	8009990 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	3304      	adds	r3, #4
 8009942:	4618      	mov	r0, r3
 8009944:	f7fe fb54 	bl	8007ff0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009954:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009960:	4b0f      	ldr	r3, [pc, #60]	; (80099a0 <xTaskPriorityDisinherit+0xdc>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	429a      	cmp	r2, r3
 8009966:	d903      	bls.n	8009970 <xTaskPriorityDisinherit+0xac>
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800996c:	4a0c      	ldr	r2, [pc, #48]	; (80099a0 <xTaskPriorityDisinherit+0xdc>)
 800996e:	6013      	str	r3, [r2, #0]
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009974:	4613      	mov	r3, r2
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	4413      	add	r3, r2
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	4a09      	ldr	r2, [pc, #36]	; (80099a4 <xTaskPriorityDisinherit+0xe0>)
 800997e:	441a      	add	r2, r3
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	3304      	adds	r3, #4
 8009984:	4619      	mov	r1, r3
 8009986:	4610      	mov	r0, r2
 8009988:	f7fe fad5 	bl	8007f36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800998c:	2301      	movs	r3, #1
 800998e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009990:	697b      	ldr	r3, [r7, #20]
	}
 8009992:	4618      	mov	r0, r3
 8009994:	3718      	adds	r7, #24
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	20000d30 	.word	0x20000d30
 80099a0:	2000120c 	.word	0x2000120c
 80099a4:	20000d34 	.word	0x20000d34

080099a8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80099b2:	4b21      	ldr	r3, [pc, #132]	; (8009a38 <prvAddCurrentTaskToDelayedList+0x90>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099b8:	4b20      	ldr	r3, [pc, #128]	; (8009a3c <prvAddCurrentTaskToDelayedList+0x94>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	3304      	adds	r3, #4
 80099be:	4618      	mov	r0, r3
 80099c0:	f7fe fb16 	bl	8007ff0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ca:	d10a      	bne.n	80099e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d007      	beq.n	80099e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099d2:	4b1a      	ldr	r3, [pc, #104]	; (8009a3c <prvAddCurrentTaskToDelayedList+0x94>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	3304      	adds	r3, #4
 80099d8:	4619      	mov	r1, r3
 80099da:	4819      	ldr	r0, [pc, #100]	; (8009a40 <prvAddCurrentTaskToDelayedList+0x98>)
 80099dc:	f7fe faab 	bl	8007f36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80099e0:	e026      	b.n	8009a30 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80099e2:	68fa      	ldr	r2, [r7, #12]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	4413      	add	r3, r2
 80099e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80099ea:	4b14      	ldr	r3, [pc, #80]	; (8009a3c <prvAddCurrentTaskToDelayedList+0x94>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	68ba      	ldr	r2, [r7, #8]
 80099f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80099f2:	68ba      	ldr	r2, [r7, #8]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d209      	bcs.n	8009a0e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099fa:	4b12      	ldr	r3, [pc, #72]	; (8009a44 <prvAddCurrentTaskToDelayedList+0x9c>)
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	4b0f      	ldr	r3, [pc, #60]	; (8009a3c <prvAddCurrentTaskToDelayedList+0x94>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	3304      	adds	r3, #4
 8009a04:	4619      	mov	r1, r3
 8009a06:	4610      	mov	r0, r2
 8009a08:	f7fe fab9 	bl	8007f7e <vListInsert>
}
 8009a0c:	e010      	b.n	8009a30 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a0e:	4b0e      	ldr	r3, [pc, #56]	; (8009a48 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	4b0a      	ldr	r3, [pc, #40]	; (8009a3c <prvAddCurrentTaskToDelayedList+0x94>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	3304      	adds	r3, #4
 8009a18:	4619      	mov	r1, r3
 8009a1a:	4610      	mov	r0, r2
 8009a1c:	f7fe faaf 	bl	8007f7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009a20:	4b0a      	ldr	r3, [pc, #40]	; (8009a4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	68ba      	ldr	r2, [r7, #8]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d202      	bcs.n	8009a30 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009a2a:	4a08      	ldr	r2, [pc, #32]	; (8009a4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	6013      	str	r3, [r2, #0]
}
 8009a30:	bf00      	nop
 8009a32:	3710      	adds	r7, #16
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	20001208 	.word	0x20001208
 8009a3c:	20000d30 	.word	0x20000d30
 8009a40:	200011f0 	.word	0x200011f0
 8009a44:	200011c0 	.word	0x200011c0
 8009a48:	200011bc 	.word	0x200011bc
 8009a4c:	20001224 	.word	0x20001224

08009a50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b08a      	sub	sp, #40	; 0x28
 8009a54:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009a56:	2300      	movs	r3, #0
 8009a58:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009a5a:	f000 fbb5 	bl	800a1c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009a5e:	4b1d      	ldr	r3, [pc, #116]	; (8009ad4 <xTimerCreateTimerTask+0x84>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d021      	beq.n	8009aaa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009a66:	2300      	movs	r3, #0
 8009a68:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009a6e:	1d3a      	adds	r2, r7, #4
 8009a70:	f107 0108 	add.w	r1, r7, #8
 8009a74:	f107 030c 	add.w	r3, r7, #12
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7fe fa15 	bl	8007ea8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009a7e:	6879      	ldr	r1, [r7, #4]
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	9202      	str	r2, [sp, #8]
 8009a86:	9301      	str	r3, [sp, #4]
 8009a88:	2302      	movs	r3, #2
 8009a8a:	9300      	str	r3, [sp, #0]
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	460a      	mov	r2, r1
 8009a90:	4911      	ldr	r1, [pc, #68]	; (8009ad8 <xTimerCreateTimerTask+0x88>)
 8009a92:	4812      	ldr	r0, [pc, #72]	; (8009adc <xTimerCreateTimerTask+0x8c>)
 8009a94:	f7ff f8a8 	bl	8008be8 <xTaskCreateStatic>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	4a11      	ldr	r2, [pc, #68]	; (8009ae0 <xTimerCreateTimerTask+0x90>)
 8009a9c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009a9e:	4b10      	ldr	r3, [pc, #64]	; (8009ae0 <xTimerCreateTimerTask+0x90>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d001      	beq.n	8009aaa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d10c      	bne.n	8009aca <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8009ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab4:	b672      	cpsid	i
 8009ab6:	f383 8811 	msr	BASEPRI, r3
 8009aba:	f3bf 8f6f 	isb	sy
 8009abe:	f3bf 8f4f 	dsb	sy
 8009ac2:	b662      	cpsie	i
 8009ac4:	613b      	str	r3, [r7, #16]
}
 8009ac6:	bf00      	nop
 8009ac8:	e7fe      	b.n	8009ac8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009aca:	697b      	ldr	r3, [r7, #20]
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3718      	adds	r7, #24
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	20001260 	.word	0x20001260
 8009ad8:	0800ab80 	.word	0x0800ab80
 8009adc:	08009d61 	.word	0x08009d61
 8009ae0:	20001264 	.word	0x20001264

08009ae4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b088      	sub	sp, #32
 8009ae8:	af02      	add	r7, sp, #8
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	607a      	str	r2, [r7, #4]
 8009af0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009af2:	202c      	movs	r0, #44	; 0x2c
 8009af4:	f000 fe06 	bl	800a704 <pvPortMalloc>
 8009af8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d00d      	beq.n	8009b1c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	9301      	str	r3, [sp, #4]
 8009b0c:	6a3b      	ldr	r3, [r7, #32]
 8009b0e:	9300      	str	r3, [sp, #0]
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	68b9      	ldr	r1, [r7, #8]
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f000 f847 	bl	8009baa <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009b1c:	697b      	ldr	r3, [r7, #20]
	}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3718      	adds	r7, #24
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b08a      	sub	sp, #40	; 0x28
 8009b2a:	af02      	add	r7, sp, #8
 8009b2c:	60f8      	str	r0, [r7, #12]
 8009b2e:	60b9      	str	r1, [r7, #8]
 8009b30:	607a      	str	r2, [r7, #4]
 8009b32:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009b34:	232c      	movs	r3, #44	; 0x2c
 8009b36:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	2b2c      	cmp	r3, #44	; 0x2c
 8009b3c:	d00c      	beq.n	8009b58 <xTimerCreateStatic+0x32>
	__asm volatile
 8009b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b42:	b672      	cpsid	i
 8009b44:	f383 8811 	msr	BASEPRI, r3
 8009b48:	f3bf 8f6f 	isb	sy
 8009b4c:	f3bf 8f4f 	dsb	sy
 8009b50:	b662      	cpsie	i
 8009b52:	61bb      	str	r3, [r7, #24]
}
 8009b54:	bf00      	nop
 8009b56:	e7fe      	b.n	8009b56 <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009b58:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8009b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d10c      	bne.n	8009b7a <xTimerCreateStatic+0x54>
	__asm volatile
 8009b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b64:	b672      	cpsid	i
 8009b66:	f383 8811 	msr	BASEPRI, r3
 8009b6a:	f3bf 8f6f 	isb	sy
 8009b6e:	f3bf 8f4f 	dsb	sy
 8009b72:	b662      	cpsie	i
 8009b74:	617b      	str	r3, [r7, #20]
}
 8009b76:	bf00      	nop
 8009b78:	e7fe      	b.n	8009b78 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8009b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8009b7e:	69fb      	ldr	r3, [r7, #28]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d00d      	beq.n	8009ba0 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	2202      	movs	r2, #2
 8009b88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009b8c:	69fb      	ldr	r3, [r7, #28]
 8009b8e:	9301      	str	r3, [sp, #4]
 8009b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b92:	9300      	str	r3, [sp, #0]
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	68b9      	ldr	r1, [r7, #8]
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f000 f805 	bl	8009baa <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009ba0:	69fb      	ldr	r3, [r7, #28]
	}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3720      	adds	r7, #32
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b086      	sub	sp, #24
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	60f8      	str	r0, [r7, #12]
 8009bb2:	60b9      	str	r1, [r7, #8]
 8009bb4:	607a      	str	r2, [r7, #4]
 8009bb6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d10c      	bne.n	8009bd8 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 8009bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc2:	b672      	cpsid	i
 8009bc4:	f383 8811 	msr	BASEPRI, r3
 8009bc8:	f3bf 8f6f 	isb	sy
 8009bcc:	f3bf 8f4f 	dsb	sy
 8009bd0:	b662      	cpsie	i
 8009bd2:	617b      	str	r3, [r7, #20]
}
 8009bd4:	bf00      	nop
 8009bd6:	e7fe      	b.n	8009bd6 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 8009bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d01e      	beq.n	8009c1c <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009bde:	f000 faf3 	bl	800a1c8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be4:	68fa      	ldr	r2, [r7, #12]
 8009be6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bea:	68ba      	ldr	r2, [r7, #8]
 8009bec:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8009bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf0:	683a      	ldr	r2, [r7, #0]
 8009bf2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf6:	6a3a      	ldr	r2, [r7, #32]
 8009bf8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfc:	3304      	adds	r3, #4
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f7fe f98c 	bl	8007f1c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d008      	beq.n	8009c1c <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c10:	f043 0304 	orr.w	r3, r3, #4
 8009c14:	b2da      	uxtb	r2, r3
 8009c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009c1c:	bf00      	nop
 8009c1e:	3718      	adds	r7, #24
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b08a      	sub	sp, #40	; 0x28
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	607a      	str	r2, [r7, #4]
 8009c30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009c32:	2300      	movs	r3, #0
 8009c34:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d10c      	bne.n	8009c56 <xTimerGenericCommand+0x32>
	__asm volatile
 8009c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c40:	b672      	cpsid	i
 8009c42:	f383 8811 	msr	BASEPRI, r3
 8009c46:	f3bf 8f6f 	isb	sy
 8009c4a:	f3bf 8f4f 	dsb	sy
 8009c4e:	b662      	cpsie	i
 8009c50:	623b      	str	r3, [r7, #32]
}
 8009c52:	bf00      	nop
 8009c54:	e7fe      	b.n	8009c54 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009c56:	4b1a      	ldr	r3, [pc, #104]	; (8009cc0 <xTimerGenericCommand+0x9c>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d02a      	beq.n	8009cb4 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	2b05      	cmp	r3, #5
 8009c6e:	dc18      	bgt.n	8009ca2 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009c70:	f7ff fe0a 	bl	8009888 <xTaskGetSchedulerState>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b02      	cmp	r3, #2
 8009c78:	d109      	bne.n	8009c8e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009c7a:	4b11      	ldr	r3, [pc, #68]	; (8009cc0 <xTimerGenericCommand+0x9c>)
 8009c7c:	6818      	ldr	r0, [r3, #0]
 8009c7e:	f107 0110 	add.w	r1, r7, #16
 8009c82:	2300      	movs	r3, #0
 8009c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c86:	f7fe fb2f 	bl	80082e8 <xQueueGenericSend>
 8009c8a:	6278      	str	r0, [r7, #36]	; 0x24
 8009c8c:	e012      	b.n	8009cb4 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009c8e:	4b0c      	ldr	r3, [pc, #48]	; (8009cc0 <xTimerGenericCommand+0x9c>)
 8009c90:	6818      	ldr	r0, [r3, #0]
 8009c92:	f107 0110 	add.w	r1, r7, #16
 8009c96:	2300      	movs	r3, #0
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f7fe fb25 	bl	80082e8 <xQueueGenericSend>
 8009c9e:	6278      	str	r0, [r7, #36]	; 0x24
 8009ca0:	e008      	b.n	8009cb4 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ca2:	4b07      	ldr	r3, [pc, #28]	; (8009cc0 <xTimerGenericCommand+0x9c>)
 8009ca4:	6818      	ldr	r0, [r3, #0]
 8009ca6:	f107 0110 	add.w	r1, r7, #16
 8009caa:	2300      	movs	r3, #0
 8009cac:	683a      	ldr	r2, [r7, #0]
 8009cae:	f7fe fc21 	bl	80084f4 <xQueueGenericSendFromISR>
 8009cb2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3728      	adds	r7, #40	; 0x28
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	20001260 	.word	0x20001260

08009cc4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b088      	sub	sp, #32
 8009cc8:	af02      	add	r7, sp, #8
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cce:	4b23      	ldr	r3, [pc, #140]	; (8009d5c <prvProcessExpiredTimer+0x98>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	68db      	ldr	r3, [r3, #12]
 8009cd6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	3304      	adds	r3, #4
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7fe f987 	bl	8007ff0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ce8:	f003 0304 	and.w	r3, r3, #4
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d024      	beq.n	8009d3a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	699a      	ldr	r2, [r3, #24]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	18d1      	adds	r1, r2, r3
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	683a      	ldr	r2, [r7, #0]
 8009cfc:	6978      	ldr	r0, [r7, #20]
 8009cfe:	f000 f8d3 	bl	8009ea8 <prvInsertTimerInActiveList>
 8009d02:	4603      	mov	r3, r0
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d021      	beq.n	8009d4c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d08:	2300      	movs	r3, #0
 8009d0a:	9300      	str	r3, [sp, #0]
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	2100      	movs	r1, #0
 8009d12:	6978      	ldr	r0, [r7, #20]
 8009d14:	f7ff ff86 	bl	8009c24 <xTimerGenericCommand>
 8009d18:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d115      	bne.n	8009d4c <prvProcessExpiredTimer+0x88>
	__asm volatile
 8009d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d24:	b672      	cpsid	i
 8009d26:	f383 8811 	msr	BASEPRI, r3
 8009d2a:	f3bf 8f6f 	isb	sy
 8009d2e:	f3bf 8f4f 	dsb	sy
 8009d32:	b662      	cpsie	i
 8009d34:	60fb      	str	r3, [r7, #12]
}
 8009d36:	bf00      	nop
 8009d38:	e7fe      	b.n	8009d38 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d40:	f023 0301 	bic.w	r3, r3, #1
 8009d44:	b2da      	uxtb	r2, r3
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	6a1b      	ldr	r3, [r3, #32]
 8009d50:	6978      	ldr	r0, [r7, #20]
 8009d52:	4798      	blx	r3
}
 8009d54:	bf00      	nop
 8009d56:	3718      	adds	r7, #24
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}
 8009d5c:	20001258 	.word	0x20001258

08009d60 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d68:	f107 0308 	add.w	r3, r7, #8
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f000 f857 	bl	8009e20 <prvGetNextExpireTime>
 8009d72:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	4619      	mov	r1, r3
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	f000 f803 	bl	8009d84 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009d7e:	f000 f8d5 	bl	8009f2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d82:	e7f1      	b.n	8009d68 <prvTimerTask+0x8>

08009d84 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009d8e:	f7ff f975 	bl	800907c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d92:	f107 0308 	add.w	r3, r7, #8
 8009d96:	4618      	mov	r0, r3
 8009d98:	f000 f866 	bl	8009e68 <prvSampleTimeNow>
 8009d9c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d130      	bne.n	8009e06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d10a      	bne.n	8009dc0 <prvProcessTimerOrBlockTask+0x3c>
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d806      	bhi.n	8009dc0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009db2:	f7ff f971 	bl	8009098 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009db6:	68f9      	ldr	r1, [r7, #12]
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f7ff ff83 	bl	8009cc4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009dbe:	e024      	b.n	8009e0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d008      	beq.n	8009dd8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009dc6:	4b13      	ldr	r3, [pc, #76]	; (8009e14 <prvProcessTimerOrBlockTask+0x90>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d101      	bne.n	8009dd4 <prvProcessTimerOrBlockTask+0x50>
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e000      	b.n	8009dd6 <prvProcessTimerOrBlockTask+0x52>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009dd8:	4b0f      	ldr	r3, [pc, #60]	; (8009e18 <prvProcessTimerOrBlockTask+0x94>)
 8009dda:	6818      	ldr	r0, [r3, #0]
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	1ad3      	subs	r3, r2, r3
 8009de2:	683a      	ldr	r2, [r7, #0]
 8009de4:	4619      	mov	r1, r3
 8009de6:	f7fe fecb 	bl	8008b80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009dea:	f7ff f955 	bl	8009098 <xTaskResumeAll>
 8009dee:	4603      	mov	r3, r0
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10a      	bne.n	8009e0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009df4:	4b09      	ldr	r3, [pc, #36]	; (8009e1c <prvProcessTimerOrBlockTask+0x98>)
 8009df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dfa:	601a      	str	r2, [r3, #0]
 8009dfc:	f3bf 8f4f 	dsb	sy
 8009e00:	f3bf 8f6f 	isb	sy
}
 8009e04:	e001      	b.n	8009e0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009e06:	f7ff f947 	bl	8009098 <xTaskResumeAll>
}
 8009e0a:	bf00      	nop
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	2000125c 	.word	0x2000125c
 8009e18:	20001260 	.word	0x20001260
 8009e1c:	e000ed04 	.word	0xe000ed04

08009e20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009e20:	b480      	push	{r7}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009e28:	4b0e      	ldr	r3, [pc, #56]	; (8009e64 <prvGetNextExpireTime+0x44>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d101      	bne.n	8009e36 <prvGetNextExpireTime+0x16>
 8009e32:	2201      	movs	r2, #1
 8009e34:	e000      	b.n	8009e38 <prvGetNextExpireTime+0x18>
 8009e36:	2200      	movs	r2, #0
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d105      	bne.n	8009e50 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e44:	4b07      	ldr	r3, [pc, #28]	; (8009e64 <prvGetNextExpireTime+0x44>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	60fb      	str	r3, [r7, #12]
 8009e4e:	e001      	b.n	8009e54 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009e50:	2300      	movs	r3, #0
 8009e52:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009e54:	68fb      	ldr	r3, [r7, #12]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3714      	adds	r7, #20
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop
 8009e64:	20001258 	.word	0x20001258

08009e68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009e70:	f7ff f9b2 	bl	80091d8 <xTaskGetTickCount>
 8009e74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009e76:	4b0b      	ldr	r3, [pc, #44]	; (8009ea4 <prvSampleTimeNow+0x3c>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d205      	bcs.n	8009e8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009e80:	f000 f93c 	bl	800a0fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	601a      	str	r2, [r3, #0]
 8009e8a:	e002      	b.n	8009e92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009e92:	4a04      	ldr	r2, [pc, #16]	; (8009ea4 <prvSampleTimeNow+0x3c>)
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009e98:	68fb      	ldr	r3, [r7, #12]
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3710      	adds	r7, #16
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	20001268 	.word	0x20001268

08009ea8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b086      	sub	sp, #24
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	607a      	str	r2, [r7, #4]
 8009eb4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	68ba      	ldr	r2, [r7, #8]
 8009ebe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	68fa      	ldr	r2, [r7, #12]
 8009ec4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009ec6:	68ba      	ldr	r2, [r7, #8]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d812      	bhi.n	8009ef4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	1ad2      	subs	r2, r2, r3
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	699b      	ldr	r3, [r3, #24]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d302      	bcc.n	8009ee2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009edc:	2301      	movs	r3, #1
 8009ede:	617b      	str	r3, [r7, #20]
 8009ee0:	e01b      	b.n	8009f1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009ee2:	4b10      	ldr	r3, [pc, #64]	; (8009f24 <prvInsertTimerInActiveList+0x7c>)
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	3304      	adds	r3, #4
 8009eea:	4619      	mov	r1, r3
 8009eec:	4610      	mov	r0, r2
 8009eee:	f7fe f846 	bl	8007f7e <vListInsert>
 8009ef2:	e012      	b.n	8009f1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d206      	bcs.n	8009f0a <prvInsertTimerInActiveList+0x62>
 8009efc:	68ba      	ldr	r2, [r7, #8]
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d302      	bcc.n	8009f0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009f04:	2301      	movs	r3, #1
 8009f06:	617b      	str	r3, [r7, #20]
 8009f08:	e007      	b.n	8009f1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f0a:	4b07      	ldr	r3, [pc, #28]	; (8009f28 <prvInsertTimerInActiveList+0x80>)
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	3304      	adds	r3, #4
 8009f12:	4619      	mov	r1, r3
 8009f14:	4610      	mov	r0, r2
 8009f16:	f7fe f832 	bl	8007f7e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009f1a:	697b      	ldr	r3, [r7, #20]
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3718      	adds	r7, #24
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	2000125c 	.word	0x2000125c
 8009f28:	20001258 	.word	0x20001258

08009f2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b08e      	sub	sp, #56	; 0x38
 8009f30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f32:	e0d0      	b.n	800a0d6 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	da1a      	bge.n	8009f70 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009f3a:	1d3b      	adds	r3, r7, #4
 8009f3c:	3304      	adds	r3, #4
 8009f3e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d10c      	bne.n	8009f60 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8009f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4a:	b672      	cpsid	i
 8009f4c:	f383 8811 	msr	BASEPRI, r3
 8009f50:	f3bf 8f6f 	isb	sy
 8009f54:	f3bf 8f4f 	dsb	sy
 8009f58:	b662      	cpsie	i
 8009f5a:	61fb      	str	r3, [r7, #28]
}
 8009f5c:	bf00      	nop
 8009f5e:	e7fe      	b.n	8009f5e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f66:	6850      	ldr	r0, [r2, #4]
 8009f68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f6a:	6892      	ldr	r2, [r2, #8]
 8009f6c:	4611      	mov	r1, r2
 8009f6e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	f2c0 80ae 	blt.w	800a0d4 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7e:	695b      	ldr	r3, [r3, #20]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d004      	beq.n	8009f8e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f86:	3304      	adds	r3, #4
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7fe f831 	bl	8007ff0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f8e:	463b      	mov	r3, r7
 8009f90:	4618      	mov	r0, r3
 8009f92:	f7ff ff69 	bl	8009e68 <prvSampleTimeNow>
 8009f96:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2b09      	cmp	r3, #9
 8009f9c:	f200 809b 	bhi.w	800a0d6 <prvProcessReceivedCommands+0x1aa>
 8009fa0:	a201      	add	r2, pc, #4	; (adr r2, 8009fa8 <prvProcessReceivedCommands+0x7c>)
 8009fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa6:	bf00      	nop
 8009fa8:	08009fd1 	.word	0x08009fd1
 8009fac:	08009fd1 	.word	0x08009fd1
 8009fb0:	08009fd1 	.word	0x08009fd1
 8009fb4:	0800a049 	.word	0x0800a049
 8009fb8:	0800a05d 	.word	0x0800a05d
 8009fbc:	0800a0ab 	.word	0x0800a0ab
 8009fc0:	08009fd1 	.word	0x08009fd1
 8009fc4:	08009fd1 	.word	0x08009fd1
 8009fc8:	0800a049 	.word	0x0800a049
 8009fcc:	0800a05d 	.word	0x0800a05d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fd6:	f043 0301 	orr.w	r3, r3, #1
 8009fda:	b2da      	uxtb	r2, r3
 8009fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009fe2:	68ba      	ldr	r2, [r7, #8]
 8009fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe6:	699b      	ldr	r3, [r3, #24]
 8009fe8:	18d1      	adds	r1, r2, r3
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ff0:	f7ff ff5a 	bl	8009ea8 <prvInsertTimerInActiveList>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d06d      	beq.n	800a0d6 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffc:	6a1b      	ldr	r3, [r3, #32]
 8009ffe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a000:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a004:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a008:	f003 0304 	and.w	r3, r3, #4
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d062      	beq.n	800a0d6 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a010:	68ba      	ldr	r2, [r7, #8]
 800a012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a014:	699b      	ldr	r3, [r3, #24]
 800a016:	441a      	add	r2, r3
 800a018:	2300      	movs	r3, #0
 800a01a:	9300      	str	r3, [sp, #0]
 800a01c:	2300      	movs	r3, #0
 800a01e:	2100      	movs	r1, #0
 800a020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a022:	f7ff fdff 	bl	8009c24 <xTimerGenericCommand>
 800a026:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a028:	6a3b      	ldr	r3, [r7, #32]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d153      	bne.n	800a0d6 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800a02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a032:	b672      	cpsid	i
 800a034:	f383 8811 	msr	BASEPRI, r3
 800a038:	f3bf 8f6f 	isb	sy
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	b662      	cpsie	i
 800a042:	61bb      	str	r3, [r7, #24]
}
 800a044:	bf00      	nop
 800a046:	e7fe      	b.n	800a046 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a04a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a04e:	f023 0301 	bic.w	r3, r3, #1
 800a052:	b2da      	uxtb	r2, r3
 800a054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a056:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a05a:	e03c      	b.n	800a0d6 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a062:	f043 0301 	orr.w	r3, r3, #1
 800a066:	b2da      	uxtb	r2, r3
 800a068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a06a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a06e:	68ba      	ldr	r2, [r7, #8]
 800a070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a072:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a076:	699b      	ldr	r3, [r3, #24]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d10c      	bne.n	800a096 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800a07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a080:	b672      	cpsid	i
 800a082:	f383 8811 	msr	BASEPRI, r3
 800a086:	f3bf 8f6f 	isb	sy
 800a08a:	f3bf 8f4f 	dsb	sy
 800a08e:	b662      	cpsie	i
 800a090:	617b      	str	r3, [r7, #20]
}
 800a092:	bf00      	nop
 800a094:	e7fe      	b.n	800a094 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a098:	699a      	ldr	r2, [r3, #24]
 800a09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09c:	18d1      	adds	r1, r2, r3
 800a09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0a4:	f7ff ff00 	bl	8009ea8 <prvInsertTimerInActiveList>
					break;
 800a0a8:	e015      	b.n	800a0d6 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0b0:	f003 0302 	and.w	r3, r3, #2
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d103      	bne.n	800a0c0 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800a0b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0ba:	f000 fbed 	bl	800a898 <vPortFree>
 800a0be:	e00a      	b.n	800a0d6 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0c6:	f023 0301 	bic.w	r3, r3, #1
 800a0ca:	b2da      	uxtb	r2, r3
 800a0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a0d2:	e000      	b.n	800a0d6 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a0d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a0d6:	4b08      	ldr	r3, [pc, #32]	; (800a0f8 <prvProcessReceivedCommands+0x1cc>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	1d39      	adds	r1, r7, #4
 800a0dc:	2200      	movs	r2, #0
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7fe faa8 	bl	8008634 <xQueueReceive>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	f47f af24 	bne.w	8009f34 <prvProcessReceivedCommands+0x8>
	}
}
 800a0ec:	bf00      	nop
 800a0ee:	bf00      	nop
 800a0f0:	3730      	adds	r7, #48	; 0x30
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	20001260 	.word	0x20001260

0800a0fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b088      	sub	sp, #32
 800a100:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a102:	e04a      	b.n	800a19a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a104:	4b2e      	ldr	r3, [pc, #184]	; (800a1c0 <prvSwitchTimerLists+0xc4>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a10e:	4b2c      	ldr	r3, [pc, #176]	; (800a1c0 <prvSwitchTimerLists+0xc4>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	68db      	ldr	r3, [r3, #12]
 800a116:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	3304      	adds	r3, #4
 800a11c:	4618      	mov	r0, r3
 800a11e:	f7fd ff67 	bl	8007ff0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6a1b      	ldr	r3, [r3, #32]
 800a126:	68f8      	ldr	r0, [r7, #12]
 800a128:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a130:	f003 0304 	and.w	r3, r3, #4
 800a134:	2b00      	cmp	r3, #0
 800a136:	d030      	beq.n	800a19a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	699b      	ldr	r3, [r3, #24]
 800a13c:	693a      	ldr	r2, [r7, #16]
 800a13e:	4413      	add	r3, r2
 800a140:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a142:	68ba      	ldr	r2, [r7, #8]
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	429a      	cmp	r2, r3
 800a148:	d90e      	bls.n	800a168 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	68ba      	ldr	r2, [r7, #8]
 800a14e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a156:	4b1a      	ldr	r3, [pc, #104]	; (800a1c0 <prvSwitchTimerLists+0xc4>)
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	3304      	adds	r3, #4
 800a15e:	4619      	mov	r1, r3
 800a160:	4610      	mov	r0, r2
 800a162:	f7fd ff0c 	bl	8007f7e <vListInsert>
 800a166:	e018      	b.n	800a19a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a168:	2300      	movs	r3, #0
 800a16a:	9300      	str	r3, [sp, #0]
 800a16c:	2300      	movs	r3, #0
 800a16e:	693a      	ldr	r2, [r7, #16]
 800a170:	2100      	movs	r1, #0
 800a172:	68f8      	ldr	r0, [r7, #12]
 800a174:	f7ff fd56 	bl	8009c24 <xTimerGenericCommand>
 800a178:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d10c      	bne.n	800a19a <prvSwitchTimerLists+0x9e>
	__asm volatile
 800a180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a184:	b672      	cpsid	i
 800a186:	f383 8811 	msr	BASEPRI, r3
 800a18a:	f3bf 8f6f 	isb	sy
 800a18e:	f3bf 8f4f 	dsb	sy
 800a192:	b662      	cpsie	i
 800a194:	603b      	str	r3, [r7, #0]
}
 800a196:	bf00      	nop
 800a198:	e7fe      	b.n	800a198 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a19a:	4b09      	ldr	r3, [pc, #36]	; (800a1c0 <prvSwitchTimerLists+0xc4>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d1af      	bne.n	800a104 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a1a4:	4b06      	ldr	r3, [pc, #24]	; (800a1c0 <prvSwitchTimerLists+0xc4>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a1aa:	4b06      	ldr	r3, [pc, #24]	; (800a1c4 <prvSwitchTimerLists+0xc8>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a04      	ldr	r2, [pc, #16]	; (800a1c0 <prvSwitchTimerLists+0xc4>)
 800a1b0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a1b2:	4a04      	ldr	r2, [pc, #16]	; (800a1c4 <prvSwitchTimerLists+0xc8>)
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	6013      	str	r3, [r2, #0]
}
 800a1b8:	bf00      	nop
 800a1ba:	3718      	adds	r7, #24
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	20001258 	.word	0x20001258
 800a1c4:	2000125c 	.word	0x2000125c

0800a1c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a1ce:	f000 f96d 	bl	800a4ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a1d2:	4b15      	ldr	r3, [pc, #84]	; (800a228 <prvCheckForValidListAndQueue+0x60>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d120      	bne.n	800a21c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a1da:	4814      	ldr	r0, [pc, #80]	; (800a22c <prvCheckForValidListAndQueue+0x64>)
 800a1dc:	f7fd fe7e 	bl	8007edc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a1e0:	4813      	ldr	r0, [pc, #76]	; (800a230 <prvCheckForValidListAndQueue+0x68>)
 800a1e2:	f7fd fe7b 	bl	8007edc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a1e6:	4b13      	ldr	r3, [pc, #76]	; (800a234 <prvCheckForValidListAndQueue+0x6c>)
 800a1e8:	4a10      	ldr	r2, [pc, #64]	; (800a22c <prvCheckForValidListAndQueue+0x64>)
 800a1ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a1ec:	4b12      	ldr	r3, [pc, #72]	; (800a238 <prvCheckForValidListAndQueue+0x70>)
 800a1ee:	4a10      	ldr	r2, [pc, #64]	; (800a230 <prvCheckForValidListAndQueue+0x68>)
 800a1f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	9300      	str	r3, [sp, #0]
 800a1f6:	4b11      	ldr	r3, [pc, #68]	; (800a23c <prvCheckForValidListAndQueue+0x74>)
 800a1f8:	4a11      	ldr	r2, [pc, #68]	; (800a240 <prvCheckForValidListAndQueue+0x78>)
 800a1fa:	2110      	movs	r1, #16
 800a1fc:	200a      	movs	r0, #10
 800a1fe:	f7fd ff8b 	bl	8008118 <xQueueGenericCreateStatic>
 800a202:	4603      	mov	r3, r0
 800a204:	4a08      	ldr	r2, [pc, #32]	; (800a228 <prvCheckForValidListAndQueue+0x60>)
 800a206:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a208:	4b07      	ldr	r3, [pc, #28]	; (800a228 <prvCheckForValidListAndQueue+0x60>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d005      	beq.n	800a21c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a210:	4b05      	ldr	r3, [pc, #20]	; (800a228 <prvCheckForValidListAndQueue+0x60>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	490b      	ldr	r1, [pc, #44]	; (800a244 <prvCheckForValidListAndQueue+0x7c>)
 800a216:	4618      	mov	r0, r3
 800a218:	f7fe fc88 	bl	8008b2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a21c:	f000 f97a 	bl	800a514 <vPortExitCritical>
}
 800a220:	bf00      	nop
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	20001260 	.word	0x20001260
 800a22c:	20001230 	.word	0x20001230
 800a230:	20001244 	.word	0x20001244
 800a234:	20001258 	.word	0x20001258
 800a238:	2000125c 	.word	0x2000125c
 800a23c:	2000130c 	.word	0x2000130c
 800a240:	2000126c 	.word	0x2000126c
 800a244:	0800ab88 	.word	0x0800ab88

0800a248 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b086      	sub	sp, #24
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d10c      	bne.n	800a274 <pvTimerGetTimerID+0x2c>
	__asm volatile
 800a25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a25e:	b672      	cpsid	i
 800a260:	f383 8811 	msr	BASEPRI, r3
 800a264:	f3bf 8f6f 	isb	sy
 800a268:	f3bf 8f4f 	dsb	sy
 800a26c:	b662      	cpsie	i
 800a26e:	60fb      	str	r3, [r7, #12]
}
 800a270:	bf00      	nop
 800a272:	e7fe      	b.n	800a272 <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800a274:	f000 f91a 	bl	800a4ac <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	69db      	ldr	r3, [r3, #28]
 800a27c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800a27e:	f000 f949 	bl	800a514 <vPortExitCritical>

	return pvReturn;
 800a282:	693b      	ldr	r3, [r7, #16]
}
 800a284:	4618      	mov	r0, r3
 800a286:	3718      	adds	r7, #24
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a28c:	b480      	push	{r7}
 800a28e:	b085      	sub	sp, #20
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	3b04      	subs	r3, #4
 800a29c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a2a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	3b04      	subs	r3, #4
 800a2aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	f023 0201 	bic.w	r2, r3, #1
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	3b04      	subs	r3, #4
 800a2ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a2bc:	4a0c      	ldr	r2, [pc, #48]	; (800a2f0 <pxPortInitialiseStack+0x64>)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	3b14      	subs	r3, #20
 800a2c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	3b04      	subs	r3, #4
 800a2d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f06f 0202 	mvn.w	r2, #2
 800a2da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	3b20      	subs	r3, #32
 800a2e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3714      	adds	r7, #20
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr
 800a2f0:	0800a2f5 	.word	0x0800a2f5

0800a2f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b085      	sub	sp, #20
 800a2f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a2fe:	4b14      	ldr	r3, [pc, #80]	; (800a350 <prvTaskExitError+0x5c>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a306:	d00c      	beq.n	800a322 <prvTaskExitError+0x2e>
	__asm volatile
 800a308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30c:	b672      	cpsid	i
 800a30e:	f383 8811 	msr	BASEPRI, r3
 800a312:	f3bf 8f6f 	isb	sy
 800a316:	f3bf 8f4f 	dsb	sy
 800a31a:	b662      	cpsie	i
 800a31c:	60fb      	str	r3, [r7, #12]
}
 800a31e:	bf00      	nop
 800a320:	e7fe      	b.n	800a320 <prvTaskExitError+0x2c>
	__asm volatile
 800a322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a326:	b672      	cpsid	i
 800a328:	f383 8811 	msr	BASEPRI, r3
 800a32c:	f3bf 8f6f 	isb	sy
 800a330:	f3bf 8f4f 	dsb	sy
 800a334:	b662      	cpsie	i
 800a336:	60bb      	str	r3, [r7, #8]
}
 800a338:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a33a:	bf00      	nop
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d0fc      	beq.n	800a33c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a342:	bf00      	nop
 800a344:	bf00      	nop
 800a346:	3714      	adds	r7, #20
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr
 800a350:	2000000c 	.word	0x2000000c
	...

0800a360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a360:	4b07      	ldr	r3, [pc, #28]	; (800a380 <pxCurrentTCBConst2>)
 800a362:	6819      	ldr	r1, [r3, #0]
 800a364:	6808      	ldr	r0, [r1, #0]
 800a366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a36a:	f380 8809 	msr	PSP, r0
 800a36e:	f3bf 8f6f 	isb	sy
 800a372:	f04f 0000 	mov.w	r0, #0
 800a376:	f380 8811 	msr	BASEPRI, r0
 800a37a:	4770      	bx	lr
 800a37c:	f3af 8000 	nop.w

0800a380 <pxCurrentTCBConst2>:
 800a380:	20000d30 	.word	0x20000d30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a384:	bf00      	nop
 800a386:	bf00      	nop

0800a388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a388:	4808      	ldr	r0, [pc, #32]	; (800a3ac <prvPortStartFirstTask+0x24>)
 800a38a:	6800      	ldr	r0, [r0, #0]
 800a38c:	6800      	ldr	r0, [r0, #0]
 800a38e:	f380 8808 	msr	MSP, r0
 800a392:	f04f 0000 	mov.w	r0, #0
 800a396:	f380 8814 	msr	CONTROL, r0
 800a39a:	b662      	cpsie	i
 800a39c:	b661      	cpsie	f
 800a39e:	f3bf 8f4f 	dsb	sy
 800a3a2:	f3bf 8f6f 	isb	sy
 800a3a6:	df00      	svc	0
 800a3a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a3aa:	bf00      	nop
 800a3ac:	e000ed08 	.word	0xe000ed08

0800a3b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b084      	sub	sp, #16
 800a3b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a3b6:	4b37      	ldr	r3, [pc, #220]	; (800a494 <xPortStartScheduler+0xe4>)
 800a3b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	22ff      	movs	r2, #255	; 0xff
 800a3c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a3d0:	78fb      	ldrb	r3, [r7, #3]
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a3d8:	b2da      	uxtb	r2, r3
 800a3da:	4b2f      	ldr	r3, [pc, #188]	; (800a498 <xPortStartScheduler+0xe8>)
 800a3dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a3de:	4b2f      	ldr	r3, [pc, #188]	; (800a49c <xPortStartScheduler+0xec>)
 800a3e0:	2207      	movs	r2, #7
 800a3e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a3e4:	e009      	b.n	800a3fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a3e6:	4b2d      	ldr	r3, [pc, #180]	; (800a49c <xPortStartScheduler+0xec>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	4a2b      	ldr	r2, [pc, #172]	; (800a49c <xPortStartScheduler+0xec>)
 800a3ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a3f0:	78fb      	ldrb	r3, [r7, #3]
 800a3f2:	b2db      	uxtb	r3, r3
 800a3f4:	005b      	lsls	r3, r3, #1
 800a3f6:	b2db      	uxtb	r3, r3
 800a3f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a3fa:	78fb      	ldrb	r3, [r7, #3]
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a402:	2b80      	cmp	r3, #128	; 0x80
 800a404:	d0ef      	beq.n	800a3e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a406:	4b25      	ldr	r3, [pc, #148]	; (800a49c <xPortStartScheduler+0xec>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f1c3 0307 	rsb	r3, r3, #7
 800a40e:	2b04      	cmp	r3, #4
 800a410:	d00c      	beq.n	800a42c <xPortStartScheduler+0x7c>
	__asm volatile
 800a412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a416:	b672      	cpsid	i
 800a418:	f383 8811 	msr	BASEPRI, r3
 800a41c:	f3bf 8f6f 	isb	sy
 800a420:	f3bf 8f4f 	dsb	sy
 800a424:	b662      	cpsie	i
 800a426:	60bb      	str	r3, [r7, #8]
}
 800a428:	bf00      	nop
 800a42a:	e7fe      	b.n	800a42a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a42c:	4b1b      	ldr	r3, [pc, #108]	; (800a49c <xPortStartScheduler+0xec>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	021b      	lsls	r3, r3, #8
 800a432:	4a1a      	ldr	r2, [pc, #104]	; (800a49c <xPortStartScheduler+0xec>)
 800a434:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a436:	4b19      	ldr	r3, [pc, #100]	; (800a49c <xPortStartScheduler+0xec>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a43e:	4a17      	ldr	r2, [pc, #92]	; (800a49c <xPortStartScheduler+0xec>)
 800a440:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	b2da      	uxtb	r2, r3
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a44a:	4b15      	ldr	r3, [pc, #84]	; (800a4a0 <xPortStartScheduler+0xf0>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4a14      	ldr	r2, [pc, #80]	; (800a4a0 <xPortStartScheduler+0xf0>)
 800a450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a454:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a456:	4b12      	ldr	r3, [pc, #72]	; (800a4a0 <xPortStartScheduler+0xf0>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a11      	ldr	r2, [pc, #68]	; (800a4a0 <xPortStartScheduler+0xf0>)
 800a45c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a460:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a462:	f000 f8dd 	bl	800a620 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a466:	4b0f      	ldr	r3, [pc, #60]	; (800a4a4 <xPortStartScheduler+0xf4>)
 800a468:	2200      	movs	r2, #0
 800a46a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a46c:	f000 f8fc 	bl	800a668 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a470:	4b0d      	ldr	r3, [pc, #52]	; (800a4a8 <xPortStartScheduler+0xf8>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a0c      	ldr	r2, [pc, #48]	; (800a4a8 <xPortStartScheduler+0xf8>)
 800a476:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a47a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a47c:	f7ff ff84 	bl	800a388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a480:	f7fe ff88 	bl	8009394 <vTaskSwitchContext>
	prvTaskExitError();
 800a484:	f7ff ff36 	bl	800a2f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	e000e400 	.word	0xe000e400
 800a498:	2000135c 	.word	0x2000135c
 800a49c:	20001360 	.word	0x20001360
 800a4a0:	e000ed20 	.word	0xe000ed20
 800a4a4:	2000000c 	.word	0x2000000c
 800a4a8:	e000ef34 	.word	0xe000ef34

0800a4ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	af00      	add	r7, sp, #0
	__asm volatile
 800a4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b6:	b672      	cpsid	i
 800a4b8:	f383 8811 	msr	BASEPRI, r3
 800a4bc:	f3bf 8f6f 	isb	sy
 800a4c0:	f3bf 8f4f 	dsb	sy
 800a4c4:	b662      	cpsie	i
 800a4c6:	607b      	str	r3, [r7, #4]
}
 800a4c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a4ca:	4b10      	ldr	r3, [pc, #64]	; (800a50c <vPortEnterCritical+0x60>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	4a0e      	ldr	r2, [pc, #56]	; (800a50c <vPortEnterCritical+0x60>)
 800a4d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a4d4:	4b0d      	ldr	r3, [pc, #52]	; (800a50c <vPortEnterCritical+0x60>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d111      	bne.n	800a500 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a4dc:	4b0c      	ldr	r3, [pc, #48]	; (800a510 <vPortEnterCritical+0x64>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d00c      	beq.n	800a500 <vPortEnterCritical+0x54>
	__asm volatile
 800a4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ea:	b672      	cpsid	i
 800a4ec:	f383 8811 	msr	BASEPRI, r3
 800a4f0:	f3bf 8f6f 	isb	sy
 800a4f4:	f3bf 8f4f 	dsb	sy
 800a4f8:	b662      	cpsie	i
 800a4fa:	603b      	str	r3, [r7, #0]
}
 800a4fc:	bf00      	nop
 800a4fe:	e7fe      	b.n	800a4fe <vPortEnterCritical+0x52>
	}
}
 800a500:	bf00      	nop
 800a502:	370c      	adds	r7, #12
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr
 800a50c:	2000000c 	.word	0x2000000c
 800a510:	e000ed04 	.word	0xe000ed04

0800a514 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a51a:	4b13      	ldr	r3, [pc, #76]	; (800a568 <vPortExitCritical+0x54>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d10c      	bne.n	800a53c <vPortExitCritical+0x28>
	__asm volatile
 800a522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a526:	b672      	cpsid	i
 800a528:	f383 8811 	msr	BASEPRI, r3
 800a52c:	f3bf 8f6f 	isb	sy
 800a530:	f3bf 8f4f 	dsb	sy
 800a534:	b662      	cpsie	i
 800a536:	607b      	str	r3, [r7, #4]
}
 800a538:	bf00      	nop
 800a53a:	e7fe      	b.n	800a53a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a53c:	4b0a      	ldr	r3, [pc, #40]	; (800a568 <vPortExitCritical+0x54>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	3b01      	subs	r3, #1
 800a542:	4a09      	ldr	r2, [pc, #36]	; (800a568 <vPortExitCritical+0x54>)
 800a544:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a546:	4b08      	ldr	r3, [pc, #32]	; (800a568 <vPortExitCritical+0x54>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d105      	bne.n	800a55a <vPortExitCritical+0x46>
 800a54e:	2300      	movs	r3, #0
 800a550:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	f383 8811 	msr	BASEPRI, r3
}
 800a558:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a55a:	bf00      	nop
 800a55c:	370c      	adds	r7, #12
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr
 800a566:	bf00      	nop
 800a568:	2000000c 	.word	0x2000000c
 800a56c:	00000000 	.word	0x00000000

0800a570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a570:	f3ef 8009 	mrs	r0, PSP
 800a574:	f3bf 8f6f 	isb	sy
 800a578:	4b15      	ldr	r3, [pc, #84]	; (800a5d0 <pxCurrentTCBConst>)
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	f01e 0f10 	tst.w	lr, #16
 800a580:	bf08      	it	eq
 800a582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a58a:	6010      	str	r0, [r2, #0]
 800a58c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a590:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a594:	b672      	cpsid	i
 800a596:	f380 8811 	msr	BASEPRI, r0
 800a59a:	f3bf 8f4f 	dsb	sy
 800a59e:	f3bf 8f6f 	isb	sy
 800a5a2:	b662      	cpsie	i
 800a5a4:	f7fe fef6 	bl	8009394 <vTaskSwitchContext>
 800a5a8:	f04f 0000 	mov.w	r0, #0
 800a5ac:	f380 8811 	msr	BASEPRI, r0
 800a5b0:	bc09      	pop	{r0, r3}
 800a5b2:	6819      	ldr	r1, [r3, #0]
 800a5b4:	6808      	ldr	r0, [r1, #0]
 800a5b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ba:	f01e 0f10 	tst.w	lr, #16
 800a5be:	bf08      	it	eq
 800a5c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a5c4:	f380 8809 	msr	PSP, r0
 800a5c8:	f3bf 8f6f 	isb	sy
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop

0800a5d0 <pxCurrentTCBConst>:
 800a5d0:	20000d30 	.word	0x20000d30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a5d4:	bf00      	nop
 800a5d6:	bf00      	nop

0800a5d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
	__asm volatile
 800a5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e2:	b672      	cpsid	i
 800a5e4:	f383 8811 	msr	BASEPRI, r3
 800a5e8:	f3bf 8f6f 	isb	sy
 800a5ec:	f3bf 8f4f 	dsb	sy
 800a5f0:	b662      	cpsie	i
 800a5f2:	607b      	str	r3, [r7, #4]
}
 800a5f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a5f6:	f7fe fe11 	bl	800921c <xTaskIncrementTick>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d003      	beq.n	800a608 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a600:	4b06      	ldr	r3, [pc, #24]	; (800a61c <SysTick_Handler+0x44>)
 800a602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a606:	601a      	str	r2, [r3, #0]
 800a608:	2300      	movs	r3, #0
 800a60a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	f383 8811 	msr	BASEPRI, r3
}
 800a612:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a614:	bf00      	nop
 800a616:	3708      	adds	r7, #8
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}
 800a61c:	e000ed04 	.word	0xe000ed04

0800a620 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a620:	b480      	push	{r7}
 800a622:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a624:	4b0b      	ldr	r3, [pc, #44]	; (800a654 <vPortSetupTimerInterrupt+0x34>)
 800a626:	2200      	movs	r2, #0
 800a628:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a62a:	4b0b      	ldr	r3, [pc, #44]	; (800a658 <vPortSetupTimerInterrupt+0x38>)
 800a62c:	2200      	movs	r2, #0
 800a62e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a630:	4b0a      	ldr	r3, [pc, #40]	; (800a65c <vPortSetupTimerInterrupt+0x3c>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a0a      	ldr	r2, [pc, #40]	; (800a660 <vPortSetupTimerInterrupt+0x40>)
 800a636:	fba2 2303 	umull	r2, r3, r2, r3
 800a63a:	099b      	lsrs	r3, r3, #6
 800a63c:	4a09      	ldr	r2, [pc, #36]	; (800a664 <vPortSetupTimerInterrupt+0x44>)
 800a63e:	3b01      	subs	r3, #1
 800a640:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a642:	4b04      	ldr	r3, [pc, #16]	; (800a654 <vPortSetupTimerInterrupt+0x34>)
 800a644:	2207      	movs	r2, #7
 800a646:	601a      	str	r2, [r3, #0]
}
 800a648:	bf00      	nop
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr
 800a652:	bf00      	nop
 800a654:	e000e010 	.word	0xe000e010
 800a658:	e000e018 	.word	0xe000e018
 800a65c:	20000000 	.word	0x20000000
 800a660:	10624dd3 	.word	0x10624dd3
 800a664:	e000e014 	.word	0xe000e014

0800a668 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a668:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a678 <vPortEnableVFP+0x10>
 800a66c:	6801      	ldr	r1, [r0, #0]
 800a66e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a672:	6001      	str	r1, [r0, #0]
 800a674:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a676:	bf00      	nop
 800a678:	e000ed88 	.word	0xe000ed88

0800a67c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a67c:	b480      	push	{r7}
 800a67e:	b085      	sub	sp, #20
 800a680:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a682:	f3ef 8305 	mrs	r3, IPSR
 800a686:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2b0f      	cmp	r3, #15
 800a68c:	d916      	bls.n	800a6bc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a68e:	4a19      	ldr	r2, [pc, #100]	; (800a6f4 <vPortValidateInterruptPriority+0x78>)
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	4413      	add	r3, r2
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a698:	4b17      	ldr	r3, [pc, #92]	; (800a6f8 <vPortValidateInterruptPriority+0x7c>)
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	7afa      	ldrb	r2, [r7, #11]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d20c      	bcs.n	800a6bc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800a6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a6:	b672      	cpsid	i
 800a6a8:	f383 8811 	msr	BASEPRI, r3
 800a6ac:	f3bf 8f6f 	isb	sy
 800a6b0:	f3bf 8f4f 	dsb	sy
 800a6b4:	b662      	cpsie	i
 800a6b6:	607b      	str	r3, [r7, #4]
}
 800a6b8:	bf00      	nop
 800a6ba:	e7fe      	b.n	800a6ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a6bc:	4b0f      	ldr	r3, [pc, #60]	; (800a6fc <vPortValidateInterruptPriority+0x80>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a6c4:	4b0e      	ldr	r3, [pc, #56]	; (800a700 <vPortValidateInterruptPriority+0x84>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d90c      	bls.n	800a6e6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800a6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d0:	b672      	cpsid	i
 800a6d2:	f383 8811 	msr	BASEPRI, r3
 800a6d6:	f3bf 8f6f 	isb	sy
 800a6da:	f3bf 8f4f 	dsb	sy
 800a6de:	b662      	cpsie	i
 800a6e0:	603b      	str	r3, [r7, #0]
}
 800a6e2:	bf00      	nop
 800a6e4:	e7fe      	b.n	800a6e4 <vPortValidateInterruptPriority+0x68>
	}
 800a6e6:	bf00      	nop
 800a6e8:	3714      	adds	r7, #20
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr
 800a6f2:	bf00      	nop
 800a6f4:	e000e3f0 	.word	0xe000e3f0
 800a6f8:	2000135c 	.word	0x2000135c
 800a6fc:	e000ed0c 	.word	0xe000ed0c
 800a700:	20001360 	.word	0x20001360

0800a704 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b08a      	sub	sp, #40	; 0x28
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a70c:	2300      	movs	r3, #0
 800a70e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a710:	f7fe fcb4 	bl	800907c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a714:	4b5b      	ldr	r3, [pc, #364]	; (800a884 <pvPortMalloc+0x180>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d101      	bne.n	800a720 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a71c:	f000 f91a 	bl	800a954 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a720:	4b59      	ldr	r3, [pc, #356]	; (800a888 <pvPortMalloc+0x184>)
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	4013      	ands	r3, r2
 800a728:	2b00      	cmp	r3, #0
 800a72a:	f040 8092 	bne.w	800a852 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d01f      	beq.n	800a774 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800a734:	2208      	movs	r2, #8
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	4413      	add	r3, r2
 800a73a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f003 0307 	and.w	r3, r3, #7
 800a742:	2b00      	cmp	r3, #0
 800a744:	d016      	beq.n	800a774 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f023 0307 	bic.w	r3, r3, #7
 800a74c:	3308      	adds	r3, #8
 800a74e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f003 0307 	and.w	r3, r3, #7
 800a756:	2b00      	cmp	r3, #0
 800a758:	d00c      	beq.n	800a774 <pvPortMalloc+0x70>
	__asm volatile
 800a75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75e:	b672      	cpsid	i
 800a760:	f383 8811 	msr	BASEPRI, r3
 800a764:	f3bf 8f6f 	isb	sy
 800a768:	f3bf 8f4f 	dsb	sy
 800a76c:	b662      	cpsie	i
 800a76e:	617b      	str	r3, [r7, #20]
}
 800a770:	bf00      	nop
 800a772:	e7fe      	b.n	800a772 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d06b      	beq.n	800a852 <pvPortMalloc+0x14e>
 800a77a:	4b44      	ldr	r3, [pc, #272]	; (800a88c <pvPortMalloc+0x188>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	429a      	cmp	r2, r3
 800a782:	d866      	bhi.n	800a852 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a784:	4b42      	ldr	r3, [pc, #264]	; (800a890 <pvPortMalloc+0x18c>)
 800a786:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a788:	4b41      	ldr	r3, [pc, #260]	; (800a890 <pvPortMalloc+0x18c>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a78e:	e004      	b.n	800a79a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800a790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a792:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d903      	bls.n	800a7ac <pvPortMalloc+0xa8>
 800a7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d1f1      	bne.n	800a790 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a7ac:	4b35      	ldr	r3, [pc, #212]	; (800a884 <pvPortMalloc+0x180>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d04d      	beq.n	800a852 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a7b6:	6a3b      	ldr	r3, [r7, #32]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	2208      	movs	r2, #8
 800a7bc:	4413      	add	r3, r2
 800a7be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c2:	681a      	ldr	r2, [r3, #0]
 800a7c4:	6a3b      	ldr	r3, [r7, #32]
 800a7c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ca:	685a      	ldr	r2, [r3, #4]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	1ad2      	subs	r2, r2, r3
 800a7d0:	2308      	movs	r3, #8
 800a7d2:	005b      	lsls	r3, r3, #1
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d921      	bls.n	800a81c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a7d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4413      	add	r3, r2
 800a7de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7e0:	69bb      	ldr	r3, [r7, #24]
 800a7e2:	f003 0307 	and.w	r3, r3, #7
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00c      	beq.n	800a804 <pvPortMalloc+0x100>
	__asm volatile
 800a7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ee:	b672      	cpsid	i
 800a7f0:	f383 8811 	msr	BASEPRI, r3
 800a7f4:	f3bf 8f6f 	isb	sy
 800a7f8:	f3bf 8f4f 	dsb	sy
 800a7fc:	b662      	cpsie	i
 800a7fe:	613b      	str	r3, [r7, #16]
}
 800a800:	bf00      	nop
 800a802:	e7fe      	b.n	800a802 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a806:	685a      	ldr	r2, [r3, #4]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	1ad2      	subs	r2, r2, r3
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a816:	69b8      	ldr	r0, [r7, #24]
 800a818:	f000 f8fe 	bl	800aa18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a81c:	4b1b      	ldr	r3, [pc, #108]	; (800a88c <pvPortMalloc+0x188>)
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	1ad3      	subs	r3, r2, r3
 800a826:	4a19      	ldr	r2, [pc, #100]	; (800a88c <pvPortMalloc+0x188>)
 800a828:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a82a:	4b18      	ldr	r3, [pc, #96]	; (800a88c <pvPortMalloc+0x188>)
 800a82c:	681a      	ldr	r2, [r3, #0]
 800a82e:	4b19      	ldr	r3, [pc, #100]	; (800a894 <pvPortMalloc+0x190>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	429a      	cmp	r2, r3
 800a834:	d203      	bcs.n	800a83e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a836:	4b15      	ldr	r3, [pc, #84]	; (800a88c <pvPortMalloc+0x188>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a16      	ldr	r2, [pc, #88]	; (800a894 <pvPortMalloc+0x190>)
 800a83c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a840:	685a      	ldr	r2, [r3, #4]
 800a842:	4b11      	ldr	r3, [pc, #68]	; (800a888 <pvPortMalloc+0x184>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	431a      	orrs	r2, r3
 800a848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84e:	2200      	movs	r2, #0
 800a850:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a852:	f7fe fc21 	bl	8009098 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	f003 0307 	and.w	r3, r3, #7
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d00c      	beq.n	800a87a <pvPortMalloc+0x176>
	__asm volatile
 800a860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a864:	b672      	cpsid	i
 800a866:	f383 8811 	msr	BASEPRI, r3
 800a86a:	f3bf 8f6f 	isb	sy
 800a86e:	f3bf 8f4f 	dsb	sy
 800a872:	b662      	cpsie	i
 800a874:	60fb      	str	r3, [r7, #12]
}
 800a876:	bf00      	nop
 800a878:	e7fe      	b.n	800a878 <pvPortMalloc+0x174>
	return pvReturn;
 800a87a:	69fb      	ldr	r3, [r7, #28]
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3728      	adds	r7, #40	; 0x28
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}
 800a884:	20004f6c 	.word	0x20004f6c
 800a888:	20004f78 	.word	0x20004f78
 800a88c:	20004f70 	.word	0x20004f70
 800a890:	20004f64 	.word	0x20004f64
 800a894:	20004f74 	.word	0x20004f74

0800a898 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b086      	sub	sp, #24
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d04c      	beq.n	800a944 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a8aa:	2308      	movs	r3, #8
 800a8ac:	425b      	negs	r3, r3
 800a8ae:	697a      	ldr	r2, [r7, #20]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	685a      	ldr	r2, [r3, #4]
 800a8bc:	4b23      	ldr	r3, [pc, #140]	; (800a94c <vPortFree+0xb4>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4013      	ands	r3, r2
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d10c      	bne.n	800a8e0 <vPortFree+0x48>
	__asm volatile
 800a8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ca:	b672      	cpsid	i
 800a8cc:	f383 8811 	msr	BASEPRI, r3
 800a8d0:	f3bf 8f6f 	isb	sy
 800a8d4:	f3bf 8f4f 	dsb	sy
 800a8d8:	b662      	cpsie	i
 800a8da:	60fb      	str	r3, [r7, #12]
}
 800a8dc:	bf00      	nop
 800a8de:	e7fe      	b.n	800a8de <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d00c      	beq.n	800a902 <vPortFree+0x6a>
	__asm volatile
 800a8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ec:	b672      	cpsid	i
 800a8ee:	f383 8811 	msr	BASEPRI, r3
 800a8f2:	f3bf 8f6f 	isb	sy
 800a8f6:	f3bf 8f4f 	dsb	sy
 800a8fa:	b662      	cpsie	i
 800a8fc:	60bb      	str	r3, [r7, #8]
}
 800a8fe:	bf00      	nop
 800a900:	e7fe      	b.n	800a900 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	685a      	ldr	r2, [r3, #4]
 800a906:	4b11      	ldr	r3, [pc, #68]	; (800a94c <vPortFree+0xb4>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4013      	ands	r3, r2
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d019      	beq.n	800a944 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d115      	bne.n	800a944 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	685a      	ldr	r2, [r3, #4]
 800a91c:	4b0b      	ldr	r3, [pc, #44]	; (800a94c <vPortFree+0xb4>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	43db      	mvns	r3, r3
 800a922:	401a      	ands	r2, r3
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a928:	f7fe fba8 	bl	800907c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	685a      	ldr	r2, [r3, #4]
 800a930:	4b07      	ldr	r3, [pc, #28]	; (800a950 <vPortFree+0xb8>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4413      	add	r3, r2
 800a936:	4a06      	ldr	r2, [pc, #24]	; (800a950 <vPortFree+0xb8>)
 800a938:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a93a:	6938      	ldr	r0, [r7, #16]
 800a93c:	f000 f86c 	bl	800aa18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a940:	f7fe fbaa 	bl	8009098 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a944:	bf00      	nop
 800a946:	3718      	adds	r7, #24
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}
 800a94c:	20004f78 	.word	0x20004f78
 800a950:	20004f70 	.word	0x20004f70

0800a954 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a954:	b480      	push	{r7}
 800a956:	b085      	sub	sp, #20
 800a958:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a95a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a95e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a960:	4b27      	ldr	r3, [pc, #156]	; (800aa00 <prvHeapInit+0xac>)
 800a962:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f003 0307 	and.w	r3, r3, #7
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d00c      	beq.n	800a988 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	3307      	adds	r3, #7
 800a972:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f023 0307 	bic.w	r3, r3, #7
 800a97a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a97c:	68ba      	ldr	r2, [r7, #8]
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	4a1f      	ldr	r2, [pc, #124]	; (800aa00 <prvHeapInit+0xac>)
 800a984:	4413      	add	r3, r2
 800a986:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a98c:	4a1d      	ldr	r2, [pc, #116]	; (800aa04 <prvHeapInit+0xb0>)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a992:	4b1c      	ldr	r3, [pc, #112]	; (800aa04 <prvHeapInit+0xb0>)
 800a994:	2200      	movs	r2, #0
 800a996:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	68ba      	ldr	r2, [r7, #8]
 800a99c:	4413      	add	r3, r2
 800a99e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a9a0:	2208      	movs	r2, #8
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	1a9b      	subs	r3, r3, r2
 800a9a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f023 0307 	bic.w	r3, r3, #7
 800a9ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	4a15      	ldr	r2, [pc, #84]	; (800aa08 <prvHeapInit+0xb4>)
 800a9b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a9b6:	4b14      	ldr	r3, [pc, #80]	; (800aa08 <prvHeapInit+0xb4>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a9be:	4b12      	ldr	r3, [pc, #72]	; (800aa08 <prvHeapInit+0xb4>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	1ad2      	subs	r2, r2, r3
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a9d4:	4b0c      	ldr	r3, [pc, #48]	; (800aa08 <prvHeapInit+0xb4>)
 800a9d6:	681a      	ldr	r2, [r3, #0]
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	4a0a      	ldr	r2, [pc, #40]	; (800aa0c <prvHeapInit+0xb8>)
 800a9e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	4a09      	ldr	r2, [pc, #36]	; (800aa10 <prvHeapInit+0xbc>)
 800a9ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a9ec:	4b09      	ldr	r3, [pc, #36]	; (800aa14 <prvHeapInit+0xc0>)
 800a9ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a9f2:	601a      	str	r2, [r3, #0]
}
 800a9f4:	bf00      	nop
 800a9f6:	3714      	adds	r7, #20
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr
 800aa00:	20001364 	.word	0x20001364
 800aa04:	20004f64 	.word	0x20004f64
 800aa08:	20004f6c 	.word	0x20004f6c
 800aa0c:	20004f74 	.word	0x20004f74
 800aa10:	20004f70 	.word	0x20004f70
 800aa14:	20004f78 	.word	0x20004f78

0800aa18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b085      	sub	sp, #20
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aa20:	4b28      	ldr	r3, [pc, #160]	; (800aac4 <prvInsertBlockIntoFreeList+0xac>)
 800aa22:	60fb      	str	r3, [r7, #12]
 800aa24:	e002      	b.n	800aa2c <prvInsertBlockIntoFreeList+0x14>
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	60fb      	str	r3, [r7, #12]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d8f7      	bhi.n	800aa26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	68ba      	ldr	r2, [r7, #8]
 800aa40:	4413      	add	r3, r2
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d108      	bne.n	800aa5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	685a      	ldr	r2, [r3, #4]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	441a      	add	r2, r3
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	685b      	ldr	r3, [r3, #4]
 800aa62:	68ba      	ldr	r2, [r7, #8]
 800aa64:	441a      	add	r2, r3
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d118      	bne.n	800aaa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681a      	ldr	r2, [r3, #0]
 800aa72:	4b15      	ldr	r3, [pc, #84]	; (800aac8 <prvInsertBlockIntoFreeList+0xb0>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d00d      	beq.n	800aa96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	685a      	ldr	r2, [r3, #4]
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	441a      	add	r2, r3
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	681a      	ldr	r2, [r3, #0]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	601a      	str	r2, [r3, #0]
 800aa94:	e008      	b.n	800aaa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aa96:	4b0c      	ldr	r3, [pc, #48]	; (800aac8 <prvInsertBlockIntoFreeList+0xb0>)
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	601a      	str	r2, [r3, #0]
 800aa9e:	e003      	b.n	800aaa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aaa8:	68fa      	ldr	r2, [r7, #12]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d002      	beq.n	800aab6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aab6:	bf00      	nop
 800aab8:	3714      	adds	r7, #20
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop
 800aac4:	20004f64 	.word	0x20004f64
 800aac8:	20004f6c 	.word	0x20004f6c

0800aacc <__libc_init_array>:
 800aacc:	b570      	push	{r4, r5, r6, lr}
 800aace:	4d0d      	ldr	r5, [pc, #52]	; (800ab04 <__libc_init_array+0x38>)
 800aad0:	4c0d      	ldr	r4, [pc, #52]	; (800ab08 <__libc_init_array+0x3c>)
 800aad2:	1b64      	subs	r4, r4, r5
 800aad4:	10a4      	asrs	r4, r4, #2
 800aad6:	2600      	movs	r6, #0
 800aad8:	42a6      	cmp	r6, r4
 800aada:	d109      	bne.n	800aaf0 <__libc_init_array+0x24>
 800aadc:	4d0b      	ldr	r5, [pc, #44]	; (800ab0c <__libc_init_array+0x40>)
 800aade:	4c0c      	ldr	r4, [pc, #48]	; (800ab10 <__libc_init_array+0x44>)
 800aae0:	f000 f82e 	bl	800ab40 <_init>
 800aae4:	1b64      	subs	r4, r4, r5
 800aae6:	10a4      	asrs	r4, r4, #2
 800aae8:	2600      	movs	r6, #0
 800aaea:	42a6      	cmp	r6, r4
 800aaec:	d105      	bne.n	800aafa <__libc_init_array+0x2e>
 800aaee:	bd70      	pop	{r4, r5, r6, pc}
 800aaf0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaf4:	4798      	blx	r3
 800aaf6:	3601      	adds	r6, #1
 800aaf8:	e7ee      	b.n	800aad8 <__libc_init_array+0xc>
 800aafa:	f855 3b04 	ldr.w	r3, [r5], #4
 800aafe:	4798      	blx	r3
 800ab00:	3601      	adds	r6, #1
 800ab02:	e7f2      	b.n	800aaea <__libc_init_array+0x1e>
 800ab04:	0800ac00 	.word	0x0800ac00
 800ab08:	0800ac00 	.word	0x0800ac00
 800ab0c:	0800ac00 	.word	0x0800ac00
 800ab10:	0800ac04 	.word	0x0800ac04

0800ab14 <memcpy>:
 800ab14:	440a      	add	r2, r1
 800ab16:	4291      	cmp	r1, r2
 800ab18:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab1c:	d100      	bne.n	800ab20 <memcpy+0xc>
 800ab1e:	4770      	bx	lr
 800ab20:	b510      	push	{r4, lr}
 800ab22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab2a:	4291      	cmp	r1, r2
 800ab2c:	d1f9      	bne.n	800ab22 <memcpy+0xe>
 800ab2e:	bd10      	pop	{r4, pc}

0800ab30 <memset>:
 800ab30:	4402      	add	r2, r0
 800ab32:	4603      	mov	r3, r0
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d100      	bne.n	800ab3a <memset+0xa>
 800ab38:	4770      	bx	lr
 800ab3a:	f803 1b01 	strb.w	r1, [r3], #1
 800ab3e:	e7f9      	b.n	800ab34 <memset+0x4>

0800ab40 <_init>:
 800ab40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab42:	bf00      	nop
 800ab44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab46:	bc08      	pop	{r3}
 800ab48:	469e      	mov	lr, r3
 800ab4a:	4770      	bx	lr

0800ab4c <_fini>:
 800ab4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab4e:	bf00      	nop
 800ab50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab52:	bc08      	pop	{r3}
 800ab54:	469e      	mov	lr, r3
 800ab56:	4770      	bx	lr
